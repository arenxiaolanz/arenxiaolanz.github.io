<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript中常用符号</title>
      <link href="/archives/65236d92.html"/>
      <url>/archives/65236d92.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-可选链"><a href="#1-可选链" class="headerlink" title="1. ?. 可选链"></a>1. ?. 可选链</h1><p>可选链是一种先检查属性是否存在，再尝试访问该属性的运算符 （ ?. ）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imgSrc = &#123;</span><br><span class="line">  <span class="attr">src</span>: <span class="string">&#x27;public/import/import_src&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jsx语法</span></span><br><span class="line">&lt;img src=&#123;imgSrc?.src&#125;&gt;</span><br><span class="line"><span class="comment">//相当于if判断的简写语法，或者三元运算符的简写语法</span></span><br></pre></td></tr></table></figure><h1 id="2-amp-交叉类型（interp-types）"><a href="#2-amp-交叉类型（interp-types）" class="headerlink" title="2. &amp; 交叉类型（interp types）"></a>2. &amp; 交叉类型（interp types）</h1><p>在 TypeScript 中，交叉类型是将多个类型合并为一个类型，我们可以通过 &amp; 把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp; 把现有的多种类型叠加到一起成为一种类型</span></span><br><span class="line"></span><br><span class="line">type PointX = &#123;</span><br><span class="line"> <span class="attr">x</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type Point =  PointX &amp; &#123;</span><br><span class="line"> <span class="attr">y</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> point: Point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若有多种类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type PointX = &#123;</span><br><span class="line"> <span class="attr">x</span>: number;</span><br><span class="line"> z: string;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type Point =  PointX &amp; &#123;</span><br><span class="line"> <span class="attr">y</span>: number;</span><br><span class="line"> z: number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> point: Point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">z</span>: <span class="number">3</span>, <span class="comment">// Type &#x27;number&#x27; is not assignable to type &#x27;never&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里 z 为什么会是 never 类型喃？因为 string &amp; number 的值是永不存在的值，即 never</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type PointX = &#123;</span><br><span class="line"> <span class="attr">x</span>: number;</span><br><span class="line"> z: &#123;<span class="attr">x</span>: string&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type Point =  PointX &amp; &#123;</span><br><span class="line"> <span class="attr">y</span>: number;</span><br><span class="line">   z: &#123;<span class="attr">z</span>: number&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> point: Point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">z</span>: &#123; </span><br><span class="line">      <span class="attr">x</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      <span class="attr">z</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>而这样是可以的，所以，即多个类型合并为一个交叉类型时，如果多个类型间存在同名基础类型属性时，合并后的同名基础类型属性为 never ，如果同名属性均为非基础类型，则可以成功合并</p></blockquote><h1 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3. ?: 可选参数"></a>3. ?: 可选参数</h1><p>TypeScript 特有的，在 TypeScript 2.0 支持了这个特性，可选参数和属性会自动把 undefined 添加到他们的类型中，即使他们的类型注解明确不包含 undefined 。例如，下面两个类型是完全相同的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用--strictNullChecks参数进行编译</span></span><br><span class="line">type T1 = <span class="function">(<span class="params">x?: number</span>) =&gt;</span> string              <span class="comment">// x的类型是 number | undefined</span></span><br><span class="line">type T2 = <span class="function">(<span class="params">x?: number | <span class="literal">undefined</span></span>) =&gt;</span> string  <span class="comment">// x的类型是 number | undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>在TypeScript里，我们使用 ?: 最多的情况是在接口中，通常：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface Point &#123;</span><br><span class="line">  <span class="attr">x</span>: number;</span><br><span class="line">  y: number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> point: Point</span><br><span class="line">point = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中 point 中的两个属性 x 、 y 都是必须的，如果赋值时缺少任意一个就会报错：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">point = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Property &#x27;y&#x27; is missing in type &#x27;&#123; x: number; &#125;&#x27; but required in type &#x27;Point&#x27;.</span></span><br></pre></td></tr></table></figure><blockquote><p>但接口里的属性不全都是必需的。有些是只在某些条件下存在，或者根本不存在。所以，这里就需要可选属性（ ?. ），即属性是可选的</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface Point &#123;</span><br><span class="line">  <span class="attr">x</span>: number;</span><br><span class="line">  y: number;</span><br><span class="line">  z?: number; <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> point: Point</span><br><span class="line">point = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-联合类型"><a href="#4-联合类型" class="headerlink" title="4. | 联合类型"></a>4. | 联合类型</h1><blockquote><p>联合类型表示一个值可以是几种类型之一，用竖线（ |）分隔每个类型，所以 number | string | boolean 表示一个值可以是 number， string，或 boolean</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user: string | number | boolean = <span class="string">&#x27;an&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>联合类型通常与 null 或 undefined 一起使用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> helloName = <span class="function">(<span class="params">name: string | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>你也可以这么用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type Hello = <span class="string">&#x27;say&#x27;</span> | <span class="string">&#x27;kiss&#x27;</span> | <span class="string">&#x27;smile&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="5-空值合并运算符"><a href="#5-空值合并运算符" class="headerlink" title="5. ??  空值合并运算符"></a>5. ??  空值合并运算符</h1><p>当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;level&quot;: null</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> level1 = user.level ?? <span class="string">&#x27;暂无等级&#x27;</span> <span class="comment">// level1 -&gt; &#x27;暂无等级&#x27;</span></span><br><span class="line"><span class="keyword">var</span> level2 = user.other_level ?? <span class="string">&#x27;暂无等级&#x27;</span> <span class="comment">// level1 -&gt; &#x27;暂无等级&#x27;</span></span><br></pre></td></tr></table></figure><p>与逻辑或操作符（||） 不同，|| 会在左侧操作数为 false 值（例如，’’ 或 0）时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;level&quot;: 0   </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> level1 = user.level || <span class="string">&#x27;暂无等级&#x27;</span> <span class="comment">// level1 -&gt; 暂无等级</span></span><br><span class="line"><span class="keyword">var</span> level2 = user.level ?? <span class="string">&#x27;暂无等级&#x27;</span> <span class="comment">// level2 -&gt; 0</span></span><br></pre></td></tr></table></figure><h1 id="6-非空断言类型符"><a href="#6-非空断言类型符" class="headerlink" title="6. ! 非空断言类型符"></a>6. ! 非空断言类型符</h1><p>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于断言操作对象是非 null 和非 undefined 类型的。具体而言，运算 x! 产生一个不包含 null 和 undefined 的 x 的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">hello: string | <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hi1 = hello!.toLowerCase() <span class="comment">// OK</span></span><br><span class="line">  <span class="keyword">const</span> hi2 = hello.toLowerCase() <span class="comment">// Error: Object is possibly &#x27;undefined&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-数字分隔符"><a href="#7-数字分隔符" class="headerlink" title="7. _ 数字分隔符"></a>7. _ 数字分隔符</h1><p>允许用户在数字之间使用下划线_来对数字分组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> million = <span class="number">1_000_000</span></span><br><span class="line"><span class="keyword">const</span> phone = <span class="number">173_1777_7777</span></span><br><span class="line"><span class="keyword">const</span> bytes = <span class="number">0xFF_0A_B3_F2</span></span><br><span class="line"><span class="keyword">const</span> word = <span class="number">0b1100_0011_1101_0001</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是以下函数是不支持分隔符：</p><ul><li>Number()</li><li>parseInt()</li><li>parseFloat()</li></ul></blockquote><h1 id="8-指数运算符"><a href="#8-指数运算符" class="headerlink" title="8. ** 指数运算符"></a>8. ** 指数运算符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>**<span class="number">5</span> <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript中变量后加个问号</title>
      <link href="/archives/29333a4f.html"/>
      <url>/archives/29333a4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-作为typescript中if判断的简单写法"><a href="#1-作为typescript中if判断的简单写法" class="headerlink" title="1. 作为typescript中if判断的简单写法"></a>1. 作为typescript中if判断的简单写法</h1><p>例：data入参可能为null,undefined，通常我们的写法是直接上if判断，然后再取data中的属性，但是有了问号点(?.)写法就简单很多了，看下面例子：</p><ol><li>typescript写法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.data可能为null,undefined , row也可能为null,undefined</span></span><br><span class="line"><span class="comment">//2.假设data完整结构 &#123;row:&#123;name:&#x27;aaa&#x27;&#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data: any</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> name = data?.row?.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个意思就是说只有 data存在的时候 才能进行后面的动作</span></span><br><span class="line"><span class="comment">//  才能判断row存不存在 ，只有row存在的时候才能获取它的name</span></span><br></pre></td></tr></table></figure><ol start="2"><li>普通写法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.data可能为null,undefined , row也可能为null,undefined</span></span><br><span class="line"><span class="comment">//2.假设data完整结构 &#123;row:&#123;name:&#x27;aaa&#x27;&#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data: any</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> name;</span><br><span class="line"><span class="keyword">if</span> (data &amp;&amp; data.row) &#123;</span><br><span class="line">name = data.row.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-三元运算符"><a href="#2-三元运算符" class="headerlink" title="2. 三元运算符"></a>2. 三元运算符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">条件 ？真 ：假</span><br><span class="line"></span><br><span class="line">从上面写法可以看出来问号点(?.)的写法其实等价于例<span class="number">2</span>的<span class="keyword">if</span>判断、三元运算符</span><br><span class="line">  （<span class="keyword">let</span> a = b == <span class="literal">null</span> ? <span class="literal">null</span> : b.a）</span><br><span class="line">如果为空的话，就为空，若不为空的话，就取里面的a</span><br></pre></td></tr></table></figure><h1 id="3-作为Typescript-接口属性数量不确定时的定义方法"><a href="#3-作为Typescript-接口属性数量不确定时的定义方法" class="headerlink" title="3. 作为Typescript 接口属性数量不确定时的定义方法"></a>3. 作为<a href="https://so.csdn.net/so/search?q=Typescript&spm=1001.2101.3001.7020">Typescript</a> 接口属性数量不确定时的定义方法</h1><h2 id="1-少一个，可选属性"><a href="#1-少一个，可选属性" class="headerlink" title="1. 少一个，可选属性"></a>1. 少一个，可选属性</h2><p>可选属性意如其名，用法也简单，只需要在属性名字后面加一个？即可。<br>需求: 如果传递了middleName就输出完整名称, 如果没有传递middleName, 那么就输出firstName和lastName</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface FullName&#123;</span><br><span class="line">    <span class="attr">firstName</span>:string</span><br><span class="line">    <span class="attr">lastName</span>:string</span><br><span class="line">    middleName?:string</span><br><span class="line">    [propName:string]:any</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">&#123;firstName, lastName, middleName&#125;:FullName</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(`我的姓名是:$&#123;firstName&#125;_$&#123;lastName&#125;`);</span></span><br><span class="line">    <span class="keyword">if</span>(middleName)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`我的姓名是:<span class="subst">$&#123;firstName&#125;</span>_<span class="subst">$&#123;middleName&#125;</span>_<span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`我的姓名是:<span class="subst">$&#123;firstName&#125;</span>_<span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">say(&#123;<span class="attr">firstName</span>:<span class="string">&#x27;Jonathan&#x27;</span>, <span class="attr">lastName</span>:<span class="string">&#x27;Lee&#x27;</span>, <span class="attr">middleName</span>:<span class="string">&quot;666&quot;</span>&#125;);</span><br><span class="line">say(&#123;<span class="attr">firstName</span>:<span class="string">&#x27;Jonathan&#x27;</span>, <span class="attr">lastName</span>:<span class="string">&#x27;Lee&#x27;</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-多一个，用索引签名"><a href="#2-多一个，用索引签名" class="headerlink" title="2. 多一个，用索引签名"></a>2. 多一个，用索引签名</h2><p>用于描述那些“通过索引得到”的类型，比如arr[10]或obj[“key”]。<br>意思有点抽象，可以大概理解为是在定义对象中key（propName）和value的数据结构，后续对象中的属性，只要key和value满足索引签名的限定即可, 无论有多少个都无所谓。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface FullName &#123;</span><br><span class="line">    [propName:string]:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj:FullName = &#123;</span><br><span class="line">    <span class="comment">// 注意点: 只要key和value满足索引签名的限定即可, 无论有多少个都无所谓</span></span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&#x27;Jonathan&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">    <span class="comment">// middleName:false // 报错</span></span><br><span class="line">    <span class="comment">// 无论key是什么类型最终都会自动转换成字符串类型, 所以没有报错</span></span><br><span class="line">    <span class="comment">// false: &#x27;666&#x27; </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">interface stringArray &#123;</span><br><span class="line">    [propName:number]:string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> arr:stringArray = &#123;</span><br><span class="line">    <span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">&#x27;c&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// let arr:stringArray = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-只要是冒号后面的就是他的类型"><a href="#4-只要是冒号后面的就是他的类型" class="headerlink" title="4. 只要是冒号后面的就是他的类型"></a>4. 只要是冒号后面的就是他的类型</h1>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="/archives/46390b34.html"/>
      <url>/archives/46390b34.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-git拉取代码的常用命令"><a href="#1-git拉取代码的常用命令" class="headerlink" title="1. git拉取代码的常用命令"></a>1. git拉取代码的常用命令</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#拉取项目代码</span><br><span class="line">git clone http:<span class="comment">//xxxxx  #clone后面加的是复制的项目地址</span></span><br><span class="line"></span><br><span class="line">#拉取项目到会生成一个新的项目文件，需cd 进入项目文件中，这个时候一般在项目的master分支，</span><br><span class="line">#需切换到开发分支上，开发分支一般以dev命名。</span><br><span class="line">git checkout dev   <span class="comment">//切换分支</span></span><br><span class="line"></span><br><span class="line">#开发的话一般会新建一个自己的开发分支，不在dev分支上直接开发</span><br><span class="line">git checkout -b dev-test  #新建并切换到dev-test分支</span><br><span class="line">这个时候就可以开发了。</span><br></pre></td></tr></table></figure><h1 id="2-git-提交、合并代码的操作"><a href="#2-git-提交、合并代码的操作" class="headerlink" title="2. git 提交、合并代码的操作"></a>2. git 提交、合并代码的操作</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#当开发任务完成或者修改完代码后，需进行代码提交和合并</span><br><span class="line">  </span><br><span class="line">#查看当前分支的状态 一般会显示修改了哪些文件</span><br><span class="line">git status         </span><br><span class="line"></span><br><span class="line">#将工作时的所有变化提交到暂存区 还有git add -u 该命令是只提交修改的文件，不包含新增的</span><br><span class="line">git add .     </span><br><span class="line"></span><br><span class="line">#将暂存区的文件，添加到本地仓库，xxx表示对本次提交的说明</span><br><span class="line">git commit -m <span class="string">&#x27;xxxxx &#x27;</span>    </span><br><span class="line"></span><br><span class="line">#将本地的更新 同步到远程仓库</span><br><span class="line">git push --set-upstream origin dev-test    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#请求合并代码</span><br><span class="line">切换，拉取，合并，推送</span><br><span class="line"></span><br><span class="line">#切换到dev分支</span><br><span class="line">git checkout dev     </span><br><span class="line"></span><br><span class="line">#拉取最新的 dev代码</span><br><span class="line">git pull            </span><br><span class="line"></span><br><span class="line">#合并dev-test分支上的代码</span><br><span class="line">git merge dev-test    </span><br><span class="line"></span><br><span class="line">#将本地dev代码上传到远程dev</span><br><span class="line">git push              </span><br><span class="line"></span><br><span class="line"># 之后需要将dev-test和dev分支上的同步</span><br><span class="line"></span><br><span class="line">#切换到dev-test</span><br><span class="line">git checkout dev-test     </span><br><span class="line"></span><br><span class="line">#合并dev 分支到本地dev-test</span><br><span class="line">git merge dev          </span><br><span class="line"></span><br><span class="line">#更新远程dev-test分支，至此，完成一次代码合并</span><br><span class="line">git push                     </span><br></pre></td></tr></table></figure><h1 id="3-git常用命令"><a href="#3-git常用命令" class="headerlink" title="3. git常用命令"></a>3. git常用命令</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin </span><br><span class="line">git remote remove origin</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line">git branch <span class="comment">//查看当前分支</span></span><br><span class="line">git branch dev <span class="comment">//新建dev分支</span></span><br><span class="line">git checkout dev <span class="comment">//切换到dev分支</span></span><br><span class="line">git-log</span><br><span class="line">git pull</span><br><span class="line">git merge dev-<span class="number">001</span> <span class="comment">//比如当前在dev分支，就可以把dev-001的分支合并到dev分支</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、排序与搜索</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="八、排序与搜索"><a href="#八、排序与搜索" class="headerlink" title="八、排序与搜索"></a>八、排序与搜索</h1><h2 id="8-1-大O表示法"><a href="#8-1-大O表示法" class="headerlink" title="8.1 大O表示法"></a>8.1 大O表示法</h2><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><ul><li><p>在计算机中采用<strong>粗略的度量</strong>来描述计算机的效率，这种方法被称为<strong>“大O表示法”</strong></p></li><li><p>在<strong>数据项个数发生改变</strong>时，算法的<strong>效率也会发生改变</strong>。所以说算法A比算法B快两倍，这样的比较是<strong>没有意义</strong>的</p></li><li><p>因此我们通常使用“<strong>算法的速度随着数据量的变化会如何变化</strong>”的方式来表示算法的效率，大O表示法就是方式之一</p></li></ul><h3 id="常见的大O表示形式"><a href="#常见的大O表示形式" class="headerlink" title="常见的大O表示形式"></a>常见的大O表示形式</h3><p>![$_DT011`F@PDZ<del>%E0XHBIMD.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657360362436-7247f66c-1e98-40b5-aba2-2cfc803dbb9b.png#clientId=ud835aa17-bf20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u2f4f2d6b&amp;margin=%5Bobject%20Object%5D&amp;name=%24_DT011%60F%40PDZ">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657360362436-7247f66c-1e98-40b5-aba2-2cfc803dbb9b.png#clientId=ud835aa17-bf20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u2f4f2d6b&amp;margin=%5Bobject%20Object%5D&amp;name=%24_DT011%60F%40PDZ</a></del>%25E0XHBIMD.png&amp;originHeight=313&amp;originWidth=727&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72475&amp;status=done&amp;style=none&amp;taskId=uc86dcb48-6f0c-4d63-ae80-9665e29f292&amp;title=)</p><h3 id="不同大O形式的时间复杂度"><a href="#不同大O形式的时间复杂度" class="headerlink" title="不同大O形式的时间复杂度"></a>不同大O形式的时间复杂度</h3><p>![1NW0[$S55W7{A<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657360439200-e4db0dce-6128-4fbe-9a91-ae0180902fb8.png#clientId=ud835aa17-bf20-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ub3239658&margin=%5Bobject%20Object%5D&name=1NW0%5B%24S55W7%7BA%5BA_15KJ1%7BQ.png&originHeight=439&originWidth=543&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42968&status=done&style=none&taskId=u8ec298cd-19fe-43b7-abf9-9cbf6cc0868&title=">A_15KJ1{Q.png</a></p><p>可以看到效率从大到小分别是：<code>O(1) &gt; O(logn) &gt; O(n) &gt; O(nlogn) &gt; O(n&lt;sup&gt;2&lt;/sup&gt;) &gt; O(2&lt;sup&gt;n&lt;/sup&gt;)</code></p><h3 id="推导大O表示法的三条规则"><a href="#推导大O表示法的三条规则" class="headerlink" title="推导大O表示法的三条规则"></a>推导大O表示法的三条规则</h3><ul><li><p>规则1：用<strong>常量1取代</strong>运行时间中所有的加法常量。如 7+8 = 15，用1表示运算结果15，大O表示法表示为<strong>O(1)</strong></p></li><li><p>规则2：运算中只保留最高阶项。如<strong>N<sup>3</sup> + 3n + 1 <strong>，大O表示法表示为</strong>O(N<sup>3</sup>)</strong></p></li><li><p>规则3：若最高阶项的常数不为一，可将其省略。如<strong>4N<sup>2</sup><strong>，大O表示法表示为</strong>O(N<sup>2</sup>)</strong></p></li></ul><h2 id="8-2-排序算法"><a href="#8-2-排序算法" class="headerlink" title="8.2 排序算法"></a>8.2 排序算法</h2><p>这里主要介绍几种简单排序和高级排序：</p><ul><li><p>简单排序：<strong>冒泡排序、选择排序、插入排序</strong></p></li><li><p>高级排序：<strong>希尔排序、快速排序</strong></p></li></ul><p>此处创建一个列表类ArrayList并添加一些属性和方法，用于存放这些排序方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.array = []</span><br><span class="line">  ArrayList.prototype.insert = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.array.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  ArrayList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.array.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ArrayList.prototype.swap = <span class="function">(<span class="params">m, n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">this</span>.array[m]</span><br><span class="line">    <span class="built_in">this</span>.array[m] = <span class="built_in">this</span>.array[n]</span><br><span class="line">    <span class="built_in">this</span>.array[n] = temp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序的思路：</p><ul><li><p>对<strong>未排序的各元素</strong>从头到尾依次比较相邻的两个元素大小关系；</p></li><li><p>如果左边的人员高，则将两人交换位置。比如1比2矮，不交换位置；</p></li><li><p>向右移动一位，继续比较2和3，最后比较 <strong>length - 1 和 length - 2</strong>这两个数据；</p></li><li><p>当到达<strong>最右端时，最高的人一定被放在了最右边</strong>；</p></li><li><p>按照这个思路，<strong>从最左端重新开始时</strong>，只需要走到倒数第二个位置即可；</p></li></ul><p>实现思路：</p><p>两层循环：</p><ul><li><p>外层循环控制冒泡趟数：</p><ul><li><p>第一次：<code>j = length - 1</code>，比较到倒数第一个位置</p></li><li><p>第二次：<code>j = length - 2</code>，比较到倒数第二个位置</p></li></ul></li><li><p>内层循环控制每趟比较的次数：</p><ul><li><p>第一次比较：<code>i = 0</code>，比较0和1位置的两个数据</p></li><li><p>最后一次比较：<code>i = length - 2</code>，比较length - 2和length - 1两个数据</p></li></ul></li></ul><p>![<code>&#123;C&#125;%TIXQ9Q</code>EP]JN_GPOPW.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657417519167-a37c722e-0e9d-41b7-8bf3-f9c798c9b699.jpeg#clientId=u13a57502-066a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u9a77ca6a&amp;margin=%5Bobject%20Object%5D&amp;name=%60%7BC%7D%25TIXQ9Q%60EP%5DJN_GPOPW.jpg&amp;originHeight=571&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78525&amp;status=done&amp;style=none&amp;taskId=udfcd78f1-813b-4508-b9b5-609167e35db&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657417519167-a37c722e-0e9d-41b7-8bf3-f9c798c9b699.jpeg#clientId=u13a57502-066a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u9a77ca6a&amp;margin=%5Bobject%20Object%5D&amp;name=%60%7BC%7D%25TIXQ9Q%60EP%5DJN_GPOPW.jpg&amp;originHeight=571&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78525&amp;status=done&amp;style=none&amp;taskId=udfcd78f1-813b-4508-b9b5-609167e35db&amp;title=</a>)</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ArrayList.prototype.bubblesort = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.array[i] &gt; <span class="built_in">this</span>.array[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="built_in">this</span>.swap(i, i + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> ArrayList()</span><br><span class="line">array.insert(<span class="number">2</span>)</span><br><span class="line">array.insert(<span class="number">99</span>)</span><br><span class="line">array.insert(<span class="number">25</span>)</span><br><span class="line">array.insert(<span class="number">4</span>)</span><br><span class="line">array.insert(<span class="number">18</span>)</span><br><span class="line">array.insert(<span class="number">6</span>)</span><br><span class="line">array.insert(<span class="number">17</span>)    </span><br><span class="line">array.bubblesort()</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657416875588-168de78e-2363-460b-9d50-d22f9870557d.png#clientId=u13a57502-066a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=72&id=u682f8a48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=90&originWidth=455&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7303&status=done&style=none&taskId=u40cb13b6-9cc1-4520-b6e7-ed3838a2ca1&title=&width=362.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657416896992-52ae46b9-56c3-4dec-b8c2-69b64e566bb3.png#clientId=u13a57502-066a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=70&id=u48308f52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=83&originWidth=453&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7205&status=done&style=none&taskId=u0f0be3e4-34a6-4acd-99a6-255a34badda&title=&width=379.5" alt="image.png"></p><p>冒泡排序的效率：</p><ul><li><p>上面所讲的对于7个数据项，比较次数为： <code> 6 + 5  + 4 + 3 + 2 + 1</code></p></li><li><p>对于N个数据项，比较次数为：<code>(N - 1) + (N - 2) + (N - 3) + ... + 1 = N *_ (N - 1)  / _2</code>;如果两次比较交换一次，那么交换次数为：<code> N *(N-1) / 4</code></p></li><li><p>使用大O表示法表示比较次数和交换次数分别为：<code> O（N*(N-1)/2）</code>和<code> O(N*(N-1)/4)</code>，根据大O表示法的三条规则都化简为：<code> O(N^2)</code></p></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序改进了冒泡排序：</p><ul><li><p>将<strong>交换次数</strong>由<strong>O（N^2）</strong>减小到<strong>O(N)</strong></p></li><li><p>但是<strong>比较次数</strong>依然为<strong>O(N^2)</strong></p></li></ul><p>选择排序的思路：</p><ul><li><p><strong>选定第一个索引的位置比如1，然后依次和后面的元素进行比较</strong></p></li><li><p>如果后面的元素，<strong>小于索</strong>引1位置的元素，则交换位置<strong>到索引1</strong>处</p></li><li><p>经过1轮的比较之后，可以确定一开始指定的索引<strong>1位置的元素是最小</strong>的</p></li><li><p>随后使用同样的方法除索引1以外，逐个比较剩下的元素即可</p></li><li><p>可以看出选择排序，<strong>第一轮会选出最小值，第二轮会选出第二小的值，直到完成排序</strong></p></li></ul><p>实现思路：</p><p>两侧循环：</p><ul><li><p>外层循环指定的索引：</p><ul><li><p>第一次：j=0，指定第一个元素</p></li><li><p>最后一次：j=length - 1，指定最后一个元素</p></li></ul></li></ul><ul><li>内层循环负责将指定索引（i）的元素与剩下（i-1）的元素进行比较</li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ArrayList.prototype.selectSort = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = j</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = min + <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.array[min] &gt; <span class="built_in">this</span>.array[i]) &#123;</span><br><span class="line">        min = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.swap(min, j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> ArrayList()</span><br><span class="line">array.insert(<span class="number">2</span>)</span><br><span class="line">array.insert(<span class="number">99</span>)</span><br><span class="line">array.insert(<span class="number">25</span>)</span><br><span class="line">array.insert(<span class="number">4</span>)</span><br><span class="line">array.insert(<span class="number">18</span>)</span><br><span class="line">array.insert(<span class="number">6</span>)</span><br><span class="line">array.insert(<span class="number">17</span>)</span><br><span class="line">array.selectSort()</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657419746753-4bbc61fb-b276-4538-bb87-537e6ccd38af.png#clientId=u4de28c0b-976f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=85&id=ue05c184f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=88&originWidth=460&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7295&status=done&style=none&taskId=u953e69b2-1eb6-4c1f-8428-73e5c09fb4a&title=&width=444" alt="image.png"></p><p>选择排序的效率：</p><ul><li><p>选择排序的<strong>比较次数</strong>为：<em><em>N</em>(N-1)/2</em><em>，用大O表示法表示为：*<em>O(N^2)</em></em></p></li><li><p>选择排序的<strong>交换次数</strong>为：<strong>（N-1）/2</strong>，用大O表示法表示为：<strong>O(N)</strong></p></li><li><p>所以<strong>选择排序的效率高于冒泡排序</strong></p></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序是简单排序中<strong>效率最高</strong>的的一种排序</p><p>插入排序的思路：</p><ul><li>插入排序思想的核心是<strong>局部有序</strong>。如图所示，X左边的人称为<strong>局部有序</strong></li><li>首先指定一数据X（从第一个数据开始），并将数据X的左边变成局部有序状态</li><li>随后将X右移一位，再次达到局部有序之后，继续右移一位，重复前面的操作直至X移至最后一个元素</li></ul><p>![`16OVL@S]S)YJBYV)B6CSV6.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657444028900-5c706e0b-d7cb-49a1-a9a7-ac8d67ee119f.jpeg#clientId=u4de28c0b-976f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u0b1244e4&amp;margin=%5Bobject%20Object%5D&amp;name=%6016OVL%40S%5DS%29YJBYV%29B6CSV6.jpg&amp;originHeight=512&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29737&amp;status=done&amp;style=none&amp;taskId=ueec29818-4268-4ab3-96c6-dbcac65a6a6&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657444028900-5c706e0b-d7cb-49a1-a9a7-ac8d67ee119f.jpeg#clientId=u4de28c0b-976f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u0b1244e4&amp;margin=%5Bobject%20Object%5D&amp;name=%6016OVL%40S%5DS%29YJBYV%29B6CSV6.jpg&amp;originHeight=512&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29737&amp;status=done&amp;style=none&amp;taskId=ueec29818-4268-4ab3-96c6-dbcac65a6a6&amp;title=</a>)</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ArrayList.prototype.insertionSort = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">this</span>.array[i]</span><br><span class="line">    <span class="keyword">let</span> j = i</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">this</span>.array[j-<span class="number">1</span>] &gt; temp &amp;&amp; j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - <span class="number">1</span>]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.array[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> ArrayList()</span><br><span class="line">array.insert(<span class="number">2</span>)</span><br><span class="line">array.insert(<span class="number">99</span>)</span><br><span class="line">array.insert(<span class="number">25</span>)</span><br><span class="line">array.insert(<span class="number">4</span>)</span><br><span class="line">array.insert(<span class="number">18</span>)</span><br><span class="line">array.insert(<span class="number">6</span>)</span><br><span class="line">array.insert(<span class="number">17</span>)</span><br><span class="line">array.insertionSort()</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657444295992-44428ff0-6c51-4fb7-b634-616173d644b2.png#clientId=u4de28c0b-976f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=99&id=u09329cdf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=87&originWidth=459&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7298&status=done&style=none&taskId=ud38d896a-987a-47ae-af3e-304730f4b53&title=&width=522.5" alt="image.png"></p><p>插入排序的效率：</p><ul><li><p><strong>比较次数</strong>：第一趟时，需要的最大次数为1，第二次最大为2，以此类推，最后一趟最大为N-1，所以，插入排序的总比较次数为N*(N-1)/2，但是，实际上每趟发现插入点之前，平均只有一半需要比较，所以比较次数为：<em><em>N</em>(N-1)/4</em>*</p></li><li><p><strong>交换次数</strong>：指定第一个数据为X时交换0次，指定第二个数据为X最多需要交换1次，以此类推，指定第N个数据为X时最多需要交换N-1次，所以一共需要交换<em><em>N</em>(N-1)/2次</em>*</p></li><li><p>虽然用大O表示法表示插入排序的效率也是O(N^2)，但是插入排序整体操作次数更少，因此，<strong>在简单排序中，插入效率最高</strong></p></li></ul><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是插入排序的一种高效的改进版，效率比插入排序要高。</p><p>希尔排序的历史背景：</p><ul><li><p>希尔排序按其设计者希尔（Donald Shell）的名字命名，该算法由1959年公布；</p></li><li><p>希尔算法首次突破了计算机界一直认为的算法的时间复杂度都是<strong>O（N^2）</strong>的大关，为了纪念该算法里程碑式的意义，用Shell来命名该算法； </p></li></ul><p>插入排序的问题：   </p><ul><li><p>假设一个很小的数据项在很靠近右端的位置上，这里本应该是较大的数据项的位置；</p></li><li><p>将这个小数据项移动到左边的正确位置，所有的中间数据项都必须向右移动一位，这样效率非常低；</p></li><li><p>如果通过某种方式，不需要一个个移动所有中间的数据项，就能把较小的数据项移到左边，那么这个算法的执行速度就会有很大的改进。</p></li></ul><p>希尔排序的实现思路：</p><ul><li><p>希尔排序主要通过<strong>对数据进行分组实现快速排序</strong>；</p></li><li><p>根据设定的<strong>增量（gap）将数据分为gap个组（组数等于gap），再在每个分组中进行局部排序；</strong></p></li></ul><blockquote><p>假如有数组有10个数据，第1个数据为黑色，增量为5。那么第二个为黑色的数据index=5，第3个数据为黑色的数据index = 10（不存在）。所以黑色的数据每组只有2个，10 / 2 = 5一共可分5组，即组数等于增量gap。</p></blockquote><ul><li>排序之后<strong>，减小增量，继续分组，再次进行局部排序，直到增量gap=1为止。随后只需进行微调就可完成数组的排序</strong></li></ul><p>增量的选择：</p><ul><li><p><strong>原稿中</strong>希尔建议的初始间距为<strong>N / 2，比如对于N = 100的数组，增量序列为：50，25，12，6，3，1，</strong>可以发现不能整除时向下取整。</p></li><li><p>Hibbard增量序列：增量序列算法为：2^k - 1，即1，3，5，7… …等；这种情况的最坏复杂度为O（N3/2）**,平均复杂度为**O（N5/4）但未被证明；<br>Sedgewcik增量序列：</p></li></ul><p>以下代码实现中采用希尔排序原稿中建议的增量即N / 2 。</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ArrayList.prototype.shellSort = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>)</span><br><span class="line">  <span class="comment">//第一层循环：while循环（使gap不断减小(eg:100的话，则50，25，12，6，3，1)）</span></span><br><span class="line">  <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//第二层循环，以gap为增量，进行分组，对分组进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="built_in">this</span>.array[i]</span><br><span class="line">      <span class="keyword">let</span> j = i</span><br><span class="line">      <span class="comment">//第三层循环，寻找正确的插入位置</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">this</span>.array[j - gap] &gt; temp &amp;&amp; j &gt; gap - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - gap]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.array[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap/<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> ArrayList()</span><br><span class="line">array.insert(<span class="number">2</span>)</span><br><span class="line">array.insert(<span class="number">99</span>)</span><br><span class="line">array.insert(<span class="number">25</span>)</span><br><span class="line">array.insert(<span class="number">4</span>)</span><br><span class="line">array.insert(<span class="number">18</span>)</span><br><span class="line">array.insert(<span class="number">6</span>)</span><br><span class="line">array.insert(<span class="number">17</span>)</span><br><span class="line">array.shellSort()</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657452163935-7eeb6d10-da75-45d9-972c-cae81742cf04.png#clientId=u4de28c0b-976f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=40&id=u18ed6b22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7127&status=done&style=none&taskId=u567feeac-7ded-4206-8f75-8ff2899f9a9&title=&width=235" alt="image.png"></p><p>希尔排序的效率：</p><p>希尔排序的效率和增量有直接关系，即使使用原稿中的增量效率都高于简单排序</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的介绍：</p><ul><li><p>快速排序可以说是目前所有算法中，<strong>最快的一种算法</strong>，当然，没有任何一种算法是在任意情况下都是最优的，但是，大多数情况下，快速排序是比较好的选择</p></li><li><p>快速排序其实是冒泡排序的升级版</p></li></ul><p>快速排序的核心思想是<strong>分而治之，先选出一个数据（比如65），</strong>将比起<strong>小的数据都放在他的左边，将比他大的数据都放在他的右边</strong>，这个数据称为枢纽</p><p>快速排序的枢纽：</p><ul><li><p><strong>第一种方案</strong>：直接选择<strong>第一个元素作为枢纽</strong>，但是，当第一个元素就是最小值的情况下，<strong>效率不高</strong></p></li><li><p>第二种方案：使用<strong>随机数</strong>，随机数本身十分消耗性能，<strong>不推荐</strong></p></li><li><p>优秀的解决方法：取<strong>index为头，中，尾的三个排序后的中位数</strong>；按下标值取出的三个数据为：92，31，0，经排序后变为：0，31，92，取其中的中位数31作为枢纽（当（length-1）/2不为整时可向上或向下取值）</p></li></ul><p>实现枢纽选择：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> swap = <span class="function"><span class="keyword">function</span> (<span class="params">arr, m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[m]</span><br><span class="line">  arr[m] = arr[n]</span><br><span class="line">  arr[n] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> median = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> center = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> right = arr.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (arr[left] &gt; arr[center]) &#123;</span><br><span class="line">    swap(arr, left, center)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[center] &gt; arr[right]) &#123;</span><br><span class="line">    swap(arr, center, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[left] &gt; arr[right]) &#123;</span><br><span class="line">    swap(arr, left, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> quickSort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">  <span class="keyword">let</span> center = median(arr)</span><br><span class="line">  <span class="keyword">let</span> c = arr.splice(center, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> l = []</span><br><span class="line">  <span class="keyword">let</span> r = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; c) &#123;</span><br><span class="line">      l.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      r.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(l).concat(c, quickSort(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">21</span>,<span class="number">4</span>,<span class="number">18</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">99</span>]</span><br><span class="line"><span class="keyword">let</span> arrNew = quickSort(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arrNew)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657503869260-6fc7d0f7-0a30-4e2d-bc8c-8bb5959df7ed.png#clientId=u75e10f19-1a5b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=60&id=u50586c24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=45&originWidth=370&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2373&status=done&style=none&taskId=u5e759120-5218-480b-b8d7-f3a0f8e8870&title=&width=493" alt="image.png"></p><p>快速排序的效率：</p><ul><li><p><strong>快速排序最坏情况下的效率</strong>：每次选择的枢纽都是最左边或最右边的数据，此时效率等同于冒泡排序，时间复杂度为**O(N^2)**。可根据不同的枢纽选择避免这一情况。</p></li><li><p>快速排序的<strong>平均效率</strong>：为<strong>O(N*logN)<strong>，虽然其他算法效率也可达到O(N*logN)，但是其中</strong>快速排序是最好的</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、图结构</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="七、图结构"><a href="#七、图结构" class="headerlink" title="七、图结构"></a>七、图结构</h1><h2 id="7-1-图的简介"><a href="#7-1-图的简介" class="headerlink" title="7.1 图的简介"></a>7.1 图的简介</h2><h3 id="图是什么？"><a href="#图是什么？" class="headerlink" title="图是什么？"></a>图是什么？</h3><ul><li><p><strong>图结构</strong>是一种与<strong>树结构</strong>有些<strong>相似</strong>的数据结构</p></li><li><p><strong>图论</strong>是数学的一个<strong>分支</strong>，并且在数学中，<strong>树是图</strong>的一种</p></li><li><p>图论以<strong>图为研究对象</strong>，研究<strong>顶点和边</strong>组成的<strong>图形</strong>的数学<strong>理论和方法</strong></p></li><li><p>主要的研究目的为：<strong>事物之间的联</strong>系，顶点代表<strong>事物</strong>，边代表<strong>两个事物间的关系</strong></p></li></ul><h3 id="图的特点"><a href="#图的特点" class="headerlink" title="图的特点"></a>图的特点</h3><ul><li><p>一组<strong>顶点</strong>：通常用<strong>V（Vertex）表示顶点</strong>的集合</p></li><li><p>一组<strong>边</strong>：通常用<strong>E（Edge）表示边</strong>的集合</p><ul><li><p><strong>边是顶点和顶点</strong>之间的连线</p></li><li><p>边可以是<strong>有向</strong>的，也可以是<strong>无向</strong>的。比如 <strong>A—B 表示无向</strong>， <strong>A—&gt; B 表示有向</strong></p></li></ul></li></ul><h3 id="图的常用术语"><a href="#图的常用术语" class="headerlink" title="图的常用术语"></a>图的常用术语</h3><ul><li><p>顶点：表示图中的<strong>一个节点</strong>；</p></li><li><p>边：表示<strong>顶点和顶点</strong>之间的连线；</p></li><li><p>相邻顶点：由<strong>一条边连接在一起</strong>的顶点称为<strong>相邻顶点</strong>；</p></li><li><p>度：一个顶点的度是<strong>相邻顶点的数量</strong>；</p></li><li><p>路径：</p><ul><li><p><strong>简单路径</strong>：简单路径要求<strong>不包含重复</strong>的顶点；</p></li><li><p><strong>回路</strong>：<strong>第一个顶点和最后一个顶点相同</strong>的路径称为回路；</p></li></ul></li><li><p>无向图：图中的所有<strong>边都是没有方向</strong>的；</p></li><li><p>有向图：图中的所有<strong>边都是有方向</strong>的；</p></li><li><p>无权图：<strong>无权图</strong>中的边<strong>没有任何权重意义</strong>；</p></li><li><p>带权图：<strong>带权图</strong>中的边<strong>有一定的权重含义；</strong></p></li></ul><h2 id="7-2-图的表示"><a href="#7-2-图的表示" class="headerlink" title="7.2 图的表示"></a>7.2 图的表示</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>表示图的常用方式为：<strong>邻接矩阵</strong>。</p><ul><li><p>可以使用<strong>二维数组</strong>来表示邻接矩阵；</p></li><li><p>邻接矩阵让<strong>每个节点和一个整数</strong>相关联，该<strong>整数作为数组的下标</strong>值；</p></li><li><p>使用一个<strong>二维数组</strong>来表示<strong>顶点之间的连接</strong>；</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657245205836-8c352c68-a6d0-4c80-9a4d-544396aa4f97.jpeg#clientId=uc8b0f51c-0f19-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uafa1b564&margin=%5Bobject%20Object%5D&name=C%7B%407N35Q7%28OYKA_JGA0%28Y%28O.jpg&originHeight=517&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40596&status=done&style=none&taskId=u0cacc789-6b90-4194-901e-27b1de6db6b&title=" alt="C{@7N35Q7(OYKA_JGA0(Y(O.jpg"></p><p>如上图所示：</p><ul><li><p>二维数组中的<strong>0表示没有连线</strong>，<strong>1表示有连线</strong>；</p></li><li><p>如：<strong>A[ 0 ] [ 3 ] = 1</strong>，表示 A 和 C 之间有<strong>连接</strong>；</p></li><li><p>邻接矩阵的<strong>对角线上的值都为0</strong>，表示<strong>A - A ，B - B，等自回路</strong>都<strong>没有连接</strong>（自己与自己之间没有连接）；</p></li><li><p>若为<strong>无向图</strong>，则<strong>邻接矩阵应为对角线上元素全为0的对称矩阵</strong>；</p></li></ul><h3 id="邻接矩阵的问题"><a href="#邻接矩阵的问题" class="headerlink" title="邻接矩阵的问题"></a>邻接矩阵的问题</h3><p> 如果图是一个<strong>稀疏图</strong>，那么邻接矩阵中将<strong>存在大量的 0</strong>，造成**存储空间的浪费 **   </p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>另外一种表示图的常用方式为：<strong>邻接表</strong>。</p><ul><li><p>邻接表由图中<strong>每个顶点以及和顶点相邻的顶点列表</strong>组成；</p></li><li><p>这个列表可用<strong>多种方式存储</strong>，比如：<strong>数组/链表/字典（哈希表）</strong>等都可以；</p></li></ul><p>![AMM$}5Y5H(`J5JP4EHG}V]Y.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657245697595-dd1def79-5f3d-491d-ab4e-4636424b3b2b.jpeg#clientId=uc8b0f51c-0f19-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=333&amp;id=u7ef3d967&amp;margin=%5Bobject%20Object%5D&amp;name=AMM%24%7D5Y5H%28%60J5JP4EHG%7DV%5DY.jpg&amp;originHeight=632&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40721&amp;status=done&amp;style=none&amp;taskId=u300123d3-932d-408e-a18d-c81e420def0&amp;title=&amp;width=540">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657245697595-dd1def79-5f3d-491d-ab4e-4636424b3b2b.jpeg#clientId=uc8b0f51c-0f19-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=333&amp;id=u7ef3d967&amp;margin=%5Bobject%20Object%5D&amp;name=AMM%24%7D5Y5H%28%60J5JP4EHG%7DV%5DY.jpg&amp;originHeight=632&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40721&amp;status=done&amp;style=none&amp;taskId=u300123d3-932d-408e-a18d-c81e420def0&amp;title=&amp;width=540</a>)</p><p>如上图所示：</p><ul><li><p>图中可清楚看到<strong>A与B、C、D相邻</strong>，假如要表示这些与A顶点相邻的顶点（边），可以通过将<strong>它们作为A的值（value）存入到对应的数组/链表/字典中。</strong></p></li><li><p>之后，通过<strong>键（key）A</strong>可以十分方便地取出对应的数据；</p></li></ul><h3 id="邻接表的问题"><a href="#邻接表的问题" class="headerlink" title="邻接表的问题"></a>邻接表的问题</h3><ul><li><p>邻接表可以简单地得<strong>出度</strong>，即某一顶点指向其他顶点的个数；</p></li><li><p>但是，邻接表计算<strong>入度</strong>（指向某一顶点的其他顶点的个数称为该顶点的入度）十分困难。此时需要构造<strong>逆邻接表</strong>才能有效计算入度；</p></li></ul><h2 id="7-3-封装图结构"><a href="#7-3-封装图结构" class="headerlink" title="7.3 封装图结构"></a>7.3 封装图结构</h2><p>在实现过程中采用<strong>邻接表</strong>的方式来表示边，使用<strong>字典类</strong>来存储邻接表</p><h3 id="添加字典类和队列类"><a href="#添加字典类和队列类" class="headerlink" title="添加字典类和队列类"></a>添加字典类和队列类</h3><p>首先需要引入之前实现的，之后会用到的字典类和队列类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装字典类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//字典属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//字典操作方法</span></span><br><span class="line">  <span class="comment">//一.在字典中添加键值对</span></span><br><span class="line">  Dictionary.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.items[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//二.判断字典中是否有某个key</span></span><br><span class="line">  Dictionary.prototype.has = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//三.从字典中移除元素</span></span><br><span class="line">  Dictionary.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.判断字典中是否有这个key</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(key)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.从字典中删除key</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四.根据key获取value</span></span><br><span class="line">  Dictionary.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.has(key) ? <span class="built_in">this</span>.items[key] : <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//五.获取所有keys</span></span><br><span class="line">  Dictionary.prototype.keys = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//六.size方法</span></span><br><span class="line">  Dictionary.prototype.keys = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.keys().length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//七.clear方法</span></span><br><span class="line">  Dictionary.prototype.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装队列类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = []</span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="comment">//1.enqueue</span></span><br><span class="line">  Queue.prototype.enqueue = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.dequeue</span></span><br><span class="line">  Queue.prototype.dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.front</span></span><br><span class="line">  Queue.prototype.front = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.isEmpty</span></span><br><span class="line">  Queue.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5.size</span></span><br><span class="line">  Queue.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6.toString</span></span><br><span class="line">  Queue.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建图类"><a href="#创建图类" class="headerlink" title="创建图类"></a>创建图类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//属性：顶点（数组）/边（字典）</span></span><br><span class="line">  <span class="built_in">this</span>.vertexes = []<span class="comment">//顶点</span></span><br><span class="line">  <span class="built_in">this</span>.edges = <span class="keyword">new</span> Dictionary()<span class="comment">//边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加顶点与边"><a href="#添加顶点与边" class="headerlink" title="添加顶点与边"></a>添加顶点与边</h3><p>创建一个<strong>数组对象vertexes存储图的顶点</strong>；创建一个<strong>字典对象edges存储图的边</strong>，其中<strong>key为顶点</strong>，<strong>value为存储key顶点相邻顶点的数组</strong>。</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Graph.prototype.addVertex = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.vertexes.push(v)</span><br><span class="line">  <span class="built_in">this</span>.edges.set(v, [])</span><br><span class="line">&#125;</span><br><span class="line">Graph.prototype.addEdge = (v1,v2)&#123;</span><br><span class="line">  <span class="built_in">this</span>.edges.get(v1).push(v2)</span><br><span class="line">  <span class="built_in">this</span>.edges.get(v2).push(v1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> graph = <span class="keyword">new</span> Graph()</span><br><span class="line"><span class="keyword">let</span> myVertexes = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertexes.length; i++) &#123;</span><br><span class="line">  graph.addVertex(myVertexes[i])</span><br><span class="line">&#125;</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(graph)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657247237699-f05993cd-dff4-4269-86f7-3a70e261e41a.png#clientId=uc8b0f51c-0f19-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=205&id=ub1bc864a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=410&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31376&status=done&style=none&taskId=ud4a1859d-51ce-4353-b67b-fb4138ce758&title=&width=370" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657247318888-f266db7a-e8d9-4365-bc13-96447e145627.jpeg#clientId=uc8b0f51c-0f19-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ud12c64b7&margin=%5Bobject%20Object%5D&name=%7DA0G3MSGZVU0HVN%2560825F4.jpg&originHeight=790&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42517&status=done&style=none&taskId=uf63df957-6b16-4464-a7dc-9b9ae5884a3&title=" alt="}A0G3MSGZVU0HVN%60825F4.jpg"></p><h3 id="转换为字符串输出"><a href="#转换为字符串输出" class="headerlink" title="转换为字符串输出"></a>转换为字符串输出</h3><p> 为图类Graph添加<strong>toString方法，实现以邻接表的形式输出图中各顶点。</strong></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Graph.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">    resultString += <span class="built_in">this</span>.vertexes[i] + <span class="string">&#x27; ---&gt; &#x27;</span></span><br><span class="line">    <span class="keyword">let</span> vEdge = <span class="built_in">this</span>.edges.get(<span class="built_in">this</span>.vertexes[i])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; vEdge.length; j++) &#123;</span><br><span class="line">      resultString += vEdge[j] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resultString += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(graph.toString())</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657247685443-69575f1d-e752-483e-b8a4-7902ea87aa24.png#clientId=ua8b1b9d2-e898-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=307&id=u345154f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=210&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4587&status=done&style=none&taskId=u310074bb-620d-4e81-8ca5-cb4d34283e3&title=&width=296" alt="image.png"></p><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><ul><li><p>图的遍历思想：</p><ul><li>图的遍历思想与树的遍历思想一样，意味着需要<strong>将图中所有的顶点都访问一遍，并且不能有重复的访问</strong></li></ul></li><li><p>遍历图的两种算法</p><ul><li><strong>广度优先搜索（Breach - First Serch，BFS）</strong></li></ul></li></ul><ul><li><p><strong>深度优先搜索（Depth - First Serch ，DFS）</strong></p></li><li><p>两种遍历算法都需要<strong>指定第一个被访问的的顶点</strong></p></li><li><p>为了记录顶点是否被访问过，使用三种颜色来表示他们的状态</p><ul><li><p>白色：表示该顶点还<strong>没有被</strong>访问过</p></li><li><p>灰色：表示该顶点<strong>被</strong>访问过，但其<strong>相邻</strong>顶点<strong>并未完全被</strong>访问过</p></li><li><p>黑色：表示该顶点<strong>被访问</strong>过，且其相邻顶点都<strong>被访问</strong>过</p></li></ul></li></ul><p>首先封装<code>initializeColor</code>方法，将图中所有顶点初始化为白色，代码实现如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Graph.prototype.initializeColor = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> colors = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">    colors[<span class="built_in">this</span>.vertexes[i]] = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colors</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><blockquote><ul><li><p>广度优先搜索算法会从指定的<strong>第一个顶点开始遍历图</strong>，先<strong>访问其所有的相邻顶点</strong>，就像一次访问图的一层  </p></li><li><p>也可以说是<strong>先宽后深</strong>的遍历图中的各个顶点</p></li></ul></blockquote><p>![5MHP8)Z$GPW1IF`B0TG4XYW.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657249670995-30324ad7-0b15-488b-ac1d-fdf331be87d8.jpeg#clientId=ua8b1b9d2-e898-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uf035b496&amp;margin=%5Bobject%20Object%5D&amp;name=5MHP8%29Z%24GPW1IF%60B0TG4XYW.jpg&amp;originHeight=687&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48469&amp;status=done&amp;style=none&amp;taskId=u77ca0b46-99a1-4fe0-8144-db7da85ab44&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657249670995-30324ad7-0b15-488b-ac1d-fdf331be87d8.jpeg#clientId=ua8b1b9d2-e898-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uf035b496&amp;margin=%5Bobject%20Object%5D&amp;name=5MHP8%29Z%24GPW1IF%60B0TG4XYW.jpg&amp;originHeight=687&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48469&amp;status=done&amp;style=none&amp;taskId=u77ca0b46-99a1-4fe0-8144-db7da85ab44&amp;title=</a>)</p><p>实现思路：</p><p>基于队列可以简单地实现广度优先搜索算法：</p><ul><li><p>首先创建一个<strong>队列Q（尾部进，首部出）</strong>；</p></li><li><p>调用封装的<code>initializeColor</code>方法将所有<strong>顶点初始化为白色</strong>；</p></li><li><p>指定<strong>第一个顶点A</strong>，将A标注为<strong>灰色</strong>（被访问过的节点），并将A放入队列Q中；</p></li><li><p>循环遍历队列中的元素，只要队列Q非空，就执行以下操作：</p><ul><li><p>先将<strong>灰色的A从Q的首部取</strong>出；</p></li><li><p>取出A后，将<strong>A的所有未被访问过（白色）的相邻顶点</strong>依次从队列<strong>Q的尾部加入队列，并变为灰色</strong>。以此保证，灰色的相邻顶点不重复加入队列；</p></li><li><p>A的<strong>全部相邻</strong>节点加入Q后，<strong>A变为黑色</strong>，在下一次循环中被<strong>移除Q外；</strong></p></li></ul></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Graph.prototype.bfs = <span class="function">(<span class="params">initV, handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> colors = <span class="built_in">this</span>.initializeColor()</span><br><span class="line">  <span class="keyword">let</span> que = <span class="keyword">new</span> Queue()</span><br><span class="line">  que.enqueue(initV)</span><br><span class="line">  <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">let</span> v = que.dequeue()</span><br><span class="line">    <span class="keyword">let</span> vNeighbours = <span class="built_in">this</span>.edges.get(v)</span><br><span class="line">    colors[v] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vNeighbours.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = vNeighbours[i]</span><br><span class="line">      <span class="keyword">if</span>(colors[a] == <span class="string">&#x27;white&#x27;</span>)&#123;</span><br><span class="line">        colors[a] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">        que.enqueue(a)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handler(v)</span><br><span class="line">    colors[v] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.测试bfs遍历方法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">graph.bfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot;-&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>测试结果:</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657250087563-425765f0-bcd9-4e20-9359-7b2de57fa425.png#clientId=ua8b1b9d2-e898-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=316&id=ua76fad42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=260&originWidth=255&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6328&status=done&style=none&taskId=ub8811968-849a-4282-b2ea-56c993574e8&title=&width=309.5" alt="image.png"></p><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><blockquote><ul><li><p>深度优先搜索算法会从指定的<strong>第一个顶点开始遍历图</strong>，沿着<strong>路经直到这条路径的最后一个顶点被访问了</strong></p></li><li><p>接着<strong>原路回退</strong>，并<strong>探索下一条路径</strong></p></li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657250367405-5bf93827-056a-4c66-b6b9-a59182afb9c3.jpeg#clientId=ua8b1b9d2-e898-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ub120d94c&margin=%5Bobject%20Object%5D&name=NX%25HQ~LWDK~H%40GPYL47%2538V.jpg&originHeight=771&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46584&status=done&style=none&taskId=u7e150b86-9341-44b8-b887-02cff816086&title=" alt="NX%HQ~LWDK~H@GPYL47%38V.jpg"></p><p>实现思路：</p><ul><li><p>可以使用<strong>栈结构来实现</strong>深度优先搜索算法；</p></li><li><p>深度优先搜索算法的遍历顺序与二叉搜索树中的先序遍历较为相似，同样可以<strong>使用递归来实现</strong>（递归的本质就是函数栈的调用）。</p></li><li><p>基于递归实现深度优先搜索算法：定义<strong>dfs方法</strong>用于调用递归<strong>方法dfsVisit</strong>，定义<strong>dfsVisit方法</strong>用于<strong>递归访问图中的各个顶点</strong>。</p></li><li><p>在<strong>dfs方法</strong>中：</p><ul><li><p>首先，调用<strong>initializeColor方法将所有顶点初始化为白色</strong>；</p></li><li><p>然后，调用<strong>dfsVisit方法遍历图的顶点</strong>；</p></li></ul></li><li><p>在<strong>dfsVisit方法</strong>中：</p><ul><li>首先，将传入的指定节点**v标注为灰色；</li></ul></li></ul><p>**</p><ul><li><p>接着，<strong>处理顶点V</strong>；</p></li><li><p>然后，访问<strong>V的相邻顶点</strong>；</p></li><li><p>最后，将顶点<strong>V标注为黑色</strong>；</p></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Graph.prototype.bfs = <span class="function">(<span class="params">initV, handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> colors = <span class="built_in">this</span>.initializeColor()</span><br><span class="line">  <span class="keyword">let</span> que = <span class="keyword">new</span> Queue()</span><br><span class="line">  que.enqueue(initV)</span><br><span class="line">  <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">let</span> v = que.dequeue()</span><br><span class="line">    <span class="keyword">let</span> vNeighbours = <span class="built_in">this</span>.edges.get(v)</span><br><span class="line">    colors[v] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vNeighbours.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = vNeighbours[i]</span><br><span class="line">      <span class="keyword">if</span>(colors[a] == <span class="string">&#x27;white&#x27;</span>)&#123;</span><br><span class="line">        colors[a] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">        que.enqueue(a)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handler(v)</span><br><span class="line">    colors[v] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.测试bfs遍历方法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">graph.dfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot;-&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>测试结果:</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657251232066-6b3ed0ca-e7d6-4d0c-a1c8-f3494743734c.png#clientId=ua8b1b9d2-e898-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=300&id=u407d0601&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12974&status=done&style=none&taskId=ud5d5182c-dba7-4cdd-a1b1-d9581fab660&title=&width=510" alt="image.png"></p><h3 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性：顶点（数组）/边（字典）</span></span><br><span class="line">  <span class="built_in">this</span>.vertexes = []<span class="comment">//顶点</span></span><br><span class="line">  <span class="built_in">this</span>.edges = <span class="keyword">new</span> Dictionary()<span class="comment">//边</span></span><br><span class="line"></span><br><span class="line">  Graph.prototype.addVertex = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.vertexes.push(v)</span><br><span class="line">    <span class="built_in">this</span>.edges.set(v, [])</span><br><span class="line">  &#125;</span><br><span class="line">  Graph.prototype.addEdge = <span class="function">(<span class="params">v1, v2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.edges.get(v1).push(v2)</span><br><span class="line">    <span class="built_in">this</span>.edges.get(v2).push(v1)</span><br><span class="line">  &#125;</span><br><span class="line">  Graph.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">      resultString += <span class="built_in">this</span>.vertexes[i] + <span class="string">&#x27; ---&gt; &#x27;</span></span><br><span class="line">      <span class="keyword">let</span> vEdge = <span class="built_in">this</span>.edges.get(<span class="built_in">this</span>.vertexes[i])</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; vEdge.length; j++) &#123;</span><br><span class="line">        resultString += vEdge[j] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      resultString += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">  Graph.prototype.initializeColor = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> colors = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">      colors[<span class="built_in">this</span>.vertexes[i]] = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> colors</span><br><span class="line">  &#125;</span><br><span class="line">  Graph.prototype.bfs = <span class="function">(<span class="params">initV, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> colors = <span class="built_in">this</span>.initializeColor()</span><br><span class="line">    <span class="keyword">let</span> que = <span class="keyword">new</span> Queue()</span><br><span class="line">    que.enqueue(initV)</span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">let</span> v = que.dequeue()</span><br><span class="line">      <span class="keyword">let</span> vNeighbours = <span class="built_in">this</span>.edges.get(v)</span><br><span class="line">      colors[v] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vNeighbours.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = vNeighbours[i]</span><br><span class="line">        <span class="keyword">if</span> (colors[a] == <span class="string">&#x27;white&#x27;</span>) &#123;</span><br><span class="line">          colors[a] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">          que.enqueue(a)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      handler(v)</span><br><span class="line">      colors[v] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Graph.prototype.dfs = <span class="function">(<span class="params">initV, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> colors = <span class="built_in">this</span>.initializeColor()</span><br><span class="line">    <span class="built_in">this</span>.dfsVisit(initV, colors, handler)</span><br><span class="line">  &#125;</span><br><span class="line">  Graph.prototype.dfsVisit = <span class="function">(<span class="params">v, colors, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    colors[v] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">    handler(v)</span><br><span class="line">    <span class="keyword">let</span> vNeighbours = <span class="built_in">this</span>.edges.get(v)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vNeighbours.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> a = vNeighbours[i]</span><br><span class="line">      <span class="keyword">if</span> (colors[a] == <span class="string">&#x27;white&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.dfsVisit(a, colors, handler)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    colors[v] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> graph = <span class="keyword">new</span> Graph()</span><br><span class="line"><span class="keyword">let</span> myVertexes = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertexes.length; i++) &#123;</span><br><span class="line">  graph.addVertex(myVertexes[i])</span><br><span class="line">&#125;</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(graph)</span><br><span class="line"><span class="built_in">console</span>.log(graph.toString())</span><br><span class="line"><span class="comment">//4.测试bfs遍历方法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">graph.bfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot;-&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="keyword">let</span> result2 = <span class="string">&quot;&quot;</span></span><br><span class="line">graph.dfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result2 += v + <span class="string">&quot;-&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、图解红黑树</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="六、图解红黑树"><a href="#六、图解红黑树" class="headerlink" title="六、图解红黑树"></a>六、图解红黑树</h1><h2 id="6-1-红黑树的五条规则"><a href="#6-1-红黑树的五条规则" class="headerlink" title="6.1 红黑树的五条规则"></a>6.1 红黑树的五条规则</h2><p>红黑树除了符合二叉搜素树的基本规则外，还添加了以下特性：</p><ul><li><p>节点是<strong>红色或黑色</strong>的</p></li><li><p><strong>根</strong>节点是<strong>黑色</strong>的</p></li><li><p>每个<strong>叶子</strong>节点都是<strong>黑色的空节点（NIL节点）</strong></p></li><li><p>每个<strong>红色节点的两个子节点都是黑色</strong>的（从每个叶子到根的所有路径上，<strong>不可能有</strong>两个<strong>连续</strong>的<strong>红色</strong>节点）</p></li><li><p>从<strong>任意节点</strong>到其每个<strong>叶子节点</strong>的所有路径，都包含<strong>相同数目的黑色节点</strong></p></li></ul><h2 id="6-2-红黑树的相对平衡"><a href="#6-2-红黑树的相对平衡" class="headerlink" title="6.2 红黑树的相对平衡"></a>6.2 红黑树的相对平衡</h2><p> 前面5条规则的约束确保了以下红黑树的关键特性：</p><ul><li><p>从根到叶子节点的最长路径，不会超过最短路径的两倍；</p></li><li><p>结果就是这棵树基本是平衡的；</p></li><li><p>虽然没有做到绝对的平衡，但是可以保证在最坏的情况下，该树依然是高效的；</p></li></ul><p>为什么可以做到最长路径不超过最短路径的两倍呢？</p><ul><li><p>性质4决定了路径上不能有两个相连的红色节点；</p></li><li><p>所以，最长路径一定是红色节点和黑色节点交替而成的；</p></li><li><p>由于根节点和叶子节点都是黑色的，最短路径可能都是黑色节点，并且最长路径中一定是黑色节点多于红色节点；</p></li><li><p>性质5决定了所有路径上都有相同数目的黑色节点；</p></li><li><p>这就表明了没有路径能多于其他任何路径两倍长。</p></li></ul><h2 id="6-3-红黑树的三种变换"><a href="#6-3-红黑树的三种变换" class="headerlink" title="6.3 红黑树的三种变换"></a>6.3 红黑树的三种变换</h2><p>插入一个新节点时，有可能树不再平衡，可以通过三种方式的变换使树保持平衡</p><ul><li><p>变色</p></li><li><p>左旋转</p></li><li><p>右旋转</p></li></ul><h3 id="变色"><a href="#变色" class="headerlink" title="变色"></a>变色</h3><p>为了重新符合红黑树的规则，需要把<strong>红色节点变为黑色</strong>，或者把黑<strong>色节点变为红色；</strong></p><p>插入的新节点通常都是<strong>红色节点</strong>：</p><ul><li><p>当插入的节点<strong>为红色</strong>的时候，大多数情况<strong>不违反</strong>红黑树的任何规则</p></li><li><p>而插入<strong>黑色</strong>节点，必然会导致一条路径上<strong>多了一个黑色节点</strong>，这是很难调整的；</p></li><li><p>红色节点虽然可能导致<strong>红红相连</strong>的情况，但是这种情况可以通过<strong>颜色调换和旋转</strong>来调整；</p></li></ul><h3 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h3><p> 以<strong>节点X为根逆时针旋转</strong>二叉搜索树，使得<strong>父节点</strong>原来的位置被自己的<strong>右子节点</strong>替代，<strong>左子节点</strong>的位置被<strong>父节点</strong>替代；      </p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657198073643-ffb1d5d1-7ef2-4999-bfef-25ac782f5c10.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u2b443193&margin=%5Bobject%20Object%5D&name=C%25M0XTP1MTHVPRQKV%7B78BHU.png&originHeight=261&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85963&status=done&style=none&taskId=ucb421ef7-f3ed-41af-9960-4d502a33ae7&title=" alt="C%M0XTP1MTHVPRQKV{78BHU.png"></p><p> 如上图所示，左旋转之后：</p><ul><li><p>节点X取代了节点a原来的位置；</p></li><li><p>节点Y取代了节点X原来的位置；</p></li><li><p>节点X的左子树 a 仍然是节点X的左子树（这里X的左子树只有一个节点，有多个节点时同样适用，以下同理）；</p></li><li><p>节点Y的右子树 c 仍然是节点Y的右子树；</p></li><li><p>节点Y的左子树 b 向左平移成为了节点X的右子树； </p></li></ul><p>除此之外，二叉搜索树左旋转之后仍为二叉搜索树      </p><h3 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h3><p> 以节点<strong>X为根顺时针旋转</strong>二叉搜索树，使得<strong>父节点</strong>原来的位置被自己的<strong>左子节点</strong>替代，<strong>右子节点</strong>的位置被<strong>父节点</strong>替代；    </p><p>![PK4YTWTZT4`W(1S2NOP}N3U.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657198094782-c0d0bcde-28df-4250-9316-cac6297e69f3.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ub2fcaeb9&amp;margin=%5Bobject%20Object%5D&amp;name=PK4YTWTZT4%60W%281S2NOP%7DN3U.png&amp;originHeight=238&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76220&amp;status=done&amp;style=none&amp;taskId=uf9a0ad63-a271-4ca0-bc88-cb98df70c7d&amp;title=">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657198094782-c0d0bcde-28df-4250-9316-cac6297e69f3.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ub2fcaeb9&amp;margin=%5Bobject%20Object%5D&amp;name=PK4YTWTZT4%60W%281S2NOP%7DN3U.png&amp;originHeight=238&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76220&amp;status=done&amp;style=none&amp;taskId=uf9a0ad63-a271-4ca0-bc88-cb98df70c7d&amp;title=</a>)</p><p> 如上图所示，右旋转之后：</p><ul><li><p>节点X取代了节点a原来的位置；</p></li><li><p>节点Y取代了节点X原来的位置；</p></li><li><p>节点X的右子树 a 仍然是节点X的右子树（这里X的右子树虽然只有一个节点，但是多个节点时同样适用，以下同理）；</p></li><li><p>节点Y的左子树 b 仍然是节点Y的左子树；</p></li><li><p>节点Y的右子树 c 向右平移成为了节点X的左子树；</p></li></ul><p>除此之外，二叉搜索树右旋转之后仍为二叉搜索树  </p><h2 id="6-4-红黑树的插入操作"><a href="#6-4-红黑树的插入操作" class="headerlink" title="6.4 红黑树的插入操作"></a>6.4 红黑树的插入操作</h2><p> 首先需要明确，在保证满足红黑树5条规则的情况下，**新插入的节点必然是红色节点。    **</p><p>为了方便说明，规定以下四个节点：   </p><ul><li><p>新插入节点为N（Node）</p></li><li><p>N的父节点为P（Parent）</p></li><li><p>P的兄弟节点为U（Uncle）</p></li><li><p>U的父节点为G（Grandpa）</p></li><li><p>如下图所示：</p></li></ul><p>![C$KI3J$2BIMA{4CO<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657198405480-340122f5-00ab-4576-b3b5-6325bf680357.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=364&id=uf9e6d54b&margin=%5Bobject%20Object%5D&name=C%24KI3J%242BIMA%7B4CO%5B26%24RTI.png&originHeight=342&originWidth=442&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49784&status=done&style=none&taskId=u5d217ca7-d56a-457e-a452-64aff6d2eab&title=&width=471">26$RTI.png</a></p><h3 id="情况一（根）"><a href="#情况一（根）" class="headerlink" title="情况一（根）"></a>情况一（根）</h3><ul><li><p>当插入的新节点<strong>N</strong>位于<strong>树的根上</strong>时，<strong>没有父节点</strong>。</p></li><li><p>这种情况下，只需要将<strong>红色节点变为黑色节点</strong>即可满足规则2 。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657198756277-71c29f78-10cd-4027-807b-398ed41a7c57.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u78e44705&margin=%5Bobject%20Object%5D&name=BF76_CPK~%7DC0Z4S%28VLP92UV.png&originHeight=184&originWidth=201&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11516&status=done&style=none&taskId=ua1ddf092-8c16-4bf1-b67a-1976b5b76a4&title=" alt="BF76_CPK~}C0Z4S(VLP92UV.png"></p><h3 id="情况二（P为黑）"><a href="#情况二（P为黑）" class="headerlink" title="情况二（P为黑）"></a>情况二（P为黑）</h3><ul><li><p>新节点N的<strong>父节点P为黑色</strong>节点，此时<strong>不需要</strong>任何变化。</p></li><li><p>此时既满足规则4也满足规则5。尽管新节点是红色的，但是新节点<strong>N有两个黑色节点NIL</strong>，所以通向它的路径上<strong>黑色节点的个数依然相等</strong>，因此满足规则5 。</p></li></ul><h3 id="情况三（父红叔红祖黑）"><a href="#情况三（父红叔红祖黑）" class="headerlink" title="情况三（父红叔红祖黑）"></a>情况三（父红叔红祖黑）</h3><p> 节点P为红色，节点U也为红色，此时节点G必为黑色，即父红叔红祖黑。   </p><p>在这种情况下需要：  </p><ul><li><p>先将父节点P变为黑色；</p></li><li><p>再将叔叔节点U变为黑色；</p></li><li><p>最后将祖父节点G变为红色；</p></li><li><p>即变为父黑叔黑祖红，如下图所示：</p></li></ul><p>![YBE%JSE<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657199034383-ae28659f-c600-4763-8069-55c1bbfb41ec.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uc3bedd42&margin=%5Bobject%20Object%5D&name=YBE%25JSE%5B%7BVWTR%29MWJZJ%28%7D8N.png&originHeight=342&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50302&status=done&style=none&taskId=ubad75806-6a25-4a7e-9185-d76ce1c08ac&title=">{VWTR)MWJZJ(}8N.png</a></p><p>可能出现的问题：</p><ul><li><p>N的祖父节点G的父节点也<strong>可能是红色</strong>，这就违反了规则4，此时可以通过<strong>递归调整节点颜色</strong>；</p></li><li><p>当<strong>递归调整到根节点</strong>时就需要<strong>旋转</strong>了，如下图节点A和节点B所示，具体情况后面会介绍；</p></li></ul><h3 id="情况四（父红叔黑祖黑，左节点，右旋转）"><a href="#情况四（父红叔黑祖黑，左节点，右旋转）" class="headerlink" title="情况四（父红叔黑祖黑，左节点，右旋转）"></a>情况四（<strong>父红叔黑祖黑，左节点，右旋转</strong>）</h3><p>节点P是红色节点，节点U是黑色节点，并且节点N为节点P的<strong>左子节点</strong>，此时节点G一定是黑色节点，即<strong>父红叔黑祖黑</strong>。   </p><p>在这种情况下需要：  </p><ul><li><p><strong>先变色</strong>：将父节点<strong>P</strong>变为<strong>黑色</strong>，将祖父节点<strong>G</strong>变为<strong>红色</strong>；</p></li><li><p><strong>后右旋转</strong>：以祖父节点G为根进行<strong>右旋转</strong>；</p></li></ul><p>![@}GV{[KWA`R$7D2S(D2KFVO.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657199235153-f3acfc5e-0efe-4d04-b654-b5e953c0cd46.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=196&amp;id=u3cdca7aa&amp;margin=%5Bobject%20Object%5D&amp;name=%40%7DGV%7B%5BKWA%60R%247D2S%28D2KFVO.png&amp;originHeight=229&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54237&amp;status=done&amp;style=none&amp;taskId=ue3917267-e1c2-48b4-bdc7-d1ecf300b6c&amp;title=&amp;width=529">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657199235153-f3acfc5e-0efe-4d04-b654-b5e953c0cd46.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=196&amp;id=u3cdca7aa&amp;margin=%5Bobject%20Object%5D&amp;name=%40%7DGV%7B%5BKWA%60R%247D2S%28D2KFVO.png&amp;originHeight=229&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54237&amp;status=done&amp;style=none&amp;taskId=ue3917267-e1c2-48b4-bdc7-d1ecf300b6c&amp;title=&amp;width=529</a>)</p><h3 id="情况五（父红叔黑祖黑，右节点，左旋转）"><a href="#情况五（父红叔黑祖黑，右节点，左旋转）" class="headerlink" title="情况五（父红叔黑祖黑，右节点，左旋转）"></a>情况五（<strong>父红叔黑祖黑，右节点，左旋转</strong>）</h3><p>节点P是红色节点，节点U是黑色节点，并且节点N为节点P的<strong>右子节点</strong>，此时节点G一定是黑色节点，即<strong>父红叔黑祖黑</strong>。             </p><p>在这种情况下需要：</p><ul><li><p>先以节点<strong>P为根进行左旋转</strong>，旋转后如图b所示；</p></li><li><p>随后将<strong>红色节点P和黑色节点B</strong>看成一个<strong>整体的红色节点N1</strong>，将新插入的红色节点N看成红色节点P1 如图c所示。此时整体就转换为了情况4。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657199482357-4d216159-5e9e-4bfb-bbb5-2262c7fc699d.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u99881c2f&margin=%5Bobject%20Object%5D&name=U%24H~C%7D7Y39HFR%29G3%285_%25KQ9.png&originHeight=219&originWidth=568&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47683&status=done&style=none&taskId=u3af2a321-5adf-4fd2-bac2-3746680674b&title=" alt="U$H~C}7Y39HFR)G3(5_%KQ9.png"></p><p>接着可以按照情况4进行处理：</p><ul><li><p>先变色：将N1节点的父节点P1变为黑色，将祖父节点G变为红色；</p></li><li><p>后旋转：以祖父节点G为根进行右旋转，旋转后如图 e所示；<br>最后将节点N1和P1变换回来，完成节点N的插入，如图所示；</p></li></ul><h2 id="6-5-红黑树的案例"><a href="#6-5-红黑树的案例" class="headerlink" title="6.5 红黑树的案例"></a>6.5 红黑树的案例</h2><p>在二叉树中依次插入：10，9，8，7，6，5，4，3，2，1    </p><h3 id="插入10"><a href="#插入10" class="headerlink" title="插入10"></a>插入10</h3><p><strong>符合情况一</strong></p><ul><li><p>插入节点10</p></li><li><p>将节点10的颜色变为黑色</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657200811284-65eea9ca-5b8a-4828-ac33-71dc86e62ba3.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u42cd83a9&margin=%5Bobject%20Object%5D&name=N%25%281N%29G~%29LA1XAYQHOBSY3X.png&originHeight=113&originWidth=121&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16746&status=done&style=none&taskId=u40a6d346-3cb8-4ea8-8cc4-35b7b18bfc9&title=" alt="N%(1N)G~)LA1XAYQHOBSY3X.png"></p><h3 id="插入9"><a href="#插入9" class="headerlink" title="插入9"></a>插入9</h3><p><strong>符合情况二</strong></p><ul><li><p>插入节点9</p></li><li><p>不需要任何情况</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657200817666-33319af2-8618-4136-a03b-708ccd5fdaef.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uea8daba2&margin=%5Bobject%20Object%5D&name=S%40_OB2Q15Q6I%28%2992%24WNGM7B.png&originHeight=237&originWidth=228&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38836&status=done&style=none&taskId=u71f642b2-5d87-4d96-b0a4-074e2b25166&title=" alt="S@_OB2Q15Q6I()92$WNGM7B.png"></p><h3 id="插入8"><a href="#插入8" class="headerlink" title="插入8"></a>插入8</h3><p><strong>符合情况四</strong></p><ul><li><p>插入节点8</p></li><li><p>先变色，<strong>9 -&gt; 黑 ,10 -&gt; 红</strong></p></li><li><p>再<strong>以祖父节点10为根右旋转</strong></p></li></ul><p>![{CG)F[[5C{FVC`YUFA${AXO.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657200835492-522c371b-aebc-489a-8cd2-5598a6dcbd38.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u5b1332ea&amp;margin=%5Bobject%20Object%5D&amp;name=%7BCG%29F%5B%5B5C%7BFVC%60YUFA%24%7BAXO.png&amp;originHeight=287&amp;originWidth=657&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91636&amp;status=done&amp;style=none&amp;taskId=uec42414a-47e1-4e50-b2d2-024b062c751&amp;title=">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657200835492-522c371b-aebc-489a-8cd2-5598a6dcbd38.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u5b1332ea&amp;margin=%5Bobject%20Object%5D&amp;name=%7BCG%29F%5B%5B5C%7BFVC%60YUFA%24%7BAXO.png&amp;originHeight=287&amp;originWidth=657&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91636&amp;status=done&amp;style=none&amp;taskId=uec42414a-47e1-4e50-b2d2-024b062c751&amp;title=</a>)</p><h3 id="插入7"><a href="#插入7" class="headerlink" title="插入7"></a>插入7</h3><p><strong>符合情况三</strong></p><ul><li><p>插入节点7</p></li><li><p>先变色，<strong>8,10 -&gt; 黑 , 9 -&gt; 红</strong></p></li><li><p>再把祖父元素<strong>9变为黑色</strong></p></li></ul><p>![RX{8<del>LZIV3$XES0]0EYRB8S.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201400668-109e0ff5-1886-4f94-b36f-44e1a7072dcd.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=167&amp;id=ue9a84cbf&amp;margin=%5Bobject%20Object%5D&amp;name=RX%7B8">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201400668-109e0ff5-1886-4f94-b36f-44e1a7072dcd.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=167&amp;id=ue9a84cbf&amp;margin=%5Bobject%20Object%5D&amp;name=RX%7B8</a></del>LZIV3%24XES0%5D0EYRB8S.png&amp;originHeight=301&amp;originWidth=1010&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=163407&amp;status=done&amp;style=none&amp;taskId=uea6630b7-c4c4-4931-adc4-1abd3c17ae0&amp;title=&amp;width=560)</p><h3 id="插入6"><a href="#插入6" class="headerlink" title="插入6"></a>插入6</h3><p><strong>符合情况四</strong></p><ul><li><p>插入节点6</p></li><li><p>先变色，<strong>7 -&gt; 黑 , 8 -&gt;  红</strong></p></li><li><p>再<strong>以祖父节点8为根右旋转</strong></p></li></ul><p>![M0YG@D95]TT$FV{`FUTI$%Y.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201700973-f6835b0f-be4d-4dca-b2c6-0891febe8e4d.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=202&amp;id=u0e8a997a&amp;margin=%5Bobject%20Object%5D&amp;name=M0YG%40D95%5DTT%24FV%7B%60FUTI%24%25Y.png&amp;originHeight=389&amp;originWidth=1064&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=195451&amp;status=done&amp;style=none&amp;taskId=u086db68c-4f35-4a5a-98b0-c31348079ca&amp;title=&amp;width=552">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201700973-f6835b0f-be4d-4dca-b2c6-0891febe8e4d.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=202&amp;id=u0e8a997a&amp;margin=%5Bobject%20Object%5D&amp;name=M0YG%40D95%5DTT%24FV%7B%60FUTI%24%25Y.png&amp;originHeight=389&amp;originWidth=1064&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=195451&amp;status=done&amp;style=none&amp;taskId=u086db68c-4f35-4a5a-98b0-c31348079ca&amp;title=&amp;width=552</a>)</p><h3 id="插入5"><a href="#插入5" class="headerlink" title="插入5"></a>插入5</h3><p><strong>符合情况三</strong></p><ul><li><p>插入节点5</p></li><li><p>先变色，<strong>6，8 -&gt; 黑 , 7 -&gt;  红</strong></p></li></ul><p>![{I_(]72Y(N0)7C<del>FU4</del>5_%S.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201933448-b88988ea-0d05-4100-9b16-1140bac2d83d.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uca8492e2&amp;margin=%5Bobject%20Object%5D&amp;name=%7BI_%28%5D72Y%28N0%297C~FU4~5_%25S.png&amp;originHeight=377&amp;originWidth=896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=138039&amp;status=done&amp;style=none&amp;taskId=u0659d59a-9ea3-4452-84aa-4121d3422db&amp;title=">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657201933448-b88988ea-0d05-4100-9b16-1140bac2d83d.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uca8492e2&amp;margin=%5Bobject%20Object%5D&amp;name=%7BI_%28%5D72Y%28N0%297C~FU4~5_%25S.png&amp;originHeight=377&amp;originWidth=896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=138039&amp;status=done&amp;style=none&amp;taskId=u0659d59a-9ea3-4452-84aa-4121d3422db&amp;title=</a>)</p><h3 id="插入4"><a href="#插入4" class="headerlink" title="插入4"></a>插入4</h3><p><strong>符合情况四</strong></p><ul><li><p>插入节点4</p></li><li><p>先变色，<strong>5 -&gt; 黑 , 6 -&gt;  红</strong></p></li><li><p>再<strong>以祖父节点6为根右旋转</strong></p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657202025807-02205164-f4b5-48c4-b760-d6e9f673c781.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u47cbeae9&margin=%5Bobject%20Object%5D&name=6EQ%5BG%5DD%7BT2%7B%7D2VZ7%40E%40I7MY.png&originHeight=441&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=279110&status=done&style=none&taskId=ub9d8151e-f1b3-4294-bd9c-931b005faee&title=" alt="6EQ[G]D{T2{}2VZ7@E@I7MY.png"></p><h3 id="插入3"><a href="#插入3" class="headerlink" title="插入3"></a>插入3</h3><p><strong>符合情况3</strong></p><ul><li><p>插入节点8</p></li><li><p>先变色，<strong>4，6 -&gt; 黑 , 5 -&gt;  红</strong></p></li></ul><ul><li> 变换之后发现<strong>5，7为相连的两个红色节点</strong>，于是把<strong>以5为根的整个子树</strong>看成一个<strong>新插入的节点N1</strong>，再进行第二次变换。</li></ul><p><strong>符合情况4</strong></p><ul><li><p>插入节点N1</p></li><li><p>先变色，<strong>7-&gt; 黑 , 9 -&gt;  红</strong></p></li></ul><ul><li>再<strong>以祖父节点9为根右旋转</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657202599411-56a700d8-d571-4823-a603-dbf8f1c00929.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u95421947&margin=%5Bobject%20Object%5D&name=OKM_Y8W31H%40%40UHH04%7DLUH%29U.png&originHeight=492&originWidth=1141&originalType=binary&ratio=1&rotation=0&showTitle=false&size=354605&status=done&style=none&taskId=u930a268e-63cb-4271-94f4-255755f51cd&title=" alt="OKM_Y8W31H@@UHH04}LUH)U.png"></p><h3 id="插入2"><a href="#插入2" class="headerlink" title="插入2"></a>插入2</h3><p><strong>符合情况四</strong></p><ul><li><p>插入节点2</p></li><li><p>先变色，<strong>3 -&gt; 黑 , 4 -&gt;  红</strong></p></li><li><p>再<strong>以祖父节点4为根右旋转</strong></p></li></ul><p>![4]OUHWUC6M43[V@O`_FSVJA.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657202800232-aa7cd6d1-a65d-4f07-afe1-c14eb781f71f.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ubfcd3c14&amp;margin=%5Bobject%20Object%5D&amp;name=4%5DOUHWUC6M43%5BV%40O%60_FSVJA.png&amp;originHeight=440&amp;originWidth=1154&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=304017&amp;status=done&amp;style=none&amp;taskId=ufd04b308-45d9-453f-8753-76b168f7b58&amp;title=">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657202800232-aa7cd6d1-a65d-4f07-afe1-c14eb781f71f.png#clientId=ud38460c5-73fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ubfcd3c14&amp;margin=%5Bobject%20Object%5D&amp;name=4%5DOUHWUC6M43%5BV%40O%60_FSVJA.png&amp;originHeight=440&amp;originWidth=1154&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=304017&amp;status=done&amp;style=none&amp;taskId=ufd04b308-45d9-453f-8753-76b168f7b58&amp;title=</a>)</p><h3 id="插入1"><a href="#插入1" class="headerlink" title="插入1"></a>插入1</h3><p><strong>符合情况三</strong></p><ul><li><p>插入节点1</p></li><li><p>先变色，<strong>2，4 -&gt; 黑 , 3 -&gt;  红</strong></p></li><li><p>变换之后发现<strong>3和5为相连</strong>的两个红色节点，于是把<strong>以3为根</strong>的整个子树看成一个<strong>新插入的节点N1</strong>，再进行第二次变换。</p></li></ul><p><strong>符合情况三</strong></p><ul><li><p>插入节点N1</p></li><li><p>先变色，<strong>5，9 -&gt; 黑 , 7 -&gt;  红</strong></p></li><li><p>变换之后发现<strong>根节点7为红色</strong>不符合规则2，所以把<strong>以7为根节点的红黑树看成一个新插入的节点N2</strong>，再进行第三次变换。</p></li></ul><p><strong>符合情况一</strong></p><ul><li><p>插入节点N2</p></li><li><p>变色，<strong>7 -&gt;  黑</strong></p></li></ul><p> <img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657203345877-28590138-6aec-4171-9f8f-0fb85c3486c2.png#clientId=ud38460c5-73fc-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u8d2a0370&margin=%5Bobject%20Object%5D&name=BTGXH%40%24ZP11P%280~%28__5%7DHCV.png&originHeight=455&originWidth=1163&originalType=binary&ratio=1&rotation=0&showTitle=false&size=335741&status=done&style=none&taskId=u5052fe83-b6a9-4ce7-863b-80394815600&title=" alt="BTGXH@$ZP11P(0~(__5}HCV.png"></p><h2 id="6-6-红黑树的删除操作"><a href="#6-6-红黑树的删除操作" class="headerlink" title="6.6 红黑树的删除操作"></a>6.6 红黑树的删除操作</h2><p>红黑树的删除操作结合了复杂的二叉树的删除操作和复杂的红黑树的插入规则，整体来说难度非常大，篇幅较长，这里暂不进行探讨。  </p>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、树结构</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、树结构"><a href="#五、树结构" class="headerlink" title="五、树结构"></a>五、树结构</h1><h2 id="5-1-树结构简介"><a href="#5-1-树结构简介" class="headerlink" title="5.1 树结构简介"></a>5.1 树结构简介</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>![$`OXI``5S(MJYVP$QLOO}AP.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657165002706-888c54c9-ca02-41c2-8c41-4208b215695f.jpeg#clientId=ud7979db5-dca3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u81ae4908&amp;margin=%5Bobject%20Object%5D&amp;name=%24%60OXI%60%605S%28MJYVP%24QLOO%7DAP.jpg&amp;originHeight=743&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=134320&amp;status=done&amp;style=none&amp;taskId=u1266a85c-d9aa-4b9c-b19c-7048d86641f&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657165002706-888c54c9-ca02-41c2-8c41-4208b215695f.jpeg#clientId=ud7979db5-dca3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u81ae4908&amp;margin=%5Bobject%20Object%5D&amp;name=%24%60OXI%60%605S%28MJYVP%24QLOO%7DAP.jpg&amp;originHeight=743&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=134320&amp;status=done&amp;style=none&amp;taskId=u1266a85c-d9aa-4b9c-b19c-7048d86641f&amp;title=</a>)</p><ul><li><p>树（Tree）: <strong>n（n≥0）个结点</strong>构成的<strong>有限集合</strong>。</p><ul><li><p>当<strong>n=0</strong>时，称为<strong>空树</strong>；</p></li><li><p>对于任一棵<strong>非空树（n&gt; 0）</strong>，它具备以下性质：</p></li><li><p>树中有一个称为“<strong>根（Root）”</strong>的特殊结点，用** r **表示；</p></li><li><p>其余结点可分为<strong>m(m&gt;0)个互不相交的有限集T1，T2，… ，Tm</strong></p></li></ul></li></ul><p>其中   ： </p><p>每个集合本身又是一棵树，称为原来树的“<strong>子树（SubTree）</strong>”</p><blockquote><p>注意: </p><ul><li>子树之间<strong>不可以相交</strong></li></ul></blockquote><blockquote><ul><li>除了<strong>根结点</strong>外，每个结点<strong>有且仅有一个父结点</strong>；</li></ul></blockquote><blockquote><ul><li>一棵<strong>N个结点的树有N-1条边</strong>。  </li></ul></blockquote><h3 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h3><ul><li><p> <strong>节点的度（Degree）</strong>：节点的<strong>子树个数</strong>，比如节点<strong>B的度为2</strong>；</p></li><li><p><strong>树的度</strong>：树的所有节点中<strong>最大的度数</strong>，如上图树的<strong>度为2</strong>；</p></li><li><p><strong>叶节点（Leaf）</strong>：<strong>度为0的节点</strong>（也称为叶子节点），如上图的<strong>H，I</strong>等；</p></li><li><p><strong>父节点（Parent</strong>）：<strong>度不为0</strong>的节点称为<strong>父节点</strong>，如上图节点<strong>B是节点D和E</strong>的父节点；</p></li><li><p><strong>子节点（Child）</strong>：若<strong>B是D的父节点</strong>，那么<strong>D就是B的子节点</strong>；</p></li><li><p><strong>兄弟节点（Sibling）</strong>：具有<strong>同一父节点</strong>的各节点彼此是兄弟节点，比如上图的<strong>B和C，D和E互为兄弟节点</strong>；</p></li><li><p><strong>路径和路径长度</strong>：路径指的是<strong>一个节点到另一节点的通道</strong>，路径所包含边的个数称为路径长度，比如<strong>A-&gt;H的路径长度为3</strong>；</p></li><li><p><strong>节点的层次（Level）</strong>：规定<strong>根节点在1层</strong>，其他任一节点的层数是<strong>其父节点的层数加1</strong>。如<strong>B和C</strong>节点的层次<strong>为2</strong>；</p></li><li><p><strong>树的深度（Depth）</strong>：树种所有节点中的<strong>最大层次</strong>是这棵<strong>树的深度</strong>，如上图树的<strong>深度为4</strong>；</p></li></ul><h3 id="树的优点"><a href="#树的优点" class="headerlink" title="树的优点"></a>树的优点</h3><ul><li><p>数组:</p><ul><li><p>优点:</p><ul><li><p>数组的主要优点是根据<strong>下标值访问</strong>效率会很<strong>高</strong>.</p></li><li><p>但是如果我们希望根据元素来查找对应的位置呢?</p></li><li><p>比较好的方式是<strong>先对数组进行排序</strong>, 再进行<strong>二分查找</strong>.</p></li></ul></li><li><p>缺点:</p><ul><li><p>需要先对数组<strong>进行排序</strong>, 生成<strong>有序数组</strong>, 才能提高查找效率.</p></li><li><p>另外数组在插入和删除数据时, 需要有<strong>大量的位移操作</strong>(插入到首位或者中间位置的时候), <strong>效率很低</strong>.</p></li></ul></li></ul></li><li><p>链表:</p><ul><li><p>优点:</p><ul><li>链表的<strong>插入和删除操作效率都很高</strong>.</li></ul></li><li><p>缺点:</p><ul><li><p>查找<strong>效率很低</strong>, 需要从头开始依次访问链表中的<strong>每个数据项</strong>, 直到找到.</p></li><li><p>而且即使<strong>插入和删除</strong>操作效率很高, 但是如果要插入和删除<strong>中间位置</strong>的数据, 还是需要<strong>重头先找到对应的数据.</strong></p></li></ul></li></ul></li><li><p>哈希表:</p><ul><li><p>优点:</p><ul><li><p>我们学过哈希表后, 已经发现了哈希表的<strong>插入/查询/删除效率都是非常高的</strong></p></li><li><p>但是哈希表也有很多缺点.</p></li></ul></li><li><p>缺点:</p><ul><li><p><strong>空间利用率不高,</strong> 底层使用的是数组, 并且某些单元是没有被利用的.</p></li><li><p>哈希表中的元素是<strong>无序</strong>的, 不能按照固定的顺序来遍历哈希表中的元素.</p></li><li><p>不能<strong>快速的找出哈希表中的最大值或者最小值</strong>这些特殊的值.</p></li></ul></li></ul></li><li><p>树结构:</p><ul><li>我们不能说树结构比其他结构都要好, 因为每种数据结构都有**自己特定的应用场景.</li></ul></li></ul><p>**</p><ul><li><p>但是树确实也综合了上面的数据结构的优点(当然优点不足于盖过其他数据结构, 比如<strong>效率一般情况下没有哈希表高</strong>), 并且也弥补了上面数据结构的缺点.</p></li><li><p>而且为了<strong>模拟某些场景</strong>, 我们使用树结构会更加方便. 比如**文件的目录结构.  **</p></li></ul><h3 id="树结构的表示方法"><a href="#树结构的表示方法" class="headerlink" title="树结构的表示方法"></a>树结构的表示方法</h3><p>树可以有很多种表示的方式</p><ul><li>最普通的表示方式：</li></ul><p>![L)X3P`G}{J8XT4<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657164749575-edca34ec-6a07-473e-9be9-6bf91c6e0a90.jpeg#clientId=ud7979db5-dca3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ub65ea189&margin=%5Bobject%20Object%5D&name=L%29X3P%60G%7D%7BJ8XT4%5B7K%401_8AB.jpg&originHeight=402&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31867&status=done&style=none&taskId=udd055088-e5a9-4ec7-85b4-9a033416369&title=">7K@1_8AB.jpg</a></p><ul><li>儿子-兄弟表示法：</li></ul><p>![]<em>1H]QGD</em>[7NUK<del>AHFQ`B</del>A.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657164753321-db7e4972-813f-4a05-b610-af10670bff3a.jpeg#clientId=ud7979db5-dca3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u79173f57&amp;margin=%5Bobject%20Object%5D&amp;name=%5D_1H%5DQGD_%5B7NUK~AHFQ%60B~A.jpg&amp;originHeight=443&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32002&amp;status=done&amp;style=none&amp;taskId=ufa6cdaa3-c86e-425a-a8cd-f66e1677d25&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657164753321-db7e4972-813f-4a05-b610-af10670bff3a.jpeg#clientId=ud7979db5-dca3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u79173f57&amp;margin=%5Bobject%20Object%5D&amp;name=%5D_1H%5DQGD_%5B7NUK~AHFQ%60B~A.jpg&amp;originHeight=443&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32002&amp;status=done&amp;style=none&amp;taskId=ufa6cdaa3-c86e-425a-a8cd-f66e1677d25&amp;title=</a>)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点A</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="comment">//存储数据</span></span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="comment">//统一只记录左边的子节点</span></span><br><span class="line">  <span class="built_in">this</span>.leftChild = B</span><br><span class="line">  <span class="comment">//统一只记录右边的第一个兄弟节点</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点B</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = E</span><br><span class="line">  <span class="built_in">this</span>.rightSibling = C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点F</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>儿子-兄弟表示法旋转：</li></ul><p>![9$[Y46[RR$ZVCFWEV[D<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657164757149-030acdc4-53d5-47a3-b485-2c877403fd4b.jpeg#clientId=ud7979db5-dca3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u0561db39&margin=%5Bobject%20Object%5D&name=9%24%5BY46%5BRR%24ZVCFWEV%5BD%5BA_A.jpg&originHeight=426&originWidth=776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40208&status=done&style=none&taskId=u57610958-a4b0-460d-83e9-b47480f38b5&title=">A_A.jpg</a></p><blockquote><p>总结出的<strong>规律</strong>：   </p><ul><li>所有的树本质上都可以使用<strong>二叉树</strong>模拟出来</li></ul></blockquote><blockquote><ul><li>所以在学习的过程中，二叉树<strong>非常重要</strong></li></ul></blockquote><h2 id="5-2-二叉树"><a href="#5-2-二叉树" class="headerlink" title="5.2 二叉树"></a>5.2 二叉树</h2><h3 id="二叉树简介"><a href="#二叉树简介" class="headerlink" title="二叉树简介"></a>二叉树简介</h3><blockquote><ul><li><p>如果树中每个节点<strong>最多只能有两个子节点</strong>，这样的树就成为<strong>“二叉树”</strong></p></li><li><p> 前面, 我们已经提过<strong>二叉树的重要性</strong>, 不仅仅是因为简单, 也因为几乎上所有的树<strong>都可以表示成二叉树</strong>的形式</p></li></ul></blockquote><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><ul><li><p>二叉树的定义</p><ul><li><p> 二叉树可以<strong>为空</strong>, 也就是<strong>没有结点</strong>.</p></li><li><p>若<strong>不为空</strong>，则它是由<strong>根结点</strong>和称为其<strong>左子树TL和右子树TR</strong>的两个<strong>不相交</strong>的二叉树组成。</p></li></ul></li><li><p>二叉树有<strong>五种形态</strong></p></li></ul><ul><li>注意c和d是不同的二叉树, 因为二叉树是有左右之分的. </li></ul><p>![U3}P6H([@E%KP9O<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657166253232-939d3d48-4f37-4129-8670-925f8c457494.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=udff539ff&margin=%5Bobject%20Object%5D&name=U3%7DP6H%28%5B%40E%25KP9O%5BPJ3VW%295.jpg&originHeight=289&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19517&status=done&style=none&taskId=u44af94c8-2524-4b11-9819-f7f1077b547&title=">PJ3VW)5.jpg</a></p><h3 id="二叉树的特性"><a href="#二叉树的特性" class="headerlink" title="二叉树的特性"></a>二叉树的特性</h3><ul><li><p> 二叉树有几个比较重要的特性, 在笔试题中比较常见:</p></li><li><p>一个二叉树第 i 层的最大结点数为：<strong>2^(i-1), i &gt;= 1;</strong></p></li><li><p><strong>深度为k</strong>的二叉树有最大结点总数为： <strong>2^k - 1, k &gt;= 1;</strong></p></li><li><p>对任何<strong>非空二叉树 T</strong>，若<strong>n0表示叶结点的个数</strong>、n2是度为2的非叶结点个数，那么两者满足关系<strong>n0 = n2 + 1</strong>。  </p></li></ul><p>![$0XR}CBV5]UC27EQM4$Y%T2.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657166497059-5566f755-3a71-4674-8bb7-90bf5ce44115.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1ae2a24d&amp;margin=%5Bobject%20Object%5D&amp;name=%240XR%7DCBV5%5DUC27EQM4%24Y%25T2.jpg&amp;originHeight=401&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31027&amp;status=done&amp;style=none&amp;taskId=u1e591cc3-2d12-4b66-83e3-e495be34a7b&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657166497059-5566f755-3a71-4674-8bb7-90bf5ce44115.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1ae2a24d&amp;margin=%5Bobject%20Object%5D&amp;name=%240XR%7DCBV5%5DUC27EQM4%24Y%25T2.jpg&amp;originHeight=401&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31027&amp;status=done&amp;style=none&amp;taskId=u1e591cc3-2d12-4b66-83e3-e495be34a7b&amp;title=</a>)</p><h3 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h3><ul><li><p>** 完美二叉树(Perfect Binary Tree) <strong>, 也称为</strong>满二叉树(Full Binary Tree）**</p><ul><li>在二叉树中, <strong>除了最下一层的叶结点</strong>外, 每层节点都有<strong>2个子结点</strong>, 就构成了满二叉树.  </li></ul></li></ul><p>![<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657166868286-840a3315-e5f9-487f-95ff-feb1c46cd134.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u3e4c3bfc&margin=%5Bobject%20Object%5D&name=%5BIY%286QFP3%7BTI6MW0C1I3ATG.jpg&originHeight=537&originWidth=901&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40430&status=done&style=none&taskId=ub0f868a0-53ca-4327-9cd1-85d4cee568a&title=">IY(6QFP3{TI6MW0C1I3ATG.jpg</a></p><ul><li><p><strong>完全二叉树(Complete Binary Tree)</strong></p><ul><li><p>除二叉树最后一层外, 其他<strong>各层的节点数都达到最大个数</strong>.</p></li><li><p>且最后一层<strong>从左向右的叶结点连续存在</strong>, 只缺右侧若干节点.</p></li><li><p>完美二叉树是<strong>特殊的</strong>完全二叉树.</p></li></ul></li></ul><p>下面不是完全二叉树, 因为<strong>D节点还没有右结点</strong>, 但是<strong>E节点就有了左右结点</strong>.  </p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657166974283-ba66db03-b0cd-46f3-8e15-72aae8457b7e.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u36da9345&margin=%5Bobject%20Object%5D&name=3X46HD9D88Q%40G6PU%7BPFM09C.jpg&originHeight=540&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30715&status=done&style=none&taskId=u8174b5ac-7d52-4925-abb8-5169c9b7346&title=" alt="3X46HD9D88Q@G6PU{PFM09C.jpg"></p><h3 id="二叉树的数据存储"><a href="#二叉树的数据存储" class="headerlink" title="二叉树的数据存储"></a>二叉树的数据存储</h3><blockquote><p>二叉树的存储<strong>常见</strong>的方式是<strong>数组和链表</strong></p></blockquote><ul><li><p>使用<strong>数组存储</strong></p><ul><li>完全二叉树：按<strong>从上至下，从左到右</strong>顺序存储</li></ul></li></ul><p>![%SJNV6A)RV1K]H2{@<del>@ZC6J.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167248756-64704645-cc22-41de-9310-6f153dd88a23.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ubabc0a7c&amp;margin=%5Bobject%20Object%5D&amp;name=%25SJNV6A%29RV1K%5DH2%7B%40">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167248756-64704645-cc22-41de-9310-6f153dd88a23.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ubabc0a7c&amp;margin=%5Bobject%20Object%5D&amp;name=%25SJNV6A%29RV1K%5DH2%7B%40</a></del>%40ZC6J.jpg&amp;originHeight=613&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34517&amp;status=done&amp;style=none&amp;taskId=uf0f46cbd-f5ab-4b0d-a2a8-f5063ddeea0&amp;title=)</p><ul><li><p>非完全二叉树</p><ul><li><p>非完全二叉树要转成完全二叉树才可以按照上面的方案存储.</p></li><li><p>但是会造成很大的空间浪费  </p></li></ul></li></ul><p>![ZKX68QZ@O75)Y`DZ7MKB%UE.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167343576-23ad9eee-82ac-4b23-b70a-d13fe7b20d3d.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=324&amp;id=uad8df6f9&amp;margin=%5Bobject%20Object%5D&amp;name=ZKX68QZ%40O75%29Y%60DZ7MKB%25UE.jpg&amp;originHeight=690&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63470&amp;status=done&amp;style=none&amp;taskId=ub680df68-48de-4265-9718-6c59ca368c5&amp;title=&amp;width=564">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167343576-23ad9eee-82ac-4b23-b70a-d13fe7b20d3d.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=324&amp;id=uad8df6f9&amp;margin=%5Bobject%20Object%5D&amp;name=ZKX68QZ%40O75%29Y%60DZ7MKB%25UE.jpg&amp;originHeight=690&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63470&amp;status=done&amp;style=none&amp;taskId=ub680df68-48de-4265-9718-6c59ca368c5&amp;title=&amp;width=564</a>)</p><ul><li><p>链表存储</p><ul><li><p> 二叉树最<strong>常见</strong>的方式还是使用<strong>链表存储.</strong></p></li><li><p>每个结点封装成<strong>一个Node</strong>, Node中包含<strong>存储的数据, 左结点的引用, 右结点的引用.</strong></p></li></ul></li></ul><p>![7CF43_([])9XOUJ]EPG@R]P.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167166106-37d6c2d9-922e-43be-b25b-d77ed6e3f4d8.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=136&amp;id=u8edaacdc&amp;margin=%5Bobject%20Object%5D&amp;name=7CF43_%28%5B%5D%299XOUJ%5DEPG%40R%5DP.jpg&amp;originHeight=288&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25604&amp;status=done&amp;style=none&amp;taskId=u1a6fecc1-567f-4e45-bb13-7976d11530b&amp;title=&amp;width=566">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657167166106-37d6c2d9-922e-43be-b25b-d77ed6e3f4d8.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=136&amp;id=u8edaacdc&amp;margin=%5Bobject%20Object%5D&amp;name=7CF43_%28%5B%5D%299XOUJ%5DEPG%40R%5DP.jpg&amp;originHeight=288&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25604&amp;status=done&amp;style=none&amp;taskId=u1a6fecc1-567f-4e45-bb13-7976d11530b&amp;title=&amp;width=566</a>)</p><h2 id="5-3-二叉搜索树"><a href="#5-3-二叉搜索树" class="headerlink" title="5.3 二叉搜索树"></a>5.3 二叉搜索树</h2><h3 id="认识二叉搜索树"><a href="#认识二叉搜索树" class="headerlink" title="认识二叉搜索树"></a>认识二叉搜索树</h3><ul><li><p><strong>二叉搜索树（BST</strong>，Binary Search Tree），也称<strong>二叉排序树或二叉查找树</strong></p></li><li><p>二叉搜索树是一棵<strong>二叉树</strong>，可以<strong>为空</strong></p></li><li><p>如果<strong>不为空</strong>，满足以下性质</p><ul><li><p><strong>非空左子树</strong>的所有键值<strong>小于其根节点</strong>的键值</p></li><li><p><strong>非空右子树</strong>的所有键值<strong>大于其根节点</strong>的键值</p></li><li><p><strong>左右子树</strong>本身也都是<strong>二叉搜索树</strong></p></li></ul></li><li><p>下面哪些是二叉搜索树，那些不是？</p></li></ul><p>![XN)S`D4FWLU%Y4DGKXHFL4V.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657168037077-9b4ab5fd-1681-4b90-858c-67577097ccd7.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u15881a33&amp;margin=%5Bobject%20Object%5D&amp;name=XN%29S%60D4FWLU%25Y4DGKXHFL4V.jpg&amp;originHeight=370&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34344&amp;status=done&amp;style=none&amp;taskId=uc2aae36c-30a1-4949-9a1f-054302ebfdc&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657168037077-9b4ab5fd-1681-4b90-858c-67577097ccd7.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u15881a33&amp;margin=%5Bobject%20Object%5D&amp;name=XN%29S%60D4FWLU%25Y4DGKXHFL4V.jpg&amp;originHeight=370&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34344&amp;status=done&amp;style=none&amp;taskId=uc2aae36c-30a1-4949-9a1f-054302ebfdc&amp;title=</a>)</p><blockquote><p> 总结：   </p><ul><li><p>二叉搜索树的特点主要是<strong>较小的值</strong>总是保存在<strong>左节点</strong>上，相对<strong>较大的值</strong>总是保存在<strong>右节点</strong>上。   </p></li><li><p>这种特点使得二叉搜索树的<strong>查询效率非常高</strong>，这也就是<strong>二叉搜索树中”搜索”的来源</strong>。  </p></li></ul></blockquote><h3 id="二叉搜索树应用举例"><a href="#二叉搜索树应用举例" class="headerlink" title="二叉搜索树应用举例"></a>二叉搜索树应用举例</h3><p>下面是一个二叉搜索树：</p><p>![OYZZ%{5}7W1)}]F<del>T@]6(X9.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657168318136-a73b5da6-afa1-46bd-b45f-a3b94e0784aa.png#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=317&amp;id=uf5dd06e5&amp;margin=%5Bobject%20Object%5D&amp;name=OYZZ%25%7B5%7D7W1%29%7D%5DF">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657168318136-a73b5da6-afa1-46bd-b45f-a3b94e0784aa.png#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=317&amp;id=uf5dd06e5&amp;margin=%5Bobject%20Object%5D&amp;name=OYZZ%25%7B5%7D7W1%29%7D%5DF</a></del>T%40%5D6%28X9.png&amp;originHeight=259&amp;originWidth=465&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=64847&amp;status=done&amp;style=none&amp;taskId=u720e0402-87b5-4243-9dd6-00803ec7a20&amp;title=&amp;width=570)</p><p>若想在其中查找数据10，只需要查找4次，查找效率非常高</p><p>![LI2ZWFB%J`U_<del>5L03P2UR{L.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657170732532-9384dd17-9699-4ec6-a79d-d2103f3527ac.png#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=324&amp;id=uf0e517b4&amp;margin=%5Bobject%20Object%5D&amp;name=LI2ZWFB%25J%60U">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657170732532-9384dd17-9699-4ec6-a79d-d2103f3527ac.png#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=324&amp;id=uf0e517b4&amp;margin=%5Bobject%20Object%5D&amp;name=LI2ZWFB%25J%60U</a>_</del>5L03P2UR%7BL.png&amp;originHeight=237&amp;originWidth=413&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75810&amp;status=done&amp;style=none&amp;taskId=u8af42436-ea6e-4a2f-b6a7-760b04ecb57&amp;title=&amp;width=564)</p><ul><li><p> 第1次：将<strong>10与根节点9</strong>进行<strong>比较</strong>，由于<strong>10 &gt; 9</strong>，所以<strong>10下一步与根节点9的右子节点13</strong>比较；</p></li><li><p>第2次：由于<strong>10 &lt; 13</strong>，所以<strong>10下一步与父节点13的左子节点11</strong>比较；</p></li><li><p>第3次：由于<strong>10 &lt; 11</strong>，所以10下一步与<strong>父节点11的左子节点10比较</strong>；</p></li><li><p>第4次：由于**10 = 10，最终查找到数据10 **。  </p></li></ul><h2 id="5-4-一、二叉搜索树的封装"><a href="#5-4-一、二叉搜索树的封装" class="headerlink" title="5.4  一、二叉搜索树的封装"></a>5.4  一、二叉搜索树的封装</h2><h3 id="二叉搜索树的基本属性"><a href="#二叉搜索树的基本属性" class="headerlink" title="二叉搜索树的基本属性"></a>二叉搜索树的基本属性</h3><p>![SBMG]YRBZ85Q9<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657173935909-6778502f-4894-47f9-b21c-da1d09eec0b4.png#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uce58af6f&margin=%5Bobject%20Object%5D&name=SBMG%5DYRBZ85Q9%5BRQ~88%25BIT.png&originHeight=383&originWidth=771&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73487&status=done&style=none&taskId=u23bc2b7d-5f87-412f-b324-c3b5f4aceda&title=">RQ~88%BIT.png</a></p><p>如图所示：</p><blockquote><p>二叉搜索树有四个最基本的属性：</p><ul><li><p>指向节点的根：root</p></li><li><p>结点中的键：key</p></li><li><p>左指针：left</p></li><li><p>右指针：right</p></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//创建节点构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//保存根的属性</span></span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的常见操作"><a href="#二叉搜索树的常见操作" class="headerlink" title="二叉搜索树的常见操作"></a>二叉搜索树的常见操作</h3><ul><li><p> <code>insert（key）</code>：向树中<strong>插入</strong>一个新的键；</p></li><li><p><code>search（key）</code>：在树中<strong>查找</strong>一个键，如果节点存在，则返回true；如果不存在，则返回false；</p></li><li><p><code>inOrderTraverse</code>：通过<strong>中序遍历</strong>方式遍历所有节点；</p></li><li><p><code>preOrderTraverse</code>：通过<strong>先序遍历</strong>方式遍历所有节点；</p></li><li><p><code>postOrderTraverse</code>：通过<strong>后序遍历</strong>方式遍历所有节点；</p></li><li><p><code>min</code>：返回树中<strong>最小</strong>的值/键；</p></li><li><p><code>max</code>：返回树中<strong>最大</strong>的值/键；</p></li><li><p><code>remove（key）</code>：从树中<strong>移除</strong>某个键；</p></li></ul><h3 id="插入数据-insert-key"><a href="#插入数据-insert-key" class="headerlink" title="插入数据(insert(key))"></a>插入数据(insert(key))</h3><h4 id="insert实现思路："><a href="#insert实现思路：" class="headerlink" title="insert实现思路："></a>insert实现思路：</h4><ul><li><p>首先根据传入的key来创建节点对象</p></li><li><p>然后判断根节点是否存在</p><ul><li><p>若不存在，则通过<code>this.root = newNode</code>，直接把新节点作为二叉搜索树的根节点</p></li><li><p>若存在，则通过<code>insertNode(this.root,newNode)</code>，寻找插入点</p></li></ul></li></ul><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.insert = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(key)</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.root === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.root = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root,newNode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="insertNode实现思路（非根节点）："><a href="#insertNode实现思路（非根节点）：" class="headerlink" title="insertNode实现思路（非根节点）："></a>insertNode实现思路（非根节点）：</h4><ul><li><p>根据比较传入的两个节点，一直查找新节点适合插入的位置，直到成功插入新节点为止</p></li><li><p>当<code>newNode.key &lt; node.key</code>时，向左查找</p><ul><li><p>情况1：当<code>node</code>无左节点时，直接插入</p></li><li><p>情况2： 当<code>node</code>有左子节点时，<strong>递归调用insertNode()</strong>,直到遇到无左子节点成功插入newNode后，不再符合该情况，也就不再调用insertNode()，递归停止。</p></li></ul></li><li><p>当<code>newNode.key &gt;= node.key</code>时，向右查找</p><ul><li><p>情况1：当<code>node</code>无右节点时，直接插入</p></li><li><p>情况2： 当<code>node</code>有右子节点时，<strong>递归调用insertNode()</strong>,直到遇到无左子节点成功插入newNode后，不再符合该情况，也就不再调用insertNode()，递归停止。</p></li></ul></li></ul><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.insertNode = <span class="function">(<span class="params">node,newNode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(newNode.key &lt; node.key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">      node.left = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(node.left,newNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(newNode.key &gt;= node.key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">      node.right = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(node.right,newNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bst);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657176157692-96ec9fdf-d84b-4f04-aab5-b5f00c23477c.png#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=488&id=udeab5a16&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=663&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61133&status=done&style=none&taskId=u17e9fec2-8411-4ac5-af2d-4a80305f7a9&title=&width=546.5" alt="image.png"></p><h3 id="遍历数据"><a href="#遍历数据" class="headerlink" title="遍历数据"></a>遍历数据</h3><blockquote><p>这里所说的树的遍历不仅仅针对二叉搜索树，而是适用于所有的二叉树。由于树结构不是线性结构，所以遍历方式有多种选择，常见的三种二叉树遍历方式为：  </p></blockquote><blockquote><ul><li>先序遍历；</li></ul></blockquote><blockquote><ul><li>中序遍历；</li></ul></blockquote><blockquote><ul><li>后序遍历；</li></ul></blockquote><ol><li>preOrderTraversal(先序遍历)</li></ol><p>先序遍历的过程为：</p><ul><li><p>首先，遍历根节点</p></li><li><p>然后，遍历其左子树</p></li><li><p>最后，遍历其右子树</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657182555582-5bf0f740-af00-406e-ae62-a49c6a996347.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u2b75f67d&margin=%5Bobject%20Object%5D&name=72VZ~B_%7D~6%40%409OV%25JEDI9Z8.jpg&originHeight=438&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33670&status=done&style=none&taskId=ue43ab5ef-79e8-4d76-a54b-25afacb2fc4&title=" alt="72VZ~B_}~6@@9OV%JEDI9Z8.jpg"></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.preOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.preOrderTraversalNode(<span class="built_in">this</span>.root,handler)</span><br><span class="line">&#125;</span><br><span class="line">BinarySearchTree.prototype.preOrderTraversalNode = <span class="function">(<span class="params">node,handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">    handler(node.key)</span><br><span class="line">    <span class="built_in">this</span>.preOrderTraversalNode(node.left,handler)</span><br><span class="line">    <span class="built_in">this</span>.preOrderTraversalNode(node.right,handler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.insert(<span class="number">12</span>);</span><br><span class="line">bst.insert(<span class="number">14</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">18</span>);</span><br><span class="line">bst.insert(<span class="number">25</span>);</span><br><span class="line">bst.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试遍历</span></span><br><span class="line"><span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//掺入处理节点值的处理函数</span></span><br><span class="line">bst.preOrderTraversal(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  resultString += key + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">alert(resultString)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657183460833-a2a59b30-7c2c-46a6-90a0-d4f5bcca3672.png#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=150&id=uec8146f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=563&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8118&status=done&style=none&taskId=u8689ccaf-d75f-4a3b-b1aa-00575664520&title=&width=457.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657183646607-01476757-0c02-4285-8e71-fc1892bb3345.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ua25b322b&margin=%5Bobject%20Object%5D&name=T44H%60%7B%5DJR%5DHH%606KY%7DH7BZ1W.jpg&originHeight=769&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55245&status=done&style=none&taskId=uee895557-1f45-4bda-8c00-aa607cda6b1&title=" alt="T44H`{]JR]HH`6KY}H7BZ1W.jpg"></p><ol start="2"><li>midOrderTraversal(中序遍历)</li></ol><p>中序遍历的过程为：</p><ul><li><p>首先，遍历其左子树</p></li><li><p>然后，遍历根节点</p></li><li><p>最后，遍历其右子树</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657183657518-a3c29a09-ad3f-48d9-8b91-54b84d55935d.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=237&id=ubd6b0e4a&margin=%5Bobject%20Object%5D&name=7XUYTP~2%40TGXTVW04XC0KRK.jpg&originHeight=501&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36168&status=done&style=none&taskId=ud89fea1f-92be-426a-a38d-119dc0e4f54&title=&width=567" alt="7XUYTP~2@TGXTVW04XC0KRK.jpg"></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.midOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.midOrderTraversalNode(<span class="built_in">this</span>.root, handler)</span><br><span class="line">&#125;</span><br><span class="line">BinarySearchTree.prototype.midOrderTraversalNode = <span class="function">(<span class="params">node, handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.midOrderTraversalNode(node.left, handler)</span><br><span class="line">    handler(node.key)</span><br><span class="line">    <span class="built_in">this</span>.midOrderTraversalNode(node.right, handler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.insert(<span class="number">12</span>);</span><br><span class="line">bst.insert(<span class="number">14</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">18</span>);</span><br><span class="line">bst.insert(<span class="number">25</span>);</span><br><span class="line">bst.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试遍历</span></span><br><span class="line"><span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//掺入处理节点值的处理函数</span></span><br><span class="line">bst.midOrderTraversal(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  resultString += key + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">alert(resultString)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657185497113-ec505c46-528e-4e8d-a496-02d1ab880887.png#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=170&id=uddd14f8e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=563&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7382&status=done&style=none&taskId=u7045acb3-e6c1-45ce-a5a7-7804cc6cfd1&title=&width=521.5" alt="image.png"></p><p>![8F<code>OA</code>XVMR{`(CU%3GFS3UL.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657185704156-114fc041-4b53-4476-bfc0-ecf15d3c10ca.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1ef99308&amp;margin=%5Bobject%20Object%5D&amp;name=8F%60OA%60XVMR%7B%60%28CU%253GFS3UL.jpg&amp;originHeight=634&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57528&amp;status=done&amp;style=none&amp;taskId=u42ac2de6-82fe-47d6-8469-e9cd6bd82a9&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657185704156-114fc041-4b53-4476-bfc0-ecf15d3c10ca.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1ef99308&amp;margin=%5Bobject%20Object%5D&amp;name=8F%60OA%60XVMR%7B%60%28CU%253GFS3UL.jpg&amp;originHeight=634&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57528&amp;status=done&amp;style=none&amp;taskId=u42ac2de6-82fe-47d6-8469-e9cd6bd82a9&amp;title=</a>)</p><ol start="3"><li>postOrderTraversal(后序遍历)</li></ol><p>后序遍历的过程为：</p><ul><li><p>首先，遍历其左子树</p></li><li><p>然后，遍历其右子树</p></li><li><p>最后，遍历其根节点</p></li></ul><p>![M)<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657186036677-cd3cbbda-ce04-4697-998b-4ab714381f3c.jpeg#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u9cd50a64&margin=%5Bobject%20Object%5D&name=M%29%5BRRLGOTZQKYLA%28RP%40QAR5.jpg&originHeight=478&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36261&status=done&style=none&taskId=u3d6c9a9b-7ce6-4ef2-9542-44be6471bf0&title=">RRLGOTZQKYLA(RP@QAR5.jpg</a></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.postOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.postOrderTraversalNode(<span class="built_in">this</span>.root, handler)</span><br><span class="line">&#125;</span><br><span class="line">BinarySearchTree.prototype.postOrderTraversalNode = <span class="function">(<span class="params">node, handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.postOrderTraversalNode(node.left, handler)</span><br><span class="line">    <span class="built_in">this</span>.postOrderTraversalNode(node.right, handler)</span><br><span class="line">    handler(node.key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.insert(<span class="number">12</span>);</span><br><span class="line">bst.insert(<span class="number">14</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">18</span>);</span><br><span class="line">bst.insert(<span class="number">25</span>);</span><br><span class="line">bst.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试遍历</span></span><br><span class="line"><span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//掺入处理节点值的处理函数</span></span><br><span class="line">bst.postOrderTraversal(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  resultString += key + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">alert(resultString)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657185951377-a8592cb5-48d4-4d0d-8985-177cfd52bd19.png#clientId=u17d54ebf-7058-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=u6a61a5ac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=565&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8545&status=done&style=none&taskId=u4446d581-7f26-428c-9f1a-8d83200cfe9&title=&width=572.5" alt="image.png"></p><p>![DA]`UUVLSSI<del>}7ZLZ[}%YVU.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657186025780-9f1ea78a-c405-4034-bb0d-0f3a4e958889.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u27d9e00d&amp;margin=%5Bobject%20Object%5D&amp;name=DA%5D%60UUVLSSI">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657186025780-9f1ea78a-c405-4034-bb0d-0f3a4e958889.jpeg#clientId=u17d54ebf-7058-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u27d9e00d&amp;margin=%5Bobject%20Object%5D&amp;name=DA%5D%60UUVLSSI</a></del>%7D7ZLZ%5B%7D%25YVU.jpg&amp;originHeight=640&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55622&amp;status=done&amp;style=none&amp;taskId=ua49ff1ab-edc5-40d6-93c0-9e0fb2b8395&amp;title=)</p><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><ol><li>查找最大值和最小值</li></ol><p>思路：</p><ul><li><p>代码依次向左找到<strong>最左边</strong>的节点就是，<strong>最小值</strong></p></li><li><p>代码依次向左找到<strong>最右边</strong>的节点就是，<strong>最大值</strong></p></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.min = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">  <span class="keyword">while</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">    node = node.left</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key</span><br><span class="line">&#125;</span><br><span class="line">BinarySearchTree.prototype.max = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">  <span class="keyword">while</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">    node = node.right</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(bst.max())</span><br><span class="line"><span class="built_in">console</span>.log(bst.min())</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657186413258-790c21dc-bfd0-4da6-a18c-08e1ece8c93d.png#clientId=u62b45d7f-2f05-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=171&id=ubd9f2ee5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=62&originWidth=98&originalType=binary&ratio=1&rotation=0&showTitle=false&size=616&status=done&style=none&taskId=u0c9e57e1-8555-4d95-ac13-27f00d41e89&title=&width=271" alt="image.png"></p><ol start="2"><li>查找特定值</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">  <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node = node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node = node.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">13</span>));</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">99</span>));</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657187057519-a9a8ce9f-7fff-425b-b3f9-50c45e988684.png#clientId=u62b45d7f-2f05-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=179&id=u31bb0cbf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=94&originWidth=155&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1460&status=done&style=none&taskId=uff65b137-fb19-4b19-a98c-10a16192fdb&title=&width=294.5" alt="image.png"></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>实现思路：</p><ul><li><p>第一步：先找到需要删除的节点，若没找到，则不需要删除</p><ul><li><p>首先定义变量current，用于保存需要删除的节点</p></li><li><p>变量parent，用于保存它的父节点</p></li><li><p>变量isLeftChild保存current是否为parent1的左节点</p></li><li><p>这样方便之后删除节点，改变相关节点的指向</p></li></ul></li><li><p>第二步：删除找到的指定节点，后分三种情况</p><ul><li><p>删除叶子节点</p></li><li><p>删除只有一个子节点的节点</p></li><li><p>删除有两个子节点的节点</p></li></ul></li></ul><p>初步实现代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.remove = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.root</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">while</span>(current.key != key)&#123;</span><br><span class="line">    parent = current</span><br><span class="line">    <span class="keyword">if</span>(key &lt; current.key)&#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span></span><br><span class="line">      current = current.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      isLeftChild = <span class="literal">false</span></span><br><span class="line">      current = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(current == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>情况1：没有子节点</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(current.left == <span class="literal">null</span> &amp;&amp; current.right == <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(current == <span class="built_in">this</span>.root)&#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(isLeftChild)&#123;</span><br><span class="line">    parent.left = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>情况2：有一个子节点</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = current.left</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parent.left = current.left</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.right = current.left</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parent.left = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = current.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>情况2：有两个子节点</li></ol><blockquote><p>总结：</p><ul><li><p>需要从要删除节点下面的子节点中找到一个如果要删除的节点有两个子节点，甚至子节点还有子节点，这种情况下需要从要删除节点下面的子节点中找到一个合适的节点，来替换当前的节点</p></li><li><p>若用current表示需要删除的节点，则合适的节点是指</p></li></ul></blockquote><p>：</p><blockquote><ul><li><p>current左子树中比current小一点点的节点，即current<strong>左子树的最大值</strong></p></li><li><p>current右子树中比current大一点点的节点，即current<strong>右子树的最大值</strong></p></li></ul></blockquote><blockquote><p>前驱和后继<br>在二叉搜索树中，这两个特殊的节点有特殊的名字</p><ul><li> 比current小一点点的节点，称为current节点的<strong>前驱</strong>。比如下图中的<strong>节点5就是节点7的前驱；</strong></li></ul></blockquote><blockquote><ul><li>比current大一点点的节点，称为current节点的<strong>后继</strong>。比如下图中的<strong>节点8就是节点7的后继；</strong></li></ul></blockquote><p>![VJFW9{I@Z]EJGI6(8EF49QU.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657190027833-068870fc-8d8c-44e0-8020-d0d6901953b8.jpeg#clientId=u62b45d7f-2f05-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1f08df68&amp;margin=%5Bobject%20Object%5D&amp;name=VJFW9%7BI%40Z%5DEJGI6%288EF49QU.jpg&amp;originHeight=620&amp;originWidth=1183&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45973&amp;status=done&amp;style=none&amp;taskId=u8b20d9fb-6d59-4eb2-b38a-d06f6a7d2b7&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657190027833-068870fc-8d8c-44e0-8020-d0d6901953b8.jpeg#clientId=u62b45d7f-2f05-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u1f08df68&amp;margin=%5Bobject%20Object%5D&amp;name=VJFW9%7BI%40Z%5DEJGI6%288EF49QU.jpg&amp;originHeight=620&amp;originWidth=1183&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45973&amp;status=done&amp;style=none&amp;taskId=u8b20d9fb-6d59-4eb2-b38a-d06f6a7d2b7&amp;title=</a>)</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.删除有两个节点的节点</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 1.获取后继节点</span></span><br><span class="line">  <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(current)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.判断是否是根节点</span></span><br><span class="line">  <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = successor</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parent.left = successor</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.right = successor</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.将删除节点的左子树赋值给successor</span></span><br><span class="line">  successor.left = current.left</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找后继的方法</span></span><br><span class="line">BinarySerachTree.prototype.getSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">delNode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.使用变量保存临时的节点</span></span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode</span><br><span class="line">  <span class="keyword">let</span> successor = delNode</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right <span class="comment">// 要从右子树开始找</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.寻找节点</span></span><br><span class="line">  <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor</span><br><span class="line">    successor = current</span><br><span class="line">    current = current.left</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.如果是删除图中15的情况, 还需要如下代码</span></span><br><span class="line">  <span class="keyword">if</span> (successor != delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right</span><br><span class="line">    successor.right = delNode.right</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> successor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>完整实现</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BinarySearchTree.prototype.remove = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.root</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">while</span> (current.key != key) &#123;</span><br><span class="line">    parent = current</span><br><span class="line">    <span class="keyword">if</span> (key &lt; current.key) &#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span></span><br><span class="line">      current = current.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      isLeftChild = <span class="literal">false</span></span><br><span class="line">      current = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (current.left == <span class="literal">null</span> &amp;&amp; current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parent.left = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = current.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parent.left = current.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = current.left</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parent.left = current.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = current.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.删除有两个节点的节点</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取后继节点</span></span><br><span class="line">    <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(current)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.判断是否是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = successor</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parent.left = successor</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = successor</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.将删除节点的左子树赋值给successor</span></span><br><span class="line">    successor.left = current.left</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找后继的方法</span></span><br><span class="line">BinarySerachTree.prototype.getSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">delNode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.使用变量保存临时的节点</span></span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode</span><br><span class="line">  <span class="keyword">let</span> successor = delNode</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right <span class="comment">// 要从右子树开始找</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.寻找节点</span></span><br><span class="line">  <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor</span><br><span class="line">    successor = current</span><br><span class="line">    current = current.left</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.如果是删除图中15的情况, 还需要如下代码</span></span><br><span class="line">  <span class="keyword">if</span> (successor != delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right</span><br><span class="line">    successor.right = delNode.right</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> successor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.insert(<span class="number">12</span>);</span><br><span class="line">bst.insert(<span class="number">14</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">18</span>);</span><br><span class="line">bst.insert(<span class="number">25</span>);</span><br><span class="line">bst.insert(<span class="number">6</span>);</span><br><span class="line">bst.insert(<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试删除代码</span></span><br><span class="line"><span class="comment">//删除没有子节点的节点</span></span><br><span class="line">bst.remove(<span class="number">3</span>)</span><br><span class="line">bst.remove(<span class="number">8</span>)</span><br><span class="line">bst.remove(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除有一个子节点的节点</span></span><br><span class="line">bst.remove(<span class="number">5</span>)</span><br><span class="line">bst.remove(<span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除有两个子节点的节点</span></span><br><span class="line">bst.remove(<span class="number">9</span>)</span><br><span class="line">bst.remove(<span class="number">7</span>)</span><br><span class="line">bst.remove(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历二叉搜索树并输出</span></span><br><span class="line"><span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">bst.midOrderTraversal(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  resultString += key + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">alert(resultString)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657190987126-34a6bfb8-2a2a-4acd-9d9d-172afa3ae9e6.png#clientId=u62b45d7f-2f05-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=261&id=uac96f95b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=134&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2360&status=done&style=none&taskId=ua4bc183d-069a-466d-867f-f66db4a5d47&title=&width=159" alt="image.png"></p><h3 id="二叉搜索树完整封装"><a href="#二叉搜索树完整封装" class="headerlink" title="二叉搜索树完整封装"></a>二叉搜索树完整封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建节点构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//保存根的属性</span></span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span></span><br><span class="line">  BinarySearchTree.prototype.insert = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root, newNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.insertNode = <span class="function">(<span class="params">node, newNode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(node.left, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (newNode.key &gt;= node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(node.right, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.preOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.preOrderTraversalNode(<span class="built_in">this</span>.root, handler)</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.preOrderTraversalNode = <span class="function">(<span class="params">node, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      handler(node.key)</span><br><span class="line">      <span class="built_in">this</span>.preOrderTraversalNode(node.left, handler)</span><br><span class="line">      <span class="built_in">this</span>.preOrderTraversalNode(node.right, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.midOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.midOrderTraversalNode(<span class="built_in">this</span>.root, handler)</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.midOrderTraversalNode = <span class="function">(<span class="params">node, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.midOrderTraversalNode(node.left, handler)</span><br><span class="line">      handler(node.key)</span><br><span class="line">      <span class="built_in">this</span>.midOrderTraversalNode(node.right, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.postOrderTraversal = <span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.postOrderTraversalNode(<span class="built_in">this</span>.root, handler)</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.postOrderTraversalNode = <span class="function">(<span class="params">node, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.postOrderTraversalNode(node.left, handler)</span><br><span class="line">      <span class="built_in">this</span>.postOrderTraversalNode(node.right, handler)</span><br><span class="line">      handler(node.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.min = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">    <span class="keyword">while</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.key</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.max = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">    <span class="keyword">while</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.key</span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.search = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="built_in">this</span>.root</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node = node.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">        node = node.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  BinarySearchTree.prototype.remove = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.root</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> isLeftChild = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">while</span> (current.key != key) &#123;</span><br><span class="line">      parent = current</span><br><span class="line">      <span class="keyword">if</span> (key &lt; current.key) &#123;</span><br><span class="line">        isLeftChild = <span class="literal">true</span></span><br><span class="line">        current = current.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        isLeftChild = <span class="literal">false</span></span><br><span class="line">        current = current.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current.left == <span class="literal">null</span> &amp;&amp; current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parent.left = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = current.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parent.left = current.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = current.left</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = current.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parent.left = current.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = current.right</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.删除有两个节点的节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 1.获取后继节点</span></span><br><span class="line">      <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(current)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.判断是否是根节点</span></span><br><span class="line">      <span class="keyword">if</span> (current == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = successor</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parent.left = successor</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = successor</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.将删除节点的左子树赋值给successor</span></span><br><span class="line">      successor.left = current.left</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 找后继的方法</span></span><br><span class="line">  BinarySearchTree.prototype.getSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">delNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.使用变量保存临时的节点</span></span><br><span class="line">    <span class="keyword">let</span> successorParent = delNode</span><br><span class="line">    <span class="keyword">let</span> successor = delNode</span><br><span class="line">    <span class="keyword">let</span> current = delNode.right <span class="comment">// 要从右子树开始找</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.寻找节点</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">      successorParent = successor</span><br><span class="line">      successor = current</span><br><span class="line">      current = current.left</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果是删除图中15的情况, 还需要如下代码</span></span><br><span class="line">    <span class="keyword">if</span> (successor != delNode.right) &#123;</span><br><span class="line">      successorParent.left = successor.right</span><br><span class="line">      successor.right = delNode.right</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> successor</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建BinarySearchTree</span></span><br><span class="line"><span class="keyword">let</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">bst.insert(<span class="number">11</span>);</span><br><span class="line">bst.insert(<span class="number">7</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">9</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.insert(<span class="number">12</span>);</span><br><span class="line">bst.insert(<span class="number">14</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">18</span>);</span><br><span class="line">bst.insert(<span class="number">25</span>);</span><br><span class="line">bst.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试遍历</span></span><br><span class="line"><span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//掺入处理节点值的处理函数</span></span><br><span class="line">bst.postOrderTraversal(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  resultString += key + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//alert(resultString)</span></span><br><span class="line"><span class="built_in">console</span>.log(bst.max())</span><br><span class="line"><span class="built_in">console</span>.log(bst.min())</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">13</span>));</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">99</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试删除代码</span></span><br><span class="line"><span class="comment">//删除没有子节点的节点</span></span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除有一个子节点的节点</span></span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除有两个子节点的节点</span></span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">9</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.remove(<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-5-平衡树"><a href="#5-5-平衡树" class="headerlink" title="5.5 平衡树"></a>5.5 平衡树</h2><h3 id="二叉搜索树的缺陷"><a href="#二叉搜索树的缺陷" class="headerlink" title="二叉搜索树的缺陷"></a>二叉搜索树的缺陷</h3><ul><li><p> 当插入的数据是有序的数据，就会造成二叉搜索树的深度过大。比如原二叉搜索树又 11 7 15 组成</p></li><li><p>当插入一组有序数据：6 5 4 3 2就会变成深度过大的搜索二叉树，会严重影响二叉搜索树的性能</p></li></ul><p>![D8)03K`L1{(8@4<del>@NR(5(S5.png](<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657191334984-adf7f557-4b3d-4ed7-b9cf-e4691adc46a4.png#clientId=u62b45d7f-2f05-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uaf76863e&amp;margin=%5Bobject%20Object%5D&amp;name=D8%2903K%60L1%7B%288%404">https://cdn.nlark.com/yuque/0/2022/png/25602002/1657191334984-adf7f557-4b3d-4ed7-b9cf-e4691adc46a4.png#clientId=u62b45d7f-2f05-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uaf76863e&amp;margin=%5Bobject%20Object%5D&amp;name=D8%2903K%60L1%7B%288%404</a></del>%40NR%285%28S5.png&amp;originHeight=551&amp;originWidth=412&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72185&amp;status=done&amp;style=none&amp;taskId=uce09dea6-a379-4200-8c72-57f0f850ccf&amp;title=)</p><h3 id="非平衡树"><a href="#非平衡树" class="headerlink" title="非平衡树"></a>非平衡树</h3><ul><li><p> 比较好的二叉搜索树，它的数据应该是<strong>左右均匀分布</strong>的；</p></li><li><p>但是插入连续数据后，二叉搜索树中的数据分布就变得<strong>不均匀</strong>了，我们称这种树为<strong>非平衡树；</strong></p></li><li><p>对于一棵平衡二叉树来说，<strong>插入/查找等</strong>操作的效率是<strong>O（logN）</strong>；</p></li><li><p>而对于一棵<strong>非平衡二叉树</strong>来说，相当于编写了一个<strong>链表</strong>，查找效率变成了<strong>O（N）;</strong></p></li></ul><h3 id="树的平衡性"><a href="#树的平衡性" class="headerlink" title="树的平衡性"></a>树的平衡性</h3><p> 为了能以<strong>较快的时间O（logN）</strong>来操作一棵树，我们需要保证<strong>树总是平衡</strong>的：</p><ul><li><p>起码<strong>大部分是平衡</strong>的，此时的时间复杂度也是接近<strong>O（logN）</strong>的；</p></li><li><p>这就要求树中每个节点<strong>左边</strong>的子孙节点的个数，应该尽可能地<strong>等于右边</strong>的子孙节点的个数；</p></li></ul><h3 id="常见的平衡树"><a href="#常见的平衡树" class="headerlink" title="常见的平衡树"></a>常见的平衡树</h3><ul><li><p> <strong>AVL树</strong>：是最早的一种平衡树，它通过在<strong>每个节点多存储一个额外的数据</strong>来保持树的平衡。由于AVL树是平衡树，所以它的时间复杂度也是<strong>O（logN</strong>）。但是它的<strong>整体效率不如红黑树</strong>，开发中比较少用。</p></li><li><p><strong>红黑树</strong>：同样通过一些特性来保持树的平衡，时间复杂度也是<strong>O（logN）</strong>。进行<strong>插入/删除</strong>等操作时，性能<strong>优于AVL树</strong>，所以平衡树的应用基本都是<strong>红黑树</strong>。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、哈希表</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、哈希表"><a href="#四、哈希表" class="headerlink" title="四、哈希表"></a>四、哈希表</h1><h2 id="4-1-认识哈希表"><a href="#4-1-认识哈希表" class="headerlink" title="4.1 认识哈希表"></a>4.1 认识哈希表</h2><h3 id="哈希表介绍"><a href="#哈希表介绍" class="headerlink" title="哈希表介绍"></a>哈希表介绍</h3><p>哈希表通常是基于<strong>数组</strong>实现的，但是相对于数组，它存在更多<strong>优势：</strong></p><ul><li>哈希表可以提供非常快速的<strong>插入-删除-查找操作</strong></li><li> 无论多少数据，插入和删除值都只需要<strong>非常短的时间</strong>，即<strong>O(1)的时间级</strong>。实际上，只需要<strong>几个机器指令即可</strong>完成</li><li>哈希表的<strong>速度比树还要快</strong>，基本可以瞬间查找到想要的元素。但是相对于<strong>树来说编码要简单</strong>得多</li></ul><p>但是，哈希表同样存在<strong>不足之处：</strong></p><ul><li> 哈希表中的数据是<strong>没有顺序</strong>的，所以<strong>不能以一种固定的方式（比如从小到大 ）来遍历</strong>其中的元素</li><li>通常情况下，哈希表中的<strong>key是不允许重复</strong>的，<strong>不能放置相同的key，用于保存不同的元素</strong>。</li></ul><p>哈希表<strong>是什么？</strong></p><ul><li> 哈希表并不好理解，不像<strong>数组、链表和树等可通过图形的形式</strong>表示其结构和原理</li><li>哈希表的结构就是<strong>数组</strong>，但它神奇之处在于<strong>对下标值的一种变换</strong>，这种变换我们可以称之为<strong>哈希函数</strong>，通过哈希函数可以获取<strong>HashCode</strong>。</li></ul><h3 id="体会哈希表"><a href="#体会哈希表" class="headerlink" title="体会哈希表"></a>体会哈希表</h3><ul><li><p> 案例一：公司想要存储1000个人的信息，每一个工号对应一个员工的信息。若使用<strong>数组，增删数据时比较麻烦</strong>；使用<strong>链表，获取数据时比较麻烦</strong>。有没有一种数据结构，能<strong>把某一员工的姓名转换为它对应的工号</strong>，再根据工号查找该员工的完整信息呢？没错此时就可以使用<strong>哈希表的哈希函数</strong>来实现。</p></li><li><p>案例二：存储联系人和对应的电话号码：当要查找张三（比如）的号码时，若<strong>使用数组：由于不知道存储张三数据对象的下标值，所以查找起来十分麻烦</strong>，<strong>使用链表时也同样麻烦</strong>。而<strong>使用哈希表就能通过哈希函数</strong>把<strong>张三这个名称转换为它对应的下标值</strong>，再<strong>通过下标值查找效率就非常高</strong>了。</p></li></ul><p>也就是说：哈希表最后还是<strong>基于数据</strong>来实现的，只不过<strong>哈希表能够通过哈希函数把字符串转化为对应的下标值</strong>，建立<strong>字符串和下标值</strong>的<strong>对应</strong>关系。</p><h2 id="4-2-认识哈希化"><a href="#4-2-认识哈希化" class="headerlink" title="4.2 认识哈希化"></a>4.2 认识哈希化</h2><h3 id="字母转数字"><a href="#字母转数字" class="headerlink" title="字母转数字"></a>字母转数字</h3><p> 为了<strong>把字符串转化为对应的下标值</strong>，需要<strong>有一套编码系统</strong>，为了方便理解我们创建这样一套编码系统：<strong>比如a为1，b为2，c为3</strong>，以此类推<strong>z为26，空格为27</strong>（不考虑大写情况）。</p><p>有了编码系统后，<strong>将字母转化为数字</strong>也有很多种方式：</p><ul><li>方式一：**数字相加 。     **</li></ul><p>例如：<strong>cats转化为数字</strong>：3+1+20+19=43，那么就把<strong>43作为cats单词的下标值储存在数组</strong>中；但是这种方式会存在这样的问题：<strong>很多的单词按照该方式转化为数字后都是43</strong>，比如was。<strong>而在数组中一个下标值只能储存一个数据</strong>，所以该方式不合理。    </p><ul><li>方式二：**幂的连乘。      **</li></ul><p>我们平时使用的<strong>大于10的数字</strong>，就是用<strong>幂的连乘来表示它的唯一性</strong>的。比如： <strong>6543=6 * 103 + 5 * 102 + 4 * 10 + 3</strong>；这样单词也可以用该种方式来表示：<strong>cats = 3 * 273 + 1 * 272 + 20 * 27 + 17 =60337;       **<br>虽然该方式可以保证字符的唯一性，但是如果是</strong>较长的字符<strong>（如aaaaaaaaaa）所</strong>表示的数字就非常大<strong>，此时要求很大容量的数组，然而其中却有许多</strong>下标值指向的是无效的数据<strong>（比如不存在zxcvvv这样的单词），造成了</strong>数组空间的浪费**。</p><p>两种方案总结：   </p><p>第一种方案（让数字<strong>相加求和</strong>）产生的<strong>数组下标太少</strong>；<br>第二种方案（与27的<strong>幂相乘求和</strong>）产生的<strong>数组下标又太多</strong>；    </p><p>现在需要一种<strong>压缩方法</strong>，把幂的连乘方案系统中得到的<strong>巨大整数</strong>范围压缩到可<strong>接受的数组</strong>范围中。可以通过<strong>取余</strong>操作来实现。虽然取余操作得到的结构<strong>也有可能重复</strong>，但是可以通过<strong>其他方式解决</strong>。</p><h3 id="哈希表的一些概念"><a href="#哈希表的一些概念" class="headerlink" title="哈希表的一些概念"></a>哈希表的一些概念</h3><ul><li> <strong>哈希化</strong>：将<strong>大数字</strong>转化成<strong>数组范围内下标</strong>的过程，称之为<strong>哈希化</strong></li></ul><ul><li><strong>哈希函数</strong>：我们通常会将单词转化成大数字，把<strong>大数字进行哈希化</strong>的代码实现放在一个<strong>函数</strong>中，该函数就称为<strong>哈希函数</strong></li></ul><ul><li><strong>哈希表</strong>：对<strong>最终数据插入的数组</strong>进行整个结构的<strong>封装</strong>，得到的就是<strong>哈希表</strong></li></ul><h2 id="4-3-冲突及冲突的解决"><a href="#4-3-冲突及冲突的解决" class="headerlink" title="4.3 冲突及冲突的解决"></a>4.3 冲突及冲突的解决</h2><h3 id="什么是冲突？"><a href="#什么是冲突？" class="headerlink" title="什么是冲突？"></a>什么是冲突？</h3><p> 哈希化过后的下标依然可能重复，如何解决这个问题呢？这种情况称为冲突，冲突是不可避免的，我们只能解决冲突。</p><h3 id="解决冲突的方法"><a href="#解决冲突的方法" class="headerlink" title="解决冲突的方法"></a>解决冲突的方法</h3><p> 如何解决这种冲突呢? 常见的情况有两种方案.</p><ul><li><p>链地址法</p></li><li><p>开放地址法</p></li></ul><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p> 如下图所示，我们将<strong>每一个数字都对10进行取余操作</strong>，则余数的范围<strong>0~9作为数组的下标值</strong>。</p><p>并且，数组每一个下标值对应的位置存储的<strong>不再是一个数字</strong>了，而是存储由经过取余操作后得到<strong>相同余数的数字组成的数组或链表</strong>。  </p><p>![YB6HR`)5TTID$0_EEU3Z1C2.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657097347161-84615933-81b9-4263-9671-03dcb0b4297e.jpeg#clientId=u55012966-7d50-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u13917ee2&amp;margin=%5Bobject%20Object%5D&amp;name=YB6HR%60%295TTID%240_EEU3Z1C2.jpg&amp;originHeight=676&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=118394&amp;status=done&amp;style=none&amp;taskId=ubc17cea6-e751-419b-83e5-fc87cb96372&amp;title=">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657097347161-84615933-81b9-4263-9671-03dcb0b4297e.jpeg#clientId=u55012966-7d50-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u13917ee2&amp;margin=%5Bobject%20Object%5D&amp;name=YB6HR%60%295TTID%240_EEU3Z1C2.jpg&amp;originHeight=676&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=118394&amp;status=done&amp;style=none&amp;taskId=ubc17cea6-e751-419b-83e5-fc87cb96372&amp;title=</a>)</p><p>这样可以根据<strong>下标值获取到整个数组或链表</strong>，之后<strong>继续在数组或链表中查找</strong>就可以了。    </p><p>而且，<strong>产生冲突的元素一般不会太多</strong>。</p><p><strong>总结</strong>：<strong>链地址法</strong>解决冲突的办法是<strong>每个数组单元中存储的不再是单个数据</strong>，而是<strong>一条链条</strong>，这条链条常使用的数据结构为<strong>数组或链表</strong>，两种数据结构查找的<strong>效率相当</strong>（因为链条的元素一般不会太多）。</p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><p>开放地址法的主要工作方式是<strong>寻找空白的单元格</strong>来放置冲突的<strong>数据项</strong>。    </p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657105987662-00cde3ca-f219-48cf-9a1a-f4afc59b1479.jpeg#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u46c4ea68&margin=%5Bobject%20Object%5D&name=J%60%5B%7B3BQD7%28%5DH2U%25%5D477FV%607.jpg&originHeight=674&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136596&status=done&style=none&taskId=u0a2d715e-f40d-404d-8ce9-0f322d8d685&title=" alt="J`[{3BQD7(]H2U%]477FV`7.jpg"></p><p>根据<strong>探测空白单元格位置方式的不同</strong>，可分为三种方法：</p><ul><li><strong>线性探测</strong></li></ul><ul><li><strong>二次探测</strong></li></ul><ul><li><strong>再哈希法</strong></li></ul><h2 id="4-4-寻找空白位置的方式（开放地址法）"><a href="#4-4-寻找空白位置的方式（开放地址法）" class="headerlink" title="4.4 寻找空白位置的方式（开放地址法）"></a>4.4 寻找空白位置的方式（开放地址法）</h2><h3 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h3><ul><li><p>线性探测非常好理解：<strong>线性的查找空白的单元</strong></p></li><li><p><strong>插入32</strong>时：</p><ul><li><p>经过哈希化得到的<code>**index=2**</code>，但是在插入的时候，发现该位置已经有了82</p></li><li><p>而线性探测就是从<code>**index位置+1**</code><strong>处</strong>，开始一点点的<strong>查找合适的位置（即空位置</strong>，如下图中<strong>index=3</strong>的位置）来放置32</p></li></ul></li><li><p><strong>查询32</strong>时： </p><ul><li><p>首先经过哈希化得到<code>index=2</code>, 比较，<strong>2的位置结果和查询的数值是否相同</strong>, 相同那么就<strong>直接返回</strong></p></li><li><p> 不相同时，则线性查找，从<code>index+1</code>位置开始一个一个位置地查找数据<strong>32</strong></p></li><li><p> 查询过程中<strong>不会遍历整个哈希表</strong>，只要查询到<strong>空位置</strong>，就<strong>停止</strong>，因为插入<strong>32</strong>时<strong>不会跳过空位置</strong>去插入其他位置</p></li></ul></li><li><p><strong>删除32</strong>时：</p><ul><li><p> 删除操作和上述两种情况类似，但需要注意的是，<strong>删除一个数据项</strong>时，不能将该位置下<strong>标的内容设置为null</strong>，否则会<strong>影响到之后其他的查询操</strong>作，因为一<strong>遇到为null的位置就会停止</strong>查找</p></li><li><p>通常删除一个位置的数据项时，我们可以将它进行<strong>特殊处理（比如设置为-1）</strong>，这样在<strong>查找时遇到-1就知道要继续查找</strong>。</p></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657106773221-bc26422b-4932-41d2-87dd-58cbc1e8edc6.jpeg#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=udb39077e&margin=%5Bobject%20Object%5D&name=J%60%5B%7B3BQD7%28%5DH2U%25%5D477FV%607.jpg&originHeight=674&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136596&status=done&style=none&taskId=u6783f499-32a6-4632-96f5-ed5e206d78e&title=" alt="J`[{3BQD7(]H2U%]477FV`7.jpg"></p><ul><li><p>线性探测存在的问题：</p><ul><li><p> 线性探测存在一个比较严重的问题，就是聚集</p></li><li><p>如哈希表中还<strong>没插入任何元素</strong>时，插入<strong>23、24、25、26、27</strong>，这就意味着下标值为<strong>3、4、5、6、7</strong>的位置都放置了数据，这种<strong>一连串填充单元就称为聚集</strong></p></li><li><p>聚集会<strong>影响哈希表的性能</strong>，无论是<strong>插入/查询/删除</strong>都会影响；</p></li><li><p>比如插入32时就会发现，连续的单元3~7都<strong>不允许插入数据</strong>，并且在插入的过程中需要经历多次这种情况。<strong>二次探测法可以解决该问题</strong></p></li></ul></li></ul><h3 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h3><p>我们刚才谈到，<strong>线性探测存在的问题</strong>：就是如果之前的<strong>数据是连续插入</strong>的,，那么<strong>新插入</strong>的一个数据可能需要**探测很长的距离      **</p><ul><li><p>二次探测在<strong>线性探测</strong>的基础上进行了**优化     **</p></li><li><p>二次探测主要<strong>优化的是探测时的步长</strong>      </p><ul><li><p>线性探测, 我们可以看成是步长为1的探测, 比如从下标值x开始, 那么线性测试就是x+1, x+2, x+3依次探测    </p></li><li><p>二次探测, 对<strong>步长做了优化</strong>, 比如从下标值<strong>x</strong>开始, <code>**x+1², x+2², x+3²**</code></p></li><li><p>这样就可以<strong>一次性探测比较长的距离</strong>，以<strong>避免那些聚集带来的影响</strong></p></li></ul></li><li><p>二次探测的问题：  </p></li></ul><p>但是二次探测<strong>依然存在问题</strong>, 比如我们连续插入的是<strong>32-112-82-2-192</strong>, 那么它们依次<strong>累加的时候步长是相同的</strong> </p><p>也就是这种情况下会<strong>造成步长不一的一种聚集</strong>. 还是会影响效率.</p><h3 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h3><p> 为了消除<strong>线性探测</strong>和二次探测中无论<strong>步长+1，</strong>还是<strong>步长+平方</strong>中存在的问题, 还有一种最常用的解决方案: **再哈希法      **</p><ul><li><p><strong>再哈希法</strong>:</p><ul><li><p><strong>二次探测</strong>的算法产生的<strong>探测序列步长是固定的</strong>:** 1, 4, 9, 16**, 依次类推.</p></li><li><p>现在需要一种方法: 产生一种<strong>依赖关键字的探测序列</strong>, 而不是每个关键字都一样.</p></li><li><p>那么, <strong>不同的关键字即使映射到相同的数组下标</strong>, 也可以使用<strong>不同的探测序列</strong>.</p></li><li><p>再哈希法的做法就是: 把<strong>关键字用另外一个哈希函数</strong>, <strong>再做一次哈希化</strong>, 用这次<strong>哈希化的结果作为步长</strong>.</p></li><li><p>对于<strong>指定的关键字</strong>, 步长在整个探测中是不变的, 不过不同的关键字使用不同的步长.</p></li></ul></li><li><p><strong>第二次哈希化</strong>需要具备如下特点:</p><ul><li><p>和<strong>第一个哈希函数不同</strong>. (不要再使用上一次的哈希函数了, 不然结果还是原来的位置)</p></li><li><p>不能<strong>输出为0</strong>(否则, 将没有步长. 每次探测都是原地踏步, 算法就进入了<strong>死循环</strong>)</p></li></ul></li><li><p>其实, 我们不用费脑细胞来设计了, 计算机专家已经设计出一种工作很好的<strong>哈希函数</strong>:</p><ul><li><p><code>stepSize = constant - (key - constant)</code></p></li><li><p>其中<code>constant</code>是<strong>质数</strong>, 且小于数组的容量.</p></li><li><p>例如: <code>stepSize = 5 - (key % 5)</code>, 满足需求, 并且结果不可能为0.  </p></li></ul></li></ul><h3 id="哈希化的效率"><a href="#哈希化的效率" class="headerlink" title="哈希化的效率"></a>哈希化的效率</h3><ul><li><p>哈希表中执行<strong>插入和搜索操作效率是非常高</strong>的。</p><ul><li><p>如果<strong>没有发生冲突</strong>，那么<strong>效率就会更高</strong>；</p></li><li><p>如果<strong>发生冲突</strong>，存取时间就依赖<strong>后来的探测长度</strong>；</p></li><li><p>平均探测长度以及平均存取时间，取决于<strong>装填因子</strong>，随着<strong>装填因子</strong>变<strong>大</strong>，探测<strong>长度会越来越长</strong>。</p></li></ul></li><li><p>理解概念<strong>装填因子</strong>：</p><ul><li><p><strong>装填因子</strong>表示当前哈希表中已经包含的<strong>数据项</strong>和整个<strong>哈希表长度</strong>的<strong>比值</strong>；</p></li><li><p><code>装填因子 = 总数据项 / 哈希表长度</code>；</p></li><li><p><strong>开放地址法</strong>的装填因子<strong>最大为1</strong>，因为只有<strong>空白</strong>的单元才能放入元素；</p></li><li><p><strong>链地址法</strong>的装填因子<strong>可以大于1</strong>，因为只要愿意，拉链法可以<strong>无限延伸</strong>下去；</p></li></ul></li></ul><h2 id="4-5-不同探测方式性能的比较"><a href="#4-5-不同探测方式性能的比较" class="headerlink" title="4.5 不同探测方式性能的比较"></a>4.5 不同探测方式性能的比较</h2><h3 id="线性探测："><a href="#线性探测：" class="headerlink" title="线性探测："></a>线性探测：</h3><p>可以看到，随着装填因子的增大，平均<strong>探测长度</strong>呈<strong>指数形式增长</strong>，<strong>性能较差</strong>。实际情况中，最好的装填因子取决于存储效率和速度之间的平衡，随着装填因子变小，存储效率下降，而速度上升。   </p><p>![LZ3Z]KT@(3]KL3<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657110408161-04d3a18f-5033-439d-a58d-4e687b50d3d6.jpeg#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=527&id=u27ddcb69&margin=%5Bobject%20Object%5D&name=LZ3Z%5DKT%40%283%5DKL3%5B~4MU%28TWD.jpg&originHeight=447&originWidth=301&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47497&status=done&style=none&taskId=ubf9a1ff6-5bda-47c8-adb5-e40d03514d6&title=&width=355">~4MU(TWD.jpg</a></p><h3 id="二次探测和再哈希化的性能："><a href="#二次探测和再哈希化的性能：" class="headerlink" title="二次探测和再哈希化的性能："></a>二次探测和再哈希化的性能：</h3><p>二次探测和再哈希法性能相当，它们的性能比线性探测略好。由下图可知，随着装填因子的变大，平均探测长度呈指数形式增长，需要探测的次数也呈指数形式增长，性能不高。   </p><p>![)$LOM(S3}M]@A)L{GE`W)E0.jpg](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657110472073-43b83312-985a-4686-bd35-c48373e13712.jpeg#clientId=u55012966-7d50-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=531&amp;id=u4662d0ec&amp;margin=%5Bobject%20Object%5D&amp;name=%29%24LOM%28S3%7DM%5D%40A%29L%7BGE%60W%29E0.jpg&amp;originHeight=448&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47854&amp;status=done&amp;style=none&amp;taskId=u556ae406-6005-4c17-86b0-b161b47f0f5&amp;title=&amp;width=378">https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657110472073-43b83312-985a-4686-bd35-c48373e13712.jpeg#clientId=u55012966-7d50-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;height=531&amp;id=u4662d0ec&amp;margin=%5Bobject%20Object%5D&amp;name=%29%24LOM%28S3%7DM%5D%40A%29L%7BGE%60W%29E0.jpg&amp;originHeight=448&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47854&amp;status=done&amp;style=none&amp;taskId=u556ae406-6005-4c17-86b0-b161b47f0f5&amp;title=&amp;width=378</a>)</p><h3 id="链地址法的性能："><a href="#链地址法的性能：" class="headerlink" title="链地址法的性能："></a>链地址法的性能：</h3><p>可以看到随着装填因子的增加，平均探测长度呈线性增长，较为平缓。在开发中使用链地址法较多，比如Java中的HashMap中使用的就是链地址法。   </p><p>![$8ESA$4T1)I<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1657110519339-efc85e3c-1449-4dc6-904d-6867ed4e782a.jpeg#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=375&id=u7ffb6f85&margin=%5Bobject%20Object%5D&name=%248ESA%244T1%29I%5BCZI7XQF%40%29%7BS.jpg&originHeight=328&originWidth=423&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36949&status=done&style=none&taskId=ua5544ae8-8ee8-484b-8006-ad0aaa87248&title=&width=483">CZI7XQF@){S.jpg</a></p><h2 id="4-6-优秀的哈希函数"><a href="#4-6-优秀的哈希函数" class="headerlink" title="4.6 优秀的哈希函数"></a>4.6 优秀的哈希函数</h2><ul><li><p>好的哈希函数应该尽可能让计算的过程变得<strong>简单，提高计算的效率</strong>.</p><ul><li><p>哈希表的主要优点是它的<strong>速度</strong>，所以在速度上不能满足，那么就达不到设计的目的了.</p></li><li><p>提高速度的一个办法就是让哈希函数中<strong>尽量少的有乘法和除法</strong>.因为它们的<strong>性能是比较低</strong>的.</p></li></ul></li><li><p>设计好的哈希函数应该具备哪些优点呢?</p><ul><li><p><strong>快速的计算</strong></p><ul><li>哈希表的优势就在于<strong>效率,所以快速获取到对应的hashCode</strong>非常重要.</li><li>我们需要通过<strong>快速的计算来获取到元素对应的hashCode</strong></li></ul></li><li><p><strong>均匀的分布</strong></p><ul><li>哈希表中，无论是链地址法还是开放地址法，当<strong>多个元素映射到同一个位置的时候，都会影响效率.</strong></li><li>所以，优秀的哈希函数应该尽可能<strong>将元素映射到不同的位置,让元素在哈希表中均匀的分布.</strong></li></ul></li></ul></li></ul><h2 id="4-7-初步封装哈希表"><a href="#4-7-初步封装哈希表" class="headerlink" title="4.7 初步封装哈希表"></a>4.7 初步封装哈希表</h2><h3 id="哈希表常见的操作"><a href="#哈希表常见的操作" class="headerlink" title="哈希表常见的操作"></a>哈希表常见的操作</h3><ul><li><p><code>put（key，value）</code>：插入或修改操作；</p></li><li><p><code>get（key）</code>：获取哈希表中特定位置的元素；</p></li><li><p><code>remove（key）</code>：删除哈希表中特定位置的元素；</p></li><li><p><code>isEmpty（）</code>：如果哈希表中不包含任何元素，返回trun，如果哈希表长度大于0则返回false；</p></li><li><p><code>size（）</code>：返回哈希表包含的元素个数；</p></li><li><p><code>resize（value）</code>：对哈希表进行扩容操作；</p></li></ul><h3 id="哈希函数的简单实现"><a href="#哈希函数的简单实现" class="headerlink" title="哈希函数的简单实现"></a>哈希函数的简单实现</h3><p> 首先使用<strong>霍纳法则计算hashCode</strong>的值，通过<strong>取余操作实现哈希化</strong>，此处先简单地指定数组的大小。    </p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设计哈希函数</span></span><br><span class="line"><span class="comment">//1.将字符串转成比较大的数字：hashCode</span></span><br><span class="line"><span class="comment">//2.将大的数字hashCode压缩到数组范围之内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashFunc</span>(<span class="params">str, size</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//定义hashCode变量</span></span><br><span class="line">  <span class="keyword">let</span> hashCode = <span class="number">0</span></span><br><span class="line">  <span class="comment">//霍纳法则，计算hashCode的值</span></span><br><span class="line">  <span class="comment">//cats -&gt; unicode变量</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="comment">//str.charCodeAt(1),获取某个字符对应的unicode编码</span></span><br><span class="line">    hashCode = <span class="number">37</span> * hashCode + str.charCodeAt(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//取余操作</span></span><br><span class="line">  <span class="keyword">let</span> index = hashCode % size</span><br><span class="line">  <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试哈希函数</span></span><br><span class="line"><span class="built_in">console</span>.log(hashFunc(<span class="string">&#x27;123&#x27;</span>, <span class="number">7</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashFunc(<span class="string">&#x27;NBA&#x27;</span>, <span class="number">7</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashFunc(<span class="string">&#x27;CBA&#x27;</span>, <span class="number">7</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashFunc(<span class="string">&#x27;CMF&#x27;</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657113879563-e1a7b759-fa5d-4ee1-8b7a-d82117eced67.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=360&id=u8ebb2871&margin=%5Bobject%20Object%5D&name=image.png&originHeight=139&originWidth=98&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1025&status=done&style=none&taskId=u1c03eaeb-3ff4-4f05-a897-a82536e6a98&title=&width=254" alt="image.png"></p><h3 id="创建哈希表"><a href="#创建哈希表" class="headerlink" title="创建哈希表"></a>创建哈希表</h3><p>![PL@<a href="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657114091119-55c5feae-3e89-4f50-8ae5-af01e155e35b.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u266cdb67&margin=%5Bobject%20Object%5D&name=PL%40%5BD5XZ%29ZW3RJDPHHEDAZU.png&originHeight=331&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25023&status=done&style=none&taskId=u63bfd53c-e417-4a89-8152-d8b68d46b8a&title=">D5XZ)ZW3RJDPHHEDAZU.png</a></p><p> 首先创建哈希表类HashTable，并添加必要的属性和上面实现的哈希函数，再进行其他方法的实现。     </p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = []</span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span><span class="comment">//计算已经存储的元素个数</span></span><br><span class="line">  <span class="comment">//装填因子：loadFactor &gt; 0.75时需要扩容 ，loadFactor &lt; 0.25 时需要减少容量</span></span><br><span class="line">  <span class="built_in">this</span>.limit = <span class="number">7</span><span class="comment">//初始长度</span></span><br><span class="line"></span><br><span class="line">  HashTable.prototype.hashFunc = <span class="function">(<span class="params">str, size</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义hashCode变量</span></span><br><span class="line">    <span class="keyword">let</span> hashCode = <span class="number">0</span></span><br><span class="line">    <span class="comment">//霍纳法则，计算hashCode的值</span></span><br><span class="line">    <span class="comment">//cats -&gt; unicode变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="comment">//str.charCodeAt(1),获取某个字符对应的unicode编码</span></span><br><span class="line">      hashCode = <span class="number">37</span> * hashCode + str.charCodeAt(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//取余操作</span></span><br><span class="line">  <span class="keyword">let</span> index = hashCode % size</span><br><span class="line">  <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>storage</strong>作为我们的<strong>数组</strong>, 数组中存放相关的元素.</p></li><li><p><strong>count</strong>表示当前已经<strong>存在了多少数据</strong>.</p></li><li><p><strong>limit</strong>用于标记数组中<strong>一共可以存放多少个元素</strong>.</p></li><li><p>另外, 我们直接将哈希函数定义在了<strong>HashTable</strong>中.  </p></li></ul><h3 id="put-key-value"><a href="#put-key-value" class="headerlink" title="put(key,value)"></a>put(key,value)</h3><p> 哈希表的<strong>插入和修改</strong>操作是<strong>同一个函数</strong>：因为，当使用者传入一个&lt;key，value&gt;时。<br>如果原来<strong>不存在该key</strong>，那么就是<strong>插入</strong>操作，如果原来已经<strong>存在该key</strong>，那么就是<strong>修改</strong>操作。     </p><p>实现思路：</p><ul><li><p>首先，根据<strong>key获取索引值index</strong>，目的为将数据插入到<strong>storage</strong>的对应位置；</p></li><li><p>然后，根据索引值取出<strong>bucket</strong>，如果bucket不存在，先<strong>创建bucket</strong>，随后放置在该索引值的位置；</p></li><li><p>接着，<strong>判断新增还是修改原来的值</strong>。如果<strong>已经有值了，就修改该值；如果没有，就执行后续操作</strong>。</p></li><li><p>最后，进行<strong>新增数据操作</strong>。</p></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = []<span class="comment">//数组, 数组中存放相关的元素.</span></span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span><span class="comment">//计算已经存储的元素个数</span></span><br><span class="line">  <span class="comment">//装填因子：loadFactor &gt; 0.75时需要扩容 ，loadFactor &lt; 0.25 时需要减少容量</span></span><br><span class="line">  <span class="built_in">this</span>.limit = <span class="number">7</span><span class="comment">//初始长度</span></span><br><span class="line"></span><br><span class="line">  HashTable.prototype.hashFunc = <span class="function">(<span class="params">str, size</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义hashCode变量</span></span><br><span class="line">    <span class="keyword">let</span> hashCode = <span class="number">0</span></span><br><span class="line">    <span class="comment">//霍纳法则，计算hashCode的值</span></span><br><span class="line">    <span class="comment">//cats -&gt; unicode变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="comment">//str.charCodeAt(1),获取某个字符对应的unicode编码</span></span><br><span class="line">      hashCode = <span class="number">37</span> * hashCode + str.charCodeAt(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取余操作</span></span><br><span class="line">    <span class="keyword">let</span> index = hashCode % size</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  HashTable.prototype.put = <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key, <span class="built_in">this</span>.limit)</span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) &#123;</span><br><span class="line">      bucket = []</span><br><span class="line">      <span class="built_in">this</span>.storage[index] = bucket</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;<span class="comment">//修改</span></span><br><span class="line">        tuple[<span class="number">1</span>] = value</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bucket.push([key, value])<span class="comment">//添加</span></span><br><span class="line">    <span class="built_in">this</span>.count += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试哈希表</span></span><br><span class="line"><span class="comment">//1.创建哈希表</span></span><br><span class="line"><span class="keyword">let</span> ht = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">ht.put(<span class="string">&#x27;class1&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class2&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class3&#x27;</span>, <span class="string">&#x27;Gogo&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class4&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class4&#x27;</span>, <span class="string">&#x27;Vibi&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ht);</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657120954472-0ddaf877-0ea6-4786-8a50-ff15edf3c1d0.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=459&id=u184d0ccc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=586&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43223&status=done&style=none&taskId=u81dcd44c-7b27-4aa2-9a62-98d0beea3e2&title=&width=483" alt="image.png"></p><h3 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h3><p>实现思路：</p><ul><li><p> 首先，根据key通过<strong>哈希函数</strong>获取它在<strong>storage中对应的索引值index</strong>；</p></li><li><p>然后，根据<strong>索引值</strong>获取对应的<strong>bucket</strong>；</p></li><li><p>接着，判断获取到的bucket是否为null，如果<strong>为null，直接返回null</strong>；</p></li><li><p>随后，线性<strong>遍历bucket中每一个key</strong>是否等于<strong>传入的key</strong>。如果等于，直接<strong>返回对应的value</strong>；</p></li><li><p>最后，遍历完bucket后，仍然没有找到对应的key，直接<strong>return null</strong>即可。</p></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HashTable.prototype.get = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key,<span class="built_in">this</span>.limit)</span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">  <span class="keyword">if</span>(bucket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">      <span class="keyword">if</span>(tuple[<span class="number">0</span>] == key)&#123;</span><br><span class="line">        <span class="keyword">return</span> tuple[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>,ht.get(<span class="string">&#x27;class2&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>,ht.get(<span class="string">&#x27;class4&#x27;</span>))</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657121401945-c2456018-dbbc-4a25-9319-3595db5e8842.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=373&id=u13aecc18&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48621&status=done&style=none&taskId=u06080713-1faf-444c-b732-423fedcff96&title=&width=485" alt="image.png"></p><h3 id="remove-key"><a href="#remove-key" class="headerlink" title="remove(key)"></a>remove(key)</h3><p>实现思路：</p><ul><li><p> 首先，根据<strong>key</strong>通过<strong>哈希函数</strong>获取它在storage中对应的索引值<strong>index</strong>；</p></li><li><p>然后，根据<strong>索引值</strong>获取对应的<strong>bucket</strong>；</p></li><li><p>接着，判断获取到的<strong>bucket</strong>是否为<strong>null</strong>，如果为<strong>null</strong>，直接<strong>返回null</strong>；</p></li><li><p>随后，<strong>线性查找bucket</strong>，寻找对应的<strong>数据</strong>，并且<strong>删除</strong>；</p></li><li><p>最后，依然<strong>没有</strong>找到，<strong>返回null</strong>；</p></li></ul><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HashTable.prototype.remove = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key, <span class="built_in">this</span>.limit)</span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">  <span class="keyword">if</span> (bucket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">    <span class="keyword">if</span> (tuple[i] == key) &#123;</span><br><span class="line">      bucket.splice(i, <span class="number">1</span>)</span><br><span class="line">      <span class="built_in">this</span>.count -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> tuple[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;remove&#x27;</span>, ht.remove(<span class="string">&#x27;class2&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;remove&#x27;</span>, ht.remove(<span class="string">&#x27;class4&#x27;</span>))</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657122072121-da6fa800-d39f-45e0-aba9-85078a7ab406.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=340&id=ue03a862e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=689&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36918&status=done&style=none&taskId=u41af5bab-5e5d-4296-acb7-30ab0654057&title=&width=549.5" alt="image.png"></p><h3 id="isEmpty-与-size"><a href="#isEmpty-与-size" class="headerlink" title="isEmpty() 与 size()"></a>isEmpty() 与 size()</h3><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HashTable.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">HashTable.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ht.isEmpty());</span><br><span class="line"><span class="built_in">console</span>.log(ht.size());</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657122241654-119cfef1-c5ff-4bd0-aaec-fbda03cd5b08.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=96&id=u7671b950&margin=%5Bobject%20Object%5D&name=image.png&originHeight=60&originWidth=139&originalType=binary&ratio=1&rotation=0&showTitle=false&size=838&status=done&style=none&taskId=u4ba22e6f-8dc9-42b5-9457-21352037855&title=&width=222.5" alt="image.png"></p><h2 id="4-8-哈希表的扩容"><a href="#4-8-哈希表的扩容" class="headerlink" title="4.8 哈希表的扩容"></a>4.8 哈希表的扩容</h2><h3 id="扩容与压缩"><a href="#扩容与压缩" class="headerlink" title="扩容与压缩"></a>扩容与压缩</h3><ul><li><p>为什么需要扩容？</p><ul><li><p> 前面我们在哈希表中使用的是长度为7的数组，由于使用的是<strong>链地址法</strong>，<strong>装填因子(loadFactor)可以大于1</strong>，所以这个哈希表可以<strong>无限制地插入新数据</strong>。</p></li><li><p>但是，随着数据量的增多，<strong>storage</strong>中每一个<strong>index</strong>对应的<strong>bucket</strong>数组（链表）就会<strong>越来越长</strong>，这就会造成哈希表<strong>效率的降低</strong></p></li></ul></li><li><p>什么情况下需要扩容？</p><ul><li> 常见的情况是l<strong>oadFactor &gt; 0.75</strong>的时候进行<strong>扩容</strong>；</li></ul></li><li><p>如何进行扩容？</p><ul><li><p> 简单的扩容可以<strong>直接扩大两倍</strong>（关于质数，之后讨论）；</p></li><li><p>扩容之后<strong>所有</strong>的<strong>数据项</strong>都要进行<strong>同步修改</strong>；</p></li></ul></li><li><p>实现思路</p><ul><li><p> 首先，定义一个变量，比如<strong>oldStorage</strong>指向原来的<strong>storage</strong>；</p></li><li><p>然后，<strong>创建一个新的容量更大的数组</strong>，让<strong>this.storage</strong>指向它；</p></li><li><p>最后，将<strong>oldStorage</strong>中的每一个<strong>bucket</strong>中的每一个数据取出来依次<strong>添加</strong>到<strong>this.storage指向的新数组</strong>中；</p></li></ul></li><li><p>代码实现</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HashTable.prototype.resize = <span class="function"><span class="params">newLimit</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> oldStorage = <span class="built_in">this</span>.storage</span><br><span class="line">  <span class="comment">//重置所有的属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = []</span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">  <span class="built_in">this</span>.limit = newLimit</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldStorage.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucket = oldStorage[i]</span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> tuple = bucket[j]</span><br><span class="line">      <span class="built_in">this</span>.put(tuple[<span class="number">0</span>], tuple[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述定义的哈希表的<strong>resize</strong>方法，既可以实现哈希表的<strong>扩容</strong>，也可以实现哈希表容量的<strong>压缩</strong>。</p><blockquote><p><strong>装填因子 = 哈希表中数据 / 哈希表长度</strong>，即 <strong>loadFactor = count / HashTable.length。</strong></p></blockquote><ul><li>通常情况下当装填因子<code>laodFactor &gt; 0.75</code>时，对哈希表进行<strong>扩容</strong>。在哈希表中的添加方法（<strong>push</strong>方法）中添加如下代码，判断是否需要调用扩容函数进行扩容：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容操作</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.count &gt; <span class="built_in">this</span>.limit * <span class="number">0.75</span>)&#123;</span><br><span class="line"><span class="built_in">this</span>.resize(<span class="built_in">this</span>.limit * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当装填因子<code>laodFactor &lt; 0.25</code>时，对哈希表容量进行<strong>压缩</strong>。在哈希表中的删除方法（<strong>remove</strong>方法）中添加如下代码，判断是否需要调用扩容函数进行压缩：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缩小容量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count &lt; <span class="built_in">this</span>.limit * <span class="number">0.25</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.resize(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择质数作为容量"><a href="#选择质数作为容量" class="headerlink" title="选择质数作为容量"></a>选择质数作为容量</h3><h4 id="质数的判断"><a href="#质数的判断" class="headerlink" title="质数的判断"></a>质数的判断</h4><ul><li> 方法一：针对质数的特点：只能被1和num整除，不能被2 ~ (num-1)整除。遍历2 ~ (num-1) 。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= num - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(num % i ==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 方法二：只需要遍历2 ~ num的平方根即可。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1.获取num的平方根:Math.sqrt(num)</span></span><br><span class="line">  <span class="comment">//2.循环判断</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i&lt;= <span class="built_in">Math</span>.sqrt(num); i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现扩容后的哈希表容量为质数"><a href="#实现扩容后的哈希表容量为质数" class="headerlink" title="实现扩容后的哈希表容量为质数"></a>实现扩容后的哈希表容量为质数</h4><ul><li><p>实现思路：</p><ul><li>2倍扩容之后，通过循环调用<strong>isPrime</strong>判断得到的容量是否为<strong>质数</strong>，不是则+1，直到是为止。比如原长度：7，2倍扩容后长度为14，14不是质数，14 + 1 = 15不是质数，15 + 1 = 16不是质数，16 + 1 = 17是质数，停止循环，由此得到<strong>质数17</strong>。    </li></ul></li><li><p>代码实现：</p><ul><li>第一步：首先需要为<strong>HashTable</strong>类添加判断质数的<strong>isPrime</strong>方法和获取质数的<strong>getPrime</strong>方法：  </li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断传入的num是否质数</span></span><br><span class="line">HashTable.prototype.isPrime = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1.获取num的平方根:Math.sqrt(num)</span></span><br><span class="line">  <span class="comment">//2.循环判断</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i&lt;= <span class="built_in">Math</span>.sqrt(num); i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取质数的方法</span></span><br><span class="line">HashTable.prototype.getPrime = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//7*2=14,+1=15,+1=16,+1=17(质数)</span></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">this</span>.isPrime(num)) &#123;</span><br><span class="line">    num++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第二步：修改添加元素的<strong>put</strong>方法和删除元素的<strong>remove</strong>方法中关于数组扩容的相关操作</p><ul><li>  在<strong>put</strong>方法中添加如下代码：</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容操作</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.count &gt; <span class="built_in">this</span>.limit * <span class="number">0.75</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> newSize = <span class="built_in">this</span>.limit * <span class="number">2</span></span><br><span class="line">  <span class="keyword">let</span> newPrime = <span class="built_in">this</span>.getPrime(newSize)</span><br><span class="line">  <span class="built_in">this</span>.resize(newPrime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  -  在**remove**方法中添加如下代码：</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缩小容量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count &lt; <span class="built_in">this</span>.limit * <span class="number">0.25</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newSize = <span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> newPrime = <span class="built_in">this</span>.getPrime(newSize)</span><br><span class="line">  <span class="built_in">this</span>.resize(newPrime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ht = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line">ht.put(<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;Mary&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class3&#x27;</span>,<span class="string">&#x27;Gogo&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class4&#x27;</span>,<span class="string">&#x27;Tony&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class5&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class6&#x27;</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class7&#x27;</span>,<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class8&#x27;</span>,<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class9&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class10&#x27;</span>,<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ht.size());<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(ht.limit);<span class="comment">//17</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657124388825-e827bea5-79b0-41f7-a410-7e6feb376112.png#clientId=u55012966-7d50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=278&id=ub8a1003e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=125&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1479&status=done&style=none&taskId=u133a0cc8-cd3a-41a1-98c7-9f4b6222a3a&title=&width=381.5" alt="image.png"></p><h2 id="4-9-哈希表的完整实现"><a href="#4-9-哈希表的完整实现" class="headerlink" title="4.9 哈希表的完整实现"></a>4.9 哈希表的完整实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = []<span class="comment">//数组, 数组中存放相关的元素.</span></span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span><span class="comment">//计算已经存储的元素个数</span></span><br><span class="line">  <span class="comment">//装填因子：loadFactor &gt; 0.75时需要扩容 ，loadFactor &lt; 0.25 时需要减少容量</span></span><br><span class="line">  <span class="built_in">this</span>.limit = <span class="number">7</span><span class="comment">//初始长度</span></span><br><span class="line"></span><br><span class="line">  HashTable.prototype.hashFunc = <span class="function">(<span class="params">str, size</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义hashCode变量</span></span><br><span class="line">    <span class="keyword">let</span> hashCode = <span class="number">0</span></span><br><span class="line">    <span class="comment">//霍纳法则，计算hashCode的值</span></span><br><span class="line">    <span class="comment">//cats -&gt; unicode变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="comment">//str.charCodeAt(1),获取某个字符对应的unicode编码</span></span><br><span class="line">      hashCode = <span class="number">37</span> * hashCode + str.charCodeAt(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取余操作</span></span><br><span class="line">    <span class="keyword">let</span> index = hashCode % size</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  HashTable.prototype.put = <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key, <span class="built_in">this</span>.limit)</span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) &#123;</span><br><span class="line">      bucket = []</span><br><span class="line">      <span class="built_in">this</span>.storage[index] = bucket</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;<span class="comment">//修改</span></span><br><span class="line">        tuple[<span class="number">1</span>] = value</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bucket.push([key, value])<span class="comment">//添加</span></span><br><span class="line">    <span class="built_in">this</span>.count += <span class="number">1</span></span><br><span class="line">    <span class="comment">//判断是否需要扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.count &gt; <span class="built_in">this</span>.limit * <span class="number">0.75</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> newSize = <span class="built_in">this</span>.limit * <span class="number">2</span></span><br><span class="line">      <span class="keyword">let</span> newPrime = <span class="built_in">this</span>.getPrime(newSize)</span><br><span class="line">      <span class="built_in">this</span>.resize(newPrime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  HashTable.prototype.get = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key, <span class="built_in">this</span>.limit)</span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">        <span class="keyword">if</span> (tuple[<span class="number">0</span>] == key) &#123;</span><br><span class="line">          <span class="keyword">return</span> tuple[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  HashTable.prototype.remove = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key, <span class="built_in">this</span>.limit)</span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index]</span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]</span><br><span class="line">      <span class="keyword">if</span> (tuple[i] == key) &#123;</span><br><span class="line">        bucket.splice(i, <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">this</span>.count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> tuple[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缩小容量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count &lt; <span class="built_in">this</span>.limit * <span class="number">0.25</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> newSize = <span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">let</span> newPrime = <span class="built_in">this</span>.getPrime(newSize)</span><br><span class="line">      <span class="built_in">this</span>.resize(newPrime)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断哈希表是否为null</span></span><br><span class="line">  HashTable.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取哈希表中元素的个数</span></span><br><span class="line">  HashTable.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count</span><br><span class="line">  &#125;</span><br><span class="line">  HashTable.prototype.resize = <span class="function"><span class="params">newLimit</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> oldStorage = <span class="built_in">this</span>.storage</span><br><span class="line">    <span class="comment">//重置所有的属性</span></span><br><span class="line">    <span class="built_in">this</span>.storage = []</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.limit = newLimit</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldStorage.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> bucket = oldStorage[i]</span><br><span class="line">      <span class="keyword">if</span> (bucket == <span class="literal">null</span>) <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">        <span class="keyword">const</span> tuple = bucket[j]</span><br><span class="line">        <span class="built_in">this</span>.put(tuple[<span class="number">0</span>], tuple[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断传入的num是否质数</span></span><br><span class="line">  HashTable.prototype.isPrime = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.获取num的平方根:Math.sqrt(num)</span></span><br><span class="line">    <span class="comment">//2.循环判断</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(num); i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取质数的方法</span></span><br><span class="line">  HashTable.prototype.getPrime = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//7*2=14,+1=15,+1=16,+1=17(质数)</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">this</span>.isPrime(num)) &#123;</span><br><span class="line">      num++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试哈希表</span></span><br><span class="line"><span class="comment">//1.创建哈希表</span></span><br><span class="line"><span class="keyword">let</span> ht = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line"><span class="comment">/*     ht.put(&#x27;class1&#x27;, &#x27;Tom&#x27;)</span></span><br><span class="line"><span class="comment">        ht.put(&#x27;class2&#x27;, &#x27;Mary&#x27;)</span></span><br><span class="line"><span class="comment">        ht.put(&#x27;class3&#x27;, &#x27;Gogo&#x27;)</span></span><br><span class="line"><span class="comment">        ht.put(&#x27;class4&#x27;, &#x27;Tony&#x27;)</span></span><br><span class="line"><span class="comment">        ht.put(&#x27;class4&#x27;, &#x27;Vibi&#x27;)</span></span><br><span class="line"><span class="comment">        console.log(ht);</span></span><br><span class="line"><span class="comment">        console.log(&#x27;get&#x27;, ht.get(&#x27;class2&#x27;))</span></span><br><span class="line"><span class="comment">        console.log(&#x27;get&#x27;, ht.get(&#x27;class4&#x27;))</span></span><br><span class="line"><span class="comment">        console.log(&#x27;remove&#x27;, ht.remove(&#x27;class2&#x27;))</span></span><br><span class="line"><span class="comment">        console.log(&#x27;remove&#x27;, ht.remove(&#x27;class4&#x27;))</span></span><br><span class="line"><span class="comment">        console.log(ht.isEmpty());</span></span><br><span class="line"><span class="comment">        console.log(ht.size());</span></span><br><span class="line"><span class="comment">        let ht = new HashTable() */</span></span><br><span class="line"></span><br><span class="line">ht.put(<span class="string">&#x27;class1&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class2&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class3&#x27;</span>, <span class="string">&#x27;Gogo&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class4&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class5&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class6&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class7&#x27;</span>, <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class8&#x27;</span>, <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class9&#x27;</span>, <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">ht.put(<span class="string">&#x27;class10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ht.size());<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(ht.limit);<span class="comment">//17</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、集合与字典</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、集合与字典"><a href="#三、集合与字典" class="headerlink" title="三、集合与字典"></a>三、集合与字典</h1><h2 id="3-1-集合结构"><a href="#3-1-集合结构" class="headerlink" title="3.1 集合结构"></a>3.1 集合结构</h2><h3 id="3-1-1-集合简介"><a href="#3-1-1-集合简介" class="headerlink" title="3.1.1 集合简介"></a>3.1.1 集合简介</h3><p> 集合比较常见的实现方式是<strong>哈希表</strong>，这里使用JavaScript的<strong>Object类</strong>进行封装。<br>集合通常是由一组<strong>无序的、不能重复</strong>的元素构成。<br>数学中常指的集合中的元素是可以重复的，但是<strong>计算机中集合的元素不能重复</strong>。   </p><h4 id="集合是特殊的数组"><a href="#集合是特殊的数组" class="headerlink" title="集合是特殊的数组"></a>集合是特殊的数组</h4><ul><li> 特殊之处在于里面的元素<strong>没有顺序，也不能重复</strong>。 </li><li>没有顺序意味着<strong>不能通过下标值进行访问</strong>，不能重复意味着<strong>相同的对象在集合中只会存在一份</strong>。</li></ul><h4 id="实现集合类"><a href="#实现集合类" class="headerlink" title="实现集合类"></a>实现集合类</h4><ul><li> 在ES6中的<strong>Set类</strong>就是一个集合类，这里我们重新封装一个Set类，了解集合的底层实现。  </li><li>JavaScript中的<strong>Object类中的key</strong>就是一个集合，可以使用它来<strong>封装集合类Set</strong>。  </li></ul><h4 id="集合常见的操作"><a href="#集合常见的操作" class="headerlink" title="集合常见的操作"></a>集合常见的操作</h4><ul><li> <code>add（value）</code>：向集合添加一个新的项；</li><li><code>remove（value）</code>：从集合中移除一个值；</li><li><code>has（value）</code>：如果值在集合中，返回true，否则返回false；</li><li><code>clear（）</code>：移除集合中的所有项；</li><li><code>size（）</code>：返回集合所包含元素的数量，与数组的length属性相似；</li><li><code>values（）</code>：返回一个包含集合中所有值的数组；</li></ul><h3 id="3-1-2-代码实现"><a href="#3-1-2-代码实现" class="headerlink" title="3.1.2 代码实现"></a>3.1.2 代码实现</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">  <span class="comment">//has（value）：如果值在集合中，返回true，否则返回false；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.has = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//add（value）：向集合添加一个新的项；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.add = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="built_in">this</span>.items[value] = value</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//remove（value）：从集合中移除一个值；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.remove = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[value]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//clear（）：移除集合中的所有项；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size（）：返回集合所包含元素的数量，与数组的length属性相似；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//values（）：返回一个包含集合中所有值的数组；</span></span><br><span class="line">  <span class="built_in">Set</span>.prototype.values = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试集合类</span></span><br><span class="line"><span class="comment">//1.创建Set类对象</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="comment">//2.测试add方法</span></span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line"><span class="comment">//3.测试values方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.values()&#x27;</span>,set.values());</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="comment">//4.测试remove方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.remove(a)&#x27;</span>,set.remove(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.remove(a)&#x27;</span>,set.remove(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.values()&#x27;</span>,set.values());</span><br><span class="line"><span class="comment">//5.测试has方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.has(b)&#x27;</span>,set.has(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="comment">//6.测试size方法和clear方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.size()&#x27;</span>,set.size());</span><br><span class="line">set.clear()</span><br><span class="line"><span class="comment">// 由于clear方法的实现原理为指向另外一个空对象，所以不影响原来的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.size()&#x27;</span>,set.size());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set.values()&#x27;</span>,set.values());</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657074038906-7e221d84-c71e-40d4-bb27-393dad98f1ce.png#clientId=ufed64531-909e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=381&id=u1c8393d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=447&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19048&status=done&style=none&taskId=ua8233840-02ab-4202-b48f-24479e57a82&title=&width=427.5" alt="image.png"></p><h3 id="3-1-3-集合间操作"><a href="#3-1-3-集合间操作" class="headerlink" title="3.1.3 集合间操作"></a>3.1.3 集合间操作</h3><h4 id="集合间操作"><a href="#集合间操作" class="headerlink" title="集合间操作"></a>集合间操作</h4><ul><li><strong>并集</strong>：对于给定的两个集合，返回一个<strong>包含两个集合中所有元素</strong>的新集合</li><li><strong>交集</strong>：对于给定的两个集合，返回一个<strong>包含两个集合中共有元素</strong>的新集合</li><li><strong>差集</strong>：对于给定的两个集合，返回一个<strong>包含所有存在于第一个集合，且不存在于第二个集合的元素</strong>的新集合</li><li><strong>子集</strong>：验证一个给定集合，<strong>是否是另一个集合的子集</strong></li></ul><h4 id="并集的实现"><a href="#并集的实现" class="headerlink" title="并集的实现"></a>并集的实现</h4><p>实现思路：创建集合<code>C</code>，代表集合<code>A</code>和集合<code>B</code>的并集，先将集合<code>A</code>中的所有元素添加到集合<code>C</code>中，再遍历集合<code>B</code>，如果是集合<code>C</code>所没有的元素，就把它添加到集合<code>C</code>中。     </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.union = <span class="function"><span class="params">otherSet</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this:集合对象A</span></span><br><span class="line">  <span class="comment">// otherSet:集合对象B</span></span><br><span class="line">  <span class="comment">//1.创建一个新的集合</span></span><br><span class="line">  <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.将A集合中的所有元素添加到新集合中</span></span><br><span class="line">  <span class="keyword">let</span> values = <span class="built_in">this</span>.values()</span><br><span class="line">  <span class="comment">// for(let i of values)&#123;</span></span><br><span class="line">  <span class="comment">//   unionSet.add(i)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">    unionSet.add(values[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.取出B集合中的元素,判断是否需要加到新集合中</span></span><br><span class="line">  values = otherSet.values()</span><br><span class="line">  <span class="comment">// for(let i of values)&#123;</span></span><br><span class="line">  <span class="comment">//   //由于集合的add方法已经对重复的元素进行了判断,所以这里可以直接添加</span></span><br><span class="line">  <span class="comment">//   unionSet.add(i)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">    unionSet.add(values[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> unionSet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交集的实现"><a href="#交集的实现" class="headerlink" title="交集的实现"></a>交集的实现</h4><p>实现思路： 遍历集合<code>A</code>，当取得的元素也存在于集合<code>B</code>时，就把该元素添加到另一个集合<code>C</code>中。          </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.intersection = <span class="function"><span class="params">otherSet</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this:集合A</span></span><br><span class="line">  <span class="comment">// otherSet:集合B</span></span><br><span class="line">  <span class="comment">//1.创建新的集合</span></span><br><span class="line">  <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.从A中取出一个元素，判断是否同时存在于集合B中，是则放入新集合中</span></span><br><span class="line">  <span class="keyword">let</span> values = <span class="built_in">this</span>.values()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span> ; i &lt; values.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> item = values[i]</span><br><span class="line">    <span class="keyword">if</span> (otherSet.has(item)) &#123;</span><br><span class="line">      intersectionSet.add(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intersectionSet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差集的实现"><a href="#差集的实现" class="headerlink" title="差集的实现"></a>差集的实现</h4><p>实现思路： 遍历集合<code>A</code>，当取得的元素不存在于集合<code>B</code>时，就把该元素添加到另一个集合<code>C</code>中。       </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.diffrence = <span class="function"><span class="params">otherSet</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//this:集合A</span></span><br><span class="line">  <span class="comment">//otherSet:集合B</span></span><br><span class="line">  <span class="comment">//1.创建新的集合</span></span><br><span class="line">  <span class="keyword">var</span> diffrenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.取出A集合中的每一个元素，判断是否同时存在于B中，不存在则添加到新集合中</span></span><br><span class="line">  <span class="keyword">var</span> values = <span class="built_in">this</span>.values()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; values.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> item = values[i]</span><br><span class="line">    <span class="keyword">if</span> (!otherSet.has(item)) &#123;</span><br><span class="line">      diffrenceSet.add(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> diffrenceSet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子集的实现"><a href="#子集的实现" class="headerlink" title="子集的实现"></a>子集的实现</h4><p>实现思路： 遍历集合<code>A</code>，当取得的元素中有一个不存在于集合<code>B</code>时，就说明集合<code>A</code>不是集合<code>B</code>的子集，返回<strong>false</strong>。      </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.subset = <span class="function"><span class="params">otherSet</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//this:集合A</span></span><br><span class="line">  <span class="comment">//otherSet：集合B</span></span><br><span class="line">  <span class="comment">//遍历集合A中的所有元素，如果发现，集合A中的元素，在集合B中不存在，那么放回false，如果遍历完整个集合A没有返回false，就返回true</span></span><br><span class="line">  <span class="keyword">let</span> values = <span class="built_in">this</span>.values()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> item = values[i]</span><br><span class="line">    <span class="keyword">if</span>(!otherSet.has(item))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-字典结构"><a href="#3-2-字典结构" class="headerlink" title="3.2 字典结构"></a>3.2 字典结构</h2><h3 id="3-2-1-字典简介"><a href="#3-2-1-字典简介" class="headerlink" title="3.2.1 字典简介"></a>3.2.1 字典简介</h3><h4 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h4><ul><li>字典存储的是键值对，主要特点是一一对应</li><li>比如保存一个的信息，数组形式：[20,’nino’,’male’]，可通过下标值取出信息；字典形式：{“age”:20,”name”:”nino”,”sex”:”male”}，可以通过key取出value</li><li>此外，在字典中，key是不能重复且无序的，而value可以重复</li></ul><h4 id="字典和映射的关系"><a href="#字典和映射的关系" class="headerlink" title="字典和映射的关系"></a>字典和映射的关系</h4><p>有些编程语言中称这种<strong>映射关系</strong>为字典，如Swift中的Dictionary，Python中的dict<br>有些编程语言中称这种<strong>映射关系</strong>为Map，如Java中的HashMap，TreeMap等</p><h4 id="字典类常见的操作"><a href="#字典类常见的操作" class="headerlink" title="字典类常见的操作"></a>字典类常见的操作</h4><ul><li><code>set(key,value)</code>：向字典中添加新元素。</li><li><code>remove(key)</code>：通过使用键值来从字典中移除键值对应的数据值。</li><li><code>has(key)</code>：如果某个键值存在于这个字典中，则返回true，反之则返回false。</li><li><code>get(key)</code>：通过键值查找特定的数值并返回。</li><li><code>clear()</code>：将这个字典中的所有元素全部删除。</li><li><code>size()</code>：返回字典所包含元素的数量。与数组的length属性类似。</li><li><code>keys()</code>：将字典所包含的所有键名以数组形式返回。</li><li><code>values()</code>：将字典所包含的所有数值以数组形式返回。</li></ul><h3 id="3-2-2-字典结构的封装"><a href="#3-2-2-字典结构的封装" class="headerlink" title="3.2.2 字典结构的封装"></a>3.2.2 字典结构的封装</h3><p>字典类可以基于JavaScript中的对象结构来实现，比较简单，这里直接实现字典类中的常用方法  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装字典类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//字典属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//字典操作方法</span></span><br><span class="line">  <span class="comment">//一.在字典中添加键值对</span></span><br><span class="line">  Dictionary.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.items[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//二.判断字典中是否有某个key</span></span><br><span class="line">  Dictionary.prototype.has = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//三.从字典中移除元素</span></span><br><span class="line">  Dictionary.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.判断字典中是否有这个key</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(key)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.从字典中删除key</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四.根据key获取value</span></span><br><span class="line">  Dictionary.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.has(key) ? <span class="built_in">this</span>.items[key] : <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//五.获取所有keys</span></span><br><span class="line">  Dictionary.prototype.keys = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//六.size方法</span></span><br><span class="line">  Dictionary.prototype.keys = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.keys().length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//七.clear方法</span></span><br><span class="line">  Dictionary.prototype.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、线性结构</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、线性结构"><a href="#二、线性结构" class="headerlink" title="二、线性结构"></a>二、线性结构</h1><h2 id="2-1-数组Array"><a href="#2-1-数组Array" class="headerlink" title="2.1 数组Array"></a>2.1 数组<code>Array</code></h2><p>常见api：</p><ul><li><code>push()</code></li><li><code>unshift()</code></li><li><code>shift()</code></li><li><code>pop()</code></li><li><code>concat()</code></li><li><code>reverse()</code></li><li><code>sort()</code></li><li><code>join()</code></li><li><code>indexOf()</code></li><li><code>splice(index,num)</code></li><li><code>splice(index,num,val)</code></li></ul><h2 id="2-2-栈Stack"><a href="#2-2-栈Stack" class="headerlink" title="2.2 栈Stack"></a>2.2 栈<code>Stack</code></h2><h3 id="2-2-1-认识栈结构"><a href="#2-2-1-认识栈结构" class="headerlink" title="2.2.1 认识栈结构"></a>2.2.1 认识栈结构</h3><ul><li><p>栈也是一种非常常见的数据结构，并且在程序中的应用非常广泛</p></li><li><p>数组</p><ul><li>我们知道数组是一种线性结构，并且可以在数组的任意位置插入和删除数据</li><li>但是有时候，我们为了实现某些功能，必须对这种任意性加以限制</li><li>而栈和队列就是比较常见的受限的线性结构</li></ul></li><li><p>栈（stack），它是一种受限的线性表，后进先出（LIFO：last in first out）</p><ul><li>其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，另一端称为栈底。</li><li>LIFO表示就是后进入的元素，第一个弹出栈空间。</li><li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素。</li><li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li></ul></li><li><p>生活中类似栈的</p><ul><li>收到的邮件</li><li>自助餐的餐盘</li></ul></li><li><p>程序中的栈结构</p><ul><li><p>函数调用栈   </p><ul><li>A( B( C( D() ) ) )：即A函数中调用B，B调用C，C调用D<blockquote><p>在A执行的过程中，A会被压入栈；随后B执行时，B被压入栈；C、D执行时也依次被压入栈 .<br>所以当前栈的顺序为：A（栈底）-&gt;B-&gt;C-&gt;D（栈顶）.<br>当函数D执行完后，会弹出栈被释放，弹出栈的顺序为：D-&gt;C-&gt;B-&gt;A .</p></blockquote></li></ul></li><li><p>递归</p><blockquote><p>为什么没有停止条件的递归会导致栈溢出？<br>比如函数A为递归函数，不断的调用自己（因为函数还没有执行完，不会函数弹出栈），不停的把相同的的函数A压入栈，最后造成<strong>栈溢出</strong>(Stack Overfloat)</p></blockquote></li><li><p>练习，有6个元素6,5,4,3,2,1按顺序进栈，问下列哪个不是合法的出栈顺序？</p><ul><li>A：5 4 3 6 1 2</li><li>B：4 5 3 2 1 6</li><li>C：3 4 6 5 2 1</li><li>D：2 3 4 1 5 6<blockquote><p>正确答案：C<br>A：6 5进栈，5出栈，4进栈出栈，3进栈出栈，6出栈，2 1进栈，1 2出栈<br>B：6 5 4 进栈，4 5出栈，3进栈出栈，2进栈出栈，1进栈出栈，6出栈<br>D：6 5 4 3 2进栈，2 3 4出栈，1进栈出栈，5 6出栈    </p></blockquote></li></ul></li></ul></li></ul><h3 id="2-2-2-栈结构封装"><a href="#2-2-2-栈结构封装" class="headerlink" title="2.2.2 栈结构封装"></a>2.2.2 栈结构封装</h3><p>基于数组实现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装栈类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//栈中的属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = []</span><br><span class="line">  <span class="comment">//栈的相关操作</span></span><br><span class="line">  <span class="comment">//1.将元素压入栈</span></span><br><span class="line">  <span class="comment">//this.push = function()&#123;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  Stack.prototype.push = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.从栈中取出元素</span></span><br><span class="line">  Stack.prototype.pop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop()</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//3.查看栈顶元素</span></span><br><span class="line">  Stack.prototype.peek = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.判断栈是否为空</span></span><br><span class="line">  Stack.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5.获取栈中元素的个数</span></span><br><span class="line">  Stack.prototype.Size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6.toString方法</span></span><br><span class="line">  Stack.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈的使用</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Stack()</span><br><span class="line">s.push(<span class="number">4</span>)</span><br><span class="line">s.puhs(<span class="number">18</span>)</span><br><span class="line">s.push(<span class="number">6</span>)</span><br><span class="line">s.push(<span class="number">17</span>)</span><br><span class="line">s.pop()</span><br><span class="line">s.peek()</span><br><span class="line">s.Size()</span><br><span class="line">s.isEmpty()</span><br><span class="line">s.toString()</span><br></pre></td></tr></table></figure><p>基于链表实现</p><h3 id="2-2-3-栈常见的操作"><a href="#2-2-3-栈常见的操作" class="headerlink" title="2.2.3 栈常见的操作"></a>2.2.3 栈常见的操作</h3><ul><li><code>push(element)</code>：添加一个元素到栈顶位置</li><li><code>pop()</code>：移除栈顶的元素，同时返回被移除的元素</li><li><code>peek()</code>：返回栈顶的元素，不对栈做任何修改</li><li><code>isEmpty()</code>：若为空，则返回true；否则，返回false</li><li><code>size()</code>：返回栈里的元素个数</li><li><code>toString()</code>：将栈的内容以字符形式返回</li></ul><h3 id="2-2-4-栈结构的简单封装"><a href="#2-2-4-栈结构的简单封装" class="headerlink" title="2.2.4 栈结构的简单封装"></a>2.2.4 栈结构的简单封装</h3><p>利用栈结构的特点封装十进制转二进制的函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数：将十进制转为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">decNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="keyword">while</span>(decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    stack.push(decNumber % <span class="number">2</span>)</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> binaryStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">    binaryStr += stack.pop()</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> binaryStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-队列Queue"><a href="#2-3-队列Queue" class="headerlink" title="2.3 队列Queue"></a>2.3 队列<code>Queue</code></h2><h3 id="2-3-1-认识队列"><a href="#2-3-1-认识队列" class="headerlink" title="2.3.1 认识队列"></a>2.3.1 认识队列</h3><ul><li>队列(Queue)，它是一种受限的线性表，先进先出 (FIFO: First In First Out )<ul><li>受限之处在于它只允许在表的前端（front）进行删除操作</li><li>在表的后端（rear）进行插入操作</li></ul></li><li>生活中类似的队列结构<ul><li>排队买票，买饭，上厕所</li><li>优先排队的人，优先处理</li></ul></li></ul><h3 id="2-3-2-队列的应用"><a href="#2-3-2-队列的应用" class="headerlink" title="2.3.2 队列的应用"></a>2.3.2 队列的应用</h3><p>打印队列：计算机打印多个文件时，需要排队打印<br>线程队列：当开启多线程时，若新开启的线程，所需要的资源不足时，就先放入线程队列，等待CPU处理</p><h3 id="2-3-3-队列类的实现"><a href="#2-3-3-队列类的实现" class="headerlink" title="2.3.3 队列类的实现"></a>2.3.3 队列类的实现</h3><p>队列类的实现和栈一样，有两种方案：<br>基于数组实现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装队列类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = []</span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="comment">//1.enqueue</span></span><br><span class="line">  Queue.prototype.enqueue = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.dequeue</span></span><br><span class="line">  Queue.prototype.dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.front</span></span><br><span class="line">  Queue.prototype.front = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.isEmpty</span></span><br><span class="line">  Queue.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5.size</span></span><br><span class="line">  Queue.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6.toString</span></span><br><span class="line">  Queue.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">queue.enqueue(<span class="number">4</span>);</span><br><span class="line">queue.enqueue(<span class="number">18</span>);</span><br><span class="line">queue.enqueue(<span class="number">6</span>);</span><br><span class="line">queue.enqueue(<span class="number">17</span>);</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.front();</span><br><span class="line">queue.isEmpty();</span><br><span class="line">queue.size();</span><br><span class="line">queue.toString();</span><br></pre></td></tr></table></figure><p>基于链表实现</p><h3 id="2-3-4-队列常见的操作"><a href="#2-3-4-队列常见的操作" class="headerlink" title="2.3.4 队列常见的操作"></a>2.3.4 队列常见的操作</h3><ul><li><code>enqueue(element)</code>:向队列尾部添加一个（或多个）新的项.</li><li><code>dequeue()</code>:移除队列的第一（即排在队列最前面的）项，并返回被移除的元素.</li><li><code>front()</code>:返回队列中的一个元素（最先被添加，也将是最先被移除的元素），队列不做任何变动（不移除元素，只返回元素信息，与Stack的peek()方法类似）.</li><li><code>isEmpty()</code>:若队列为空，返回true，否则，返回false.</li><li><code>size()</code>:返回队列包含的元素个数.</li><li><code>toString()</code>:将队列中的内容，转为字符串形式.</li></ul><h3 id="2-3-5-队列的应用"><a href="#2-3-5-队列的应用" class="headerlink" title="2.3.5 队列的应用"></a>2.3.5 队列的应用</h3><blockquote><p>使用队列实现小游戏：击鼓传花，传入一组数据和设定的的数字num，循环遍历数组内元素，遍历到的元素为制定数字num时将该元素删除，直至数组剩下一个元素。<br>(从第一个人开始，按顺序数1,2,3—-num，数到num的那个人淘汰，从被淘汰的下一个人再开始按顺序数1,2,3—num，以此类推，求最后剩下的那个人的名字，及在数组中的位置下标)</p></blockquote><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> passGame = <span class="function">(<span class="params">nameList, num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.enqueue(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num-<span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.enqueue(queue.dequeue())</span><br><span class="line">    &#125;</span><br><span class="line">    queue.dequeue()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(queue.size())</span><br><span class="line">  <span class="keyword">let</span> endName = queue.front()</span><br><span class="line">  <span class="built_in">console</span>.log(endName)</span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;aiba&#x27;</span>, <span class="string">&#x27;ohno&#x27;</span>, <span class="string">&#x27;nino&#x27;</span>, <span class="string">&#x27;sho&#x27;</span>, <span class="string">&#x27;mj&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(passGame(names, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>结果展示<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656169397329-3077fd5a-48c9-42b3-9f42-484f3ecace49.png#crop=0&crop=0&crop=1&crop=1&from=url&height=396&id=cx1DJ&margin=%5Bobject%20Object%5D&name=-16a1c9946c103abb.png&originHeight=778&originWidth=1140&originalType=binary&ratio=1&rotation=0&showTitle=false&size=149496&status=done&style=none&title=&width=580" alt="-16a1c9946c103abb.png"></p><h3 id="2-3-6-优先队列"><a href="#2-3-6-优先队列" class="headerlink" title="2.3.6 优先队列"></a>2.3.6 优先队列</h3><p>优先队列主要考虑的问题为：</p><ul><li>每个元素不再只是一个数据，还包含数据的优先级</li><li>在添加数据过程中，根据优先级放入到正确位置</li></ul><h4 id="2-3-6-1-优先级队列的实现"><a href="#2-3-6-1-优先级队列的实现" class="headerlink" title="2.3.6.1 优先级队列的实现"></a>2.3.6.1 优先级队列的实现</h4><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装优先级队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//内部类，在类里面再封装一个类，表示带优先级的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element</span><br><span class="line">    <span class="built_in">this</span>.priority = priority</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//封装属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = []</span><br><span class="line">  <span class="comment">//1.实现按照优先级插入方法</span></span><br><span class="line">  PriorityQueue.prototype.enqueue = <span class="function">(<span class="params">element, priority</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.items.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; i.priority) &#123;</span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement)</span><br><span class="line">          added = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.dequeue:删除队列前端的元素</span></span><br><span class="line">  PriorityQueue.prototype.dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.front:查看前端的元素</span></span><br><span class="line">  PriorityQueue.prototype.front = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4:isEmpty:查看队列元素是否为空</span></span><br><span class="line">  PriorityQueue.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.legth === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5.size:查看队列中元素的个数</span></span><br><span class="line">  PriorityQueue.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6.toString:以字符串形式输出队列中的元素</span></span><br><span class="line">  PriorityQueue.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      resultString += i.element + <span class="string">&#x27;-&#x27;</span> + i.priority + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">let</span> pq = <span class="keyword">new</span> PriorityQueue()</span><br><span class="line">pq.enqueue(<span class="string">&#x27;nino&#x27;</span>, <span class="number">617</span>)</span><br><span class="line">pq.enqueue(<span class="string">&#x27;ren&#x27;</span>, <span class="number">418</span>)</span><br><span class="line">pq.enqueue(<span class="string">&#x27;money&#x27;</span>, <span class="number">999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(pq)</span><br></pre></td></tr></table></figure><p>测试结果<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656173605937-b9c4b6bb-d597-4ae6-b3a3-8ef9214831cb.png#clientId=u27c3d88f-f1b9-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=R0rmE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=421&originWidth=1506&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107826&status=done&style=none&taskId=ub421f5e6-47e3-42e9-9beb-2c7d822febf&title=&width=755" alt="image.png"></p><h4 id="2-3-6-2-注意点"><a href="#2-3-6-2-注意点" class="headerlink" title="2.3.6.2 注意点"></a>2.3.6.2 注意点</h4><ul><li>关于数组splice方法<ul><li><code>splice(1,0,&#39;nino&#39;)</code>：表示在索引为1的位置，删除0个元素，插入一个”nino”元素</li><li><code>splice(1,1,&#39;nino&#39;)</code>：表示在索引为1的位置，删除1个元素，插入一个”nino”元素</li></ul></li><li>数组的push方法在数组、栈和队列中的表现形式<ul><li>数组：在数组［0,1,2］中，执行push（3），结果为［0,1,2,3］</li><li>栈：stack.push()方法，执行push（0），push（1），push（2），其数组的顺序为［0,1,2］，但是索引为2的元素其实是栈顶元素；所以栈的push方法是向栈顶添加元素（但在数组的视角下，为向数组尾部添加元素）</li><li>队列：queue.enqueue()方法，其实是由数组的push()方法实现，相当于在数组头部增加元素</li></ul></li></ul><h2 id="2-4-单向链表Linked-List"><a href="#2-4-单向链表Linked-List" class="headerlink" title="2.4 单向链表Linked List"></a>2.4 单向链表<code>Linked List</code></h2><h3 id="2-4-1-单向链表的优势"><a href="#2-4-1-单向链表的优势" class="headerlink" title="2.4.1 单向链表的优势"></a>2.4.1 单向链表的优势</h3><ul><li>要存储多个元素，另外一个选择就是链表   </li><li>但不同于数组，链表中的元素在内存中不必是连续的空间   </li><li>链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针）组成   </li><li>相对于数组，链表有一些<strong>优点</strong>：<ul><li>内存空间不必是连续的，可以充分利用计算机的内存，实现灵活的内存动态管理</li><li>链表不必在创建时就确定大小，并且大小可以无限的延伸下去</li><li>链表在插入和删除数据时，时间复杂度可以达到O(1)，相对数组效率高很多</li></ul></li><li>相对于数组，链表有一些_<strong>缺点</strong>_：<ul><li>链表访问任何一个位置的元素时，都需要从头开始访问（无法跳过第一个元素访问任何一个元素）</li><li>无法通过下标直接访问元素，需要从头一个个访问，直到找到对应的元素</li></ul></li></ul><h3 id="2-4-2-单向链表的结构"><a href="#2-4-2-单向链表的结构" class="headerlink" title="2.4.2 单向链表的结构"></a>2.4.2 单向链表的结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656208484117-b6e8fddc-a2e4-4379-9c7b-2bba2f9ac7df.png#crop=0&crop=0&crop=1&crop=1&from=url&id=ONy5W&margin=%5Bobject%20Object%5D&name=1ec25d48c58968aa.png&originHeight=173&originWidth=803&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36703&status=done&style=none&title=" alt="1ec25d48c58968aa.png"></p><ul><li>head属性指向链表的第一个节点</li><li>链表的最后一个节点指向null</li><li>当链表中一个节点也没有的时候，head直接指向null</li></ul><h3 id="2-4-3-链表中的常见操作"><a href="#2-4-3-链表中的常见操作" class="headerlink" title="2.4.3 链表中的常见操作"></a>2.4.3 链表中的常见操作</h3><ul><li><code>append(element)</code>:向链表尾部添加一个新的项</li><li><code>insert(position,element)</code>:向链表的特定位置插入一个新的项</li><li><code>get(position)</code>:获取对应位置的元素</li><li><code>indexOf(element)</code>:返回元素在链表中的索引，若没有该元素则返回－1</li><li><code>update(position,element)</code>:修改某个位置的元素</li><li><code>removeAt(positin)</code>:从链表的特定位置移除一项</li><li><code>remove(element)</code>:从链表中移除一项</li><li><code>isEmpty()</code>:若链表无任何元素，则返回true，否则返回false</li><li><code>size()</code>:返回链表包含的元素个数</li><li><code>toString()</code>:由于链表使用了Node类，就需要重写继承自JS对象默认的tosString方法，让其只输出元素的值</li></ul><h3 id="2-4-5-封装单向链表类"><a href="#2-4-5-封装单向链表类" class="headerlink" title="2.4.5 封装单向链表类"></a>2.4.5 封装单向链表类</h3><ol><li>创建单项列表类</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//Node类的封装</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data</span><br><span class="line">    <span class="built_in">this</span>.next =  <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="comment">//属性head指向链表的第一个值</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>append(element)</li></ol><ul><li>代码实现：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.append = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newNode  =<span class="keyword">new</span> Node(data)</span><br><span class="line">  <span class="comment">//添加新节点</span></span><br><span class="line">  <span class="comment">//情况一：链表中没有节点时</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//情况二：链表中有节点时</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="comment">//只要某个节点的next不为空，就一直向后找，相当于找到最后一个节点，因为最后一个节点的next为null</span></span><br><span class="line">    <span class="comment">//节点的next永远指向下一个节点（data，next）</span></span><br><span class="line">    <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//让最后一个节点的next指向新添加的节点（data，next）</span></span><br><span class="line">    current.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过程详解：</li></ul><p>首先让current指向第一个节点：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656213043974-779148ab-43ec-4ccc-ade6-0b9ca152778d.png#crop=0&crop=0&crop=1&crop=1&from=url&id=d7euB&margin=%5Bobject%20Object%5D&name=-75688b3f086b7864.png&originHeight=161&originWidth=502&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24141&status=done&style=none&title=" alt="-75688b3f086b7864.png"></p><p>通过while循环使current指向最后一个节点，最后通过<code>current.next = newNode</code>，让最后一个节点指向新节点newNode</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656213085362-7cb62775-f7dc-4b8a-ac3c-b05692848661.png#crop=0&crop=0&crop=1&crop=1&from=url&id=pEaKq&margin=%5Bobject%20Object%5D&name=-5251bed7e5d03aa9.png&originHeight=168&originWidth=504&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25669&status=done&style=none&title=" alt="-5251bed7e5d03aa9.png"></p><ul><li>测试代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> linkedlist = <span class="keyword">new</span> LinkedList()</span><br><span class="line">linkedlist.append(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">linkedlist.append(<span class="string">&#x27;nino&#x27;</span>)</span><br><span class="line">linkedlist.append(<span class="string">&#x27;rxl&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br></pre></td></tr></table></figure><ul><li>测试结果：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656213724720-e4e825ed-9498-42b9-bb63-3d3daef2ad7b.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=337&id=CpyyN&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21039&status=done&style=none&taskId=u65537875-602e-4b99-8c82-4ea98e5e8c8&title=&width=467.5" alt="image.png"></p><ol start="3"><li>toString()</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> listStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    listStr += current.data + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    current = current.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> listStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656214502656-c4dfbefe-7c96-402c-bd93-4860a9265252.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=380&id=yV27u&margin=%5Bobject%20Object%5D&name=image.png&originHeight=383&originWidth=426&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22046&status=done&style=none&taskId=ub00d8498-6a0c-4271-a978-29a4f8b9623&title=&width=423" alt="image.png"></p><ol start="4"><li>insert(position,element)</li></ol><p>代码实现：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.insert = <span class="function">(<span class="params">position,data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//理解position的含义：</span></span><br><span class="line"><span class="comment">//position=0:表示新节点插入后要成为第一个节点</span></span><br><span class="line"><span class="comment">//position=2:表示新节点插入后要成为第三个节点</span></span><br><span class="line">  <span class="comment">//对position进行越界判断：要求传入的position不能是负数且不能超过linkedlist的length</span></span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">  <span class="comment">//情况1：position＝0</span></span><br><span class="line">  <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//让新节点指向当前列表的第一个节点</span></span><br><span class="line">    newNode.next = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="comment">//让head指向新节点，成为新的第一个节点</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//情况2:position&gt;0 ＆＆ position&lt;this.length</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="comment">//通过while循环，使current指向当前索引为position的节点</span></span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">      previous = current</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    newNode.next = current</span><br><span class="line">    previous.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程详解：<br>insert方法实现的过程中，根据插入节点位置的不同可分为多个情况：    </p><ul><li>情况1：position ＝ 0    </li></ul><p>通过<code>newNode.next = this.head</code>，建立连接1<br>通过<code>this.head = newNode</code>，建立连接2   </p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656217359210-08e4390e-5d84-426e-86df-4e6d81586121.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=188&id=PHth0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=190&originWidth=394&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27495&status=done&style=none&taskId=ud0d49827-1985-40e2-a16a-1add1aa82d7&title=&width=389" alt="image.png"></p><ul><li>情况2：position ＝ 0    </li></ul><p>首先定义两个变量previous和current分别指向需要插入位置<code>pos=x</code>的前一个节点和后一个节点<br>然后，通过<code>newNode.next=current</code>，改变指向1<br>最后，通过<code>previous.next=newNode</code>，改变指向2    </p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656217417061-592013d8-ca56-49bb-b9dc-294d128c5708.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=181&id=QqxBU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=138&originWidth=303&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17980&status=done&style=none&taskId=u408e5c3e-29c4-44ca-ad1d-4e3559980ea&title=&width=398.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656217443890-75e684c8-f769-4541-80fb-c38fbc96d38b.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=169&id=NCaF1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=136&originWidth=322&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19533&status=done&style=none&taskId=u5150b2ee-7316-4d6f-9ca9-fe2e177f499&title=&width=401" alt="image.png"></p><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linkedlist.insert(<span class="number">0</span>,<span class="string">&quot;在链表最前面插入节点&quot;</span>)</span><br><span class="line">linkedlist.insert(<span class="number">2</span>,<span class="string">&quot;在链表中第二个节点后插入节点&quot;</span>)</span><br><span class="line">linkedlist.insert(<span class="number">5</span>,<span class="string">&quot;在链表最后插入节点&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656217278763-87e525f0-6bfe-4450-97eb-d606b255ccfb.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=458&id=P1Tpy&margin=%5Bobject%20Object%5D&name=image.png&originHeight=634&originWidth=568&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53356&status=done&style=none&taskId=u550889c0-789d-4fcc-949f-f80f5c0ea8d&title=&width=410" alt="image.png"></p><ol start="5"><li>get(position)</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.get = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = current.next</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(linkedlist.get(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.get(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656220716104-a4e2d680-daa3-4cfa-82ab-21ea68572bfd.png#clientId=u8a519891-6f44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=jayr2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=186&originWidth=435&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16838&status=done&style=none&taskId=ua9c88072-e9ec-4007-a849-04bb63d4393&title=&width=425.5" alt="image.png"></p><ol start="6"><li>indexOf(element)</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    <span class="keyword">if</span>(current.data === data)&#123;</span><br><span class="line">      <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.next</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(linkedlist.indexOf(<span class="string">&quot;nino&quot;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.indexOf(<span class="string">&quot;rxl&quot;</span>))</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656221154069-81f6a3a9-e811-4592-bf62-786b1baa5543.png#clientId=uee96129e-b0d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=227&id=ThOvP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=234&originWidth=460&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16676&status=done&style=none&taskId=ua824f838-fe17-438f-abe6-5797cbdeb1b&title=&width=446" alt="image.png"></p><ol start="7"><li>update(position,element)</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">LinkedList.prototype.update = <span class="function">(<span class="params">position,newData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(position &lt;<span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = curretn.next</span><br><span class="line">  &#125;</span><br><span class="line">  current.data = newData</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linkedlist.update(<span class="number">0</span>,<span class="string">&quot;ohno&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656221777112-8a4c6dba-53df-4e79-94d7-516c082342cb.png#clientId=ua7719dd8-56aa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=463&id=sKsOM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=569&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43867&status=done&style=none&taskId=u987f8fb9-e86e-40f0-a4b5-f08d9436c5d&title=&width=490" alt="image.png"></p><ol start="8"><li>removeAt(position)</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7、removeAt（position）</span></span><br><span class="line">LinkedList.prototype.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      previous = current</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    previous.next = current.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linkedlist.removeAt(<span class="number">0</span>)</span><br><span class="line">linkedlist.removeAt(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656222711311-ac1b087c-8037-448f-8b0b-f8be1041e488.png#clientId=uf109e92d-0872-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=452&id=xalqg&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36625&status=done&style=none&taskId=u8d1cb95e-cf49-43fd-bd27-03e0b134035&title=&width=468.5" alt="image.png"></p><ol start="9"><li>其他方法</li></ol><p>其他方法包括：<code>remove()、isEmpty()、size() </code><br>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//8、remove（element）</span></span><br><span class="line">LinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> position = <span class="built_in">this</span>.indexOf(data)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(position)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//9、isEmpty（）</span></span><br><span class="line">LinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10、size（）</span></span><br><span class="line">LinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linkedlist.remove(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.isEmpty())</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.size())</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656222916425-ab7e2d5c-e161-4b1f-a1ef-c662d69efad8.png#clientId=uf109e92d-0872-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=155&id=XTIWi&margin=%5Bobject%20Object%5D&name=image.png&originHeight=284&originWidth=1308&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71076&status=done&style=none&taskId=uda28a562-fcf9-404b-94b4-6ec0dfa638b&title=&width=712" alt="image.png"></p><h3 id="2-4-6-完整实现"><a href="#2-4-6-完整实现" class="headerlink" title="2.4.6 完整实现"></a>2.4.6 完整实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//封装一个内部类，节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="comment">//属性head指向链表的第一个节点</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">  <span class="comment">//1、append（element）</span></span><br><span class="line">  LinkedList.prototype.append = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="comment">//添加新节点</span></span><br><span class="line">    <span class="comment">//情况一：链表中没有节点时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//情况二：链表中有节点时</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="comment">//只要某个节点的next不为空，就一直向后找，相当于找到最后一个节点，因为最后一个节点的next为null</span></span><br><span class="line">      <span class="comment">//节点的next永远指向下一个节点（data，next）</span></span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//让最后一个节点的next指向新添加的节点（data，next）</span></span><br><span class="line">      current.next = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2、toString（）</span></span><br><span class="line">  LinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> listStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      listStr += current.data + <span class="string">&#x27;&#x27;</span></span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listStr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3、insert（position，element）</span></span><br><span class="line">  LinkedList.prototype.insert = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//理解position的含义：</span></span><br><span class="line">    <span class="comment">//position=0:表示新节点插入后要成为第一个节点</span></span><br><span class="line">    <span class="comment">//position=2:表示新节点插入后要成为第三个节点</span></span><br><span class="line">    <span class="comment">//对position进行越界判断：要求传入的position不能是负数且不能超过linkedlist的length</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="comment">//情况1：position＝0</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//让新节点指向当前列表的第一个节点</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="comment">//让head指向新节点，成为新的第一个节点</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//情况2:position&gt;0 ＆＆ position&lt;this.length</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="comment">//通过while循环，使current指向当前索引为position的节点</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      newNode.next = current</span><br><span class="line">      previous.next = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4、get（position）</span></span><br><span class="line">  LinkedList.prototype.get = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5、indexOf（element）</span></span><br><span class="line">  LinkedList.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6、update（position，element）</span></span><br><span class="line">  LinkedList.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = curretn.next</span><br><span class="line">    &#125;</span><br><span class="line">    current.data = newData</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//7、removeAt（position）</span></span><br><span class="line">  LinkedList.prototype.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      previous.next = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> current.data</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//8、remove（element）</span></span><br><span class="line">  LinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> position = <span class="built_in">this</span>.indexOf(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(position)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//9、isEmpty（）</span></span><br><span class="line">  LinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//10、size（）</span></span><br><span class="line">  LinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> linkedlist = <span class="keyword">new</span> LinkedList()</span><br><span class="line">linkedlist.append(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">linkedlist.append(<span class="string">&#x27;nino&#x27;</span>)</span><br><span class="line">linkedlist.append(<span class="string">&#x27;rxl&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.toString())</span><br><span class="line">linkedlist.insert(<span class="number">0</span>, <span class="string">&quot;在链表最前面插入节点&quot;</span>)</span><br><span class="line">linkedlist.insert(<span class="number">2</span>, <span class="string">&quot;在链表中第二个节点后插入节点&quot;</span>)</span><br><span class="line">linkedlist.insert(<span class="number">5</span>, <span class="string">&quot;在链表最后插入节点&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.get(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.get(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.indexOf(<span class="string">&quot;nino&quot;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.indexOf(<span class="string">&quot;rxl&quot;</span>))</span><br><span class="line">linkedlist.update(<span class="number">0</span>, <span class="string">&quot;ohno&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line">linkedlist.removeAt(<span class="number">0</span>)</span><br><span class="line">linkedlist.removeAt(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line">linkedlist.remove(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist)</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.isEmpty())</span><br><span class="line"><span class="built_in">console</span>.log(linkedlist.size(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="2-5-双向链表Linked-List"><a href="#2-5-双向链表Linked-List" class="headerlink" title="2.5 双向链表Linked List"></a>2.5 双向链表<code>Linked List</code></h2><h3 id="2-5-1-双向链表简介"><a href="#2-5-1-双向链表简介" class="headerlink" title="2.5.1 双向链表简介"></a>2.5.1 双向链表简介</h3><ul><li>既可以<strong>从头遍历到尾，</strong>又可以<strong>从尾遍历到头</strong>。</li><li>也就是说链表相连的过程是双向的。</li><li>其实现原理是：一个节点既有向前连接的引用，也有一个向后连接的引用。</li><li>双向链表可以有效的解决单向链表中提到的问题。</li></ul><h3 id="2-5-2-双向链表的缺点"><a href="#2-5-2-双向链表的缺点" class="headerlink" title="2.5.2 双向链表的缺点"></a>2.5.2 双向链表的缺点</h3><ul><li>每次在插入或删除某个节点时，需要处理四个引用，而不是两个，也就是实现起来要困难一些</li><li>相对于单向链表，所占内存空间更大一些</li><li>但是，相对于双向链表的便利性而言，这些缺点微不足道</li></ul><h3 id="2-5-3-双向链表的结构"><a href="#2-5-3-双向链表的结构" class="headerlink" title="2.5.3 双向链表的结构"></a>2.5.3 双向链表的结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656899606014-96ad5fa7-54d7-4328-bf60-31b631b96b73.png#crop=0&crop=0&crop=1&crop=1&from=url&id=PaLNQ&margin=%5Bobject%20Object%5D&name=7bb9a70ad3be0877.png&originHeight=207&originWidth=1028&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93510&status=done&style=none&title=" alt="7bb9a70ad3be0877.png"></p><p> 特点：</p><ul><li>双向链表不仅有<strong>head</strong>指针指向第一个节点，而且有<strong>tail</strong>指针指向最后一个节点</li><li>每个节点有三部分组成：<strong>item</strong>储存数据，<strong>prev</strong>指向前一个节点，<strong>next</strong>指向后一个节点</li><li>双向链表的一个节点的prev指向<strong>null</strong></li><li>双向链表的最后一个节点的next指向<strong>null</strong></li></ul><h3 id="2-5-4-双向链表常见的操作"><a href="#2-5-4-双向链表常见的操作" class="headerlink" title="2.5.4  双向链表常见的操作"></a>2.5.4  双向链表常见的操作</h3><ul><li><code>append(element)</code>:向链表尾部添加一个新的项</li><li><code>inset(position,element)</code>:向链表的特定位置插入一个新的项</li><li><code>get(element)</code>:获取对应位置的元素</li><li><code>indexOf(element)</code>:返回元素在链表中的索引，若无则返回－1</li><li><code>update(position,element)</code>:修改某个位置的元素</li><li><code>removeAt(position)</code>:从链表的特定位置移除一项</li><li><code>remove(element)</code>:从列表中移除一项</li><li><code>isEmpty()</code>:如果链表中不含任何元素，返回true，否则返回false</li><li><code>size()</code>:返回链表中元素个数</li><li><code>toString()</code>:让其输出元素的值</li><li><code>forwardString()</code>:返回正向遍历节点字符串形式</li><li><code>backwordString()</code>:返回反向遍历的节点字符串形式</li></ul><h3 id="2-5-5-封装双向链表类"><a href="#2-5-5-封装双向链表类" class="headerlink" title="2.5.5 封装双向链表类"></a>2.5.5 封装双向链表类</h3><p>0.创建双向链表类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装双向链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//封装内部类，节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>append(element)</li></ol><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.append = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode</span><br><span class="line">    <span class="built_in">this</span>.head = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    newNode.prev = <span class="built_in">this</span>.tail</span><br><span class="line">    <span class="built_in">this</span>.tail.next = newNode</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>添加节点时分为多个情况：</p><ul><li><p>情况1：添加的是第一个节点：只需要让head和tail都指向新节点即可</p></li><li><p>情况2：链表中已经存在数据</p><ul><li>首先tail中的next之前指向的是null. 现在应该指向新的节点newNode: this.tail.next = newNode</li><li>因为是双向链表, 新节点的next/tail目前都是null. 但是作为最后一个节点, 需要有一个指向前一个节点的引用. 所以这里我们需要newNode.prev = this.tail</li><li>因为目前newNod已经变成了最后的节点, 所以this.tail属性的引用应该指向最后: this.tail = newNode即可</li></ul></li><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoublyLinkedList()</span><br><span class="line">list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(list)</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656906490230-2f8c79ee-1dc0-4b08-ae4a-7f166cc749df.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=338&id=Ktzg7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=338&originWidth=493&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24326&status=done&style=none&taskId=u660e8f19-e30d-47b4-a2f9-dab68962c9c&title=&width=493" alt="image.png"></p><ol start="2"><li>toString()汇总</li></ol><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toString</span></span><br><span class="line">DoublyLinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.backwardString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forwardString</span></span><br><span class="line">DoublyLinkedList.prototype.forwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.tail</span><br><span class="line">  <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span>(current) &#123;</span><br><span class="line">    resultString += current.data + <span class="string">&#x27;--&#x27;</span></span><br><span class="line">    current = current.prev</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultString</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//backwordString</span></span><br><span class="line">DoublyLinkedList.prototype.backwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    resultString += current.data + <span class="string">&quot;--&quot;</span></span><br><span class="line">    current = current.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>三种获取字符串的方法：toString（）、forwardString（）、backwardString（）实现原理相似，仅以backWardString方法为例：<br>定义current变量记录当前指向的节点。首先让current指向第一个节点，然后通过 current = current.next 依次向后遍历。在while循环中以(current)作为条件遍历链表，只要current ！= null就一直遍历，由此可获取链表所有节点的数据。   </p><ul><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(list.toString())</span><br><span class="line"><span class="built_in">console</span>.log(list.backwardString())</span><br><span class="line"><span class="built_in">console</span>.log(list.forwardString())</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656909701211-dfebed03-d6d0-46ec-823b-070e3965bad1.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=99&id=TVFWP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=168&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2377&status=done&style=none&taskId=u4265fa61-d3f8-4d3a-af81-03cf29d347b&title=&width=168" alt="image.png"></p><p>3.insert(position,element)</p><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.insert = <span class="function">(<span class="params">pos,data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">this</span>.length ) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head.prev = newNode</span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span>(index++ <span class="xml">&lt;pos) &#123;</span></span><br><span class="line"><span class="xml">        previous = current</span></span><br><span class="line"><span class="xml">        current = current.next</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      newNode.next = current</span></span><br><span class="line"><span class="xml">      newNode.prev = current.prev</span></span><br><span class="line"><span class="xml">      previous.next = newNode</span></span><br><span class="line"><span class="xml">      current.prev = newNode</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  this.length += 1</span></span><br><span class="line"><span class="xml">  return true</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>当原列表为空时：</p><ul><li>情况1：插入的新节点是链表的第一个节点；只需要让head和tail都指向newNode即可。    </li><li></li></ul><p>当原列表不为空时：</p><ul><li>情况1：当position == 0，即在链表的首部添加节点</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656911315023-ffafa9fa-45ac-4b61-b39c-1b8e349e8019.png#crop=0&crop=0&crop=1&crop=1&from=url&id=yhxwr&margin=%5Bobject%20Object%5D&name=-69cd21ee82bed75f.png&originHeight=243&originWidth=625&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38665&status=done&style=none&title=" alt="-69cd21ee82bed75f.png"><br>首先，通过：this.head.prev = newNode，改变指向1；<br>然后，通过：newNode.next = this.head，改变指向2；<br>最后，通过：this.head = newNode，改变指向3； </p><ul><li>情况2：position == this.length，即在链表的尾部添加节点</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1656911799463-ee33daed-bd69-472c-a6e7-213b876eddb5.jpeg#crop=0&crop=0&crop=1&crop=1&from=url&id=f96YY&margin=%5Bobject%20Object%5D&name=-5eeda181674f5b32.jpg&originHeight=337&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31013&status=done&style=none&title=" alt="-5eeda181674f5b32.jpg"></p><p>首先，通过：this.tail.next = newNode，改变指向1；（注意这里使用this.tail指向原链表最后一个节点，而不是this.head。因为当length&gt;1时，this.head != this.tail。）<br>然后，通过：newNode.prev = this.tail，改变指向2；<br>最后，通过：this.tail = newNode，改变指向3；     </p><ul><li>情况3：将元素插入到中间位置</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1656912094016-16fbd078-baed-462d-a2bf-ccdd08c7d96c.jpeg#crop=0&crop=0&crop=1&crop=1&from=url&id=wCo48&margin=%5Bobject%20Object%5D&name=-574e7d1e4ad0e2b9.jpg&originHeight=349&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36656&status=done&style=none&title=" alt="-574e7d1e4ad0e2b9.jpg"></p><p>首先，需要定义变量current按照之前的思路，通过while循环找到position位置的后一个节点，循环结束后index = position<br>当position = 1时，current就指向了Node2。这样操作current就等同于间接地操作Node2，还可以通过current.prev间接获取Node1。得到了newNode的前一个节点和后一个节点就可以通过改变它们的prev和next变量的指向来插入newNode了。<br>通过：newNode.next = current，改变指向1；<br>通过：newNode.prev = current.prev，改变指向2；<br>通过：current.prev.next = newNode，改变指向3；<br>注意必须最后才修改current.prev的指向，不然就无法通过current.prev获取需要操作的Node1了。<br>通过：current.prev = current，改变指向4；      </p><ul><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list.insert(<span class="number">0</span>, <span class="string">&#x27;插入链表的第一个元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">0</span>, <span class="string">&#x27;在链表首部插入元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">1</span>, <span class="string">&#x27;在链表中间插入元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">6</span>, <span class="string">&#x27;在链表尾部插入元素&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656912448349-3da2097d-6d88-4536-9a7e-0afe32ef8e73.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=539&id=uj2bV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=519&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53688&status=done&style=none&taskId=u789f2c36-0366-4b7e-9d05-ba90a3dfe21&title=&width=519" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656912502096-e1a24fb6-e60e-4eb2-b1b5-39873446938e.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=527&id=TGvEi&margin=%5Bobject%20Object%5D&name=image.png&originHeight=527&originWidth=513&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54565&status=done&style=none&taskId=ufa285f83-bc64-4d4b-9354-e78a53fbec7&title=&width=513" alt="image.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol start="4"><li>get(position)</li></ol><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.get = <span class="function"><span class="params">pos</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>((<span class="built_in">this</span>.length / <span class="number">2</span>) &gt; pos )&#123;</span><br><span class="line">    current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; pos)&#123;current = current.next&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    current = <span class="built_in">this</span>.tail</span><br><span class="line">    index = <span class="built_in">this</span>.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(index-- &gt; pos )&#123;current = current.prev&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>定义两个变量current和index，按照之前的思路通过while循环遍历分别获取当前节点和对应的索引值index，直到找到需要获取的position位置后的一个节点，此时index = pos =x，然后return current.data即可。<br>如果链表的节点数量很多时，这种查找方式效率不高，改进方法为：<br>一定要通过this.length来获取链表的节点数否则就会报错。<br>当this.length / 2 &gt; position：从头（head）开始遍历；<br>当this.length / 2 &lt; position：从尾（tail）开始遍历；     </p><ul><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(list.get(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.get(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656913663914-99bf189d-07ce-418b-bca9-e6e1aefef35e.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=51&id=LI62U&margin=%5Bobject%20Object%5D&name=image.png&originHeight=51&originWidth=155&originalType=binary&ratio=1&rotation=0&showTitle=false&size=974&status=done&style=none&taskId=uf75c9cbf-2628-4ee4-a203-37ef29cd257&title=&width=155" alt="image.png"></p><ol start="5"><li>indexOf(element)</li></ol><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.遍历链表，查找与data相同的节点</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">      <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.next</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>以（current）作为条件，通过while循环遍历链表中的所有节点（停止条件为current = null）。在遍历每个节点时将current指向的当前节点的data和传入的data进行比较即可。  </p><ul><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;ccc&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656914021423-feb6689b-7343-4f5d-bc57-e077eda7fbb1.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=49&id=KIXME&margin=%5Bobject%20Object%5D&name=image.png&originHeight=49&originWidth=67&originalType=binary&ratio=1&rotation=0&showTitle=false&size=481&status=done&style=none&taskId=u513e89fc-8916-4afd-87f3-6510e24b036&title=&width=67" alt="image.png"></p><ol start="6"><li>update(position,element)</li></ol><ul><li><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.寻找正确的节点</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="comment">//this.length / 2 &gt; position:从头开始遍历</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.length / <span class="number">2</span> &gt; position) &#123;</span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = current.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//this.length / 2 =&lt; position:从尾开始遍历</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    current = <span class="built_in">this</span>.tail</span><br><span class="line">    index = <span class="built_in">this</span>.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (index -- &gt; position) &#123;</span><br><span class="line">      current = current.prev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.修改找到节点的data</span></span><br><span class="line">  current.data = newData</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//表示成功修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过程详解：</p></li></ul><p>以（index++ &lt; position）为条件，通过while循环遍历链表中的节点（停止条件为index = position）。循环结束后，current指向需要修改的节点。</p><ul><li><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(list.update(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1656914392477-9c82f068-b066-4e32-92ec-172051747aa7.png#clientId=u6430b540-2302-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=312&id=eZkfA&margin=%5Bobject%20Object%5D&name=image.png&originHeight=312&originWidth=483&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26908&status=done&style=none&taskId=u47fe69aa-84ab-4b3e-89f6-c740a8a0d7f&title=&width=483" alt="image.png"></p><ol start="7"><li>removeAt(position)</li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.head.next.prev = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.tail</span><br><span class="line">      <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      current.next.prev = current.prev</span><br><span class="line">      current.prev.next = current.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;removeAt(2)&#x27;</span>,list.removeAt(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;removeAt(2)&#x27;</span>,list);</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657067348904-87f52b69-310c-410f-8850-ef8a0760e4bb.png#clientId=u4eb2bbaf-a62f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=452&id=j6DX0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=754&originalType=binary&ratio=1&rotation=0&showTitle=false&size=82718&status=done&style=none&taskId=u3ed4149f-77c6-4fdb-8c5b-b847f4f4017&title=&width=503" alt="image.png"></p><ol start="8"><li>其他方法</li></ol><p>其他方法包括：**remove(element) ,isEmpty() ,size() ,getHead() ,getTail() **</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DoublyLinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(data)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index)</span><br><span class="line">&#125;</span><br><span class="line">DoublyLinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">DoublyLinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">&#125;</span><br><span class="line">DoublyLinkedList.prototype.getHead = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.head.data</span><br><span class="line">&#125;</span><br><span class="line">DoublyLinkedList.prototype.getTail = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.tail.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(list.remove(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.isEmpty())</span><br><span class="line"><span class="built_in">console</span>.log(list.size())</span><br><span class="line"><span class="built_in">console</span>.log(list.getHead())</span><br><span class="line"><span class="built_in">console</span>.log(list.getTail())</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657067484601-7e57c579-13a9-4578-a041-9b01c1333ad1.png#clientId=u4eb2bbaf-a62f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=612&id=OohHG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=818&originWidth=883&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106479&status=done&style=none&taskId=u2a924939-784f-402d-b4dd-4e78519eb81&title=&width=660.5" alt="image.png"></p><h3 id="2-5-6-完整实现"><a href="#2-5-6-完整实现" class="headerlink" title="2.5.6 完整实现"></a>2.5.6 完整实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装双向链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//封装内部类，节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">  DoublyLinkedList.prototype.append = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode</span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//toString</span></span><br><span class="line">  DoublyLinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.backwardString()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//forwardString</span></span><br><span class="line">  DoublyLinkedList.prototype.forwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.tail</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      resultString += current.data + <span class="string">&#x27;--&#x27;</span></span><br><span class="line">      current = current.prev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//backwordString</span></span><br><span class="line">  DoublyLinkedList.prototype.backwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      resultString += current.data + <span class="string">&quot;--&quot;</span></span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.insert = <span class="function">(<span class="params">pos, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = newNode</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head</span><br><span class="line">        <span class="built_in">this</span>.head = newNode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.tail.next = newNode</span><br><span class="line">        newNode.prev = <span class="built_in">this</span>.tail</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; pos) &#123;</span><br><span class="line">          previous = current</span><br><span class="line">          current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = current</span><br><span class="line">        newNode.prev = current.prev</span><br><span class="line">        previous.next = newNode</span><br><span class="line">        current.prev = newNode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.get = <span class="function"><span class="params">pos</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">this</span>.length / <span class="number">2</span>) &gt; pos) &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; pos) &#123; current = current.next &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.tail</span><br><span class="line">      index = <span class="built_in">this</span>.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (index-- &gt; pos) &#123;</span><br><span class="line">        current = current.prev</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义变量</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历链表，查找与data相同的节点</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.寻找正确的节点</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">//this.length / 2 &gt; position:从头开始遍历</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length / <span class="number">2</span> &gt; position) &#123;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//this.length / 2 =&lt; position:从尾开始遍历</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.tail</span><br><span class="line">      index = <span class="built_in">this</span>.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (index-- &gt; position) &#123;</span><br><span class="line">        current = current.prev</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.修改找到节点的data</span></span><br><span class="line">    current.data = newData</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//表示成功修改</span></span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.next.prev = <span class="literal">null</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.tail</span><br><span class="line">        <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span></span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        current.next.prev = current.prev</span><br><span class="line">        current.prev.next = current.next</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> current.data</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index)</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.getHead = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.data</span><br><span class="line">  &#125;</span><br><span class="line">  DoublyLinkedList.prototype.getTail = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tail.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoublyLinkedList()</span><br><span class="line">list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(list)</span><br><span class="line"><span class="built_in">console</span>.log(list.toString())</span><br><span class="line"><span class="built_in">console</span>.log(list.backwardString())</span><br><span class="line"><span class="built_in">console</span>.log(list.forwardString())</span><br><span class="line">list.insert(<span class="number">0</span>, <span class="string">&#x27;插入链表的第一个元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">0</span>, <span class="string">&#x27;在链表首部插入元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">1</span>, <span class="string">&#x27;在链表中间插入元素&#x27;</span>)</span><br><span class="line">list.insert(<span class="number">6</span>, <span class="string">&#x27;在链表尾部插入元素&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"><span class="built_in">console</span>.log(list.get(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.get(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;ccc&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list.update(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;removeAt(2)&#x27;</span>, list.removeAt(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;removeAt(2)&#x27;</span>, list);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;remove(aaa)&#x27;</span>, list.remove(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;remove(aaa)&#x27;</span>, list);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isEmpty()&#x27;</span>, list.isEmpty())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;size()&#x27;</span>, list.size())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getHead()&#x27;</span>, list.getHead())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getTail()&#x27;</span>, list.getTail())</span><br></pre></td></tr></table></figure><h2 id="2-6-链表结构总结"><a href="#2-6-链表结构总结" class="headerlink" title="2.6 链表结构总结"></a>2.6 链表结构总结</h2><p> 单向链表有head和next两个属性，双向链表有head、tail、next、prev四个属性。处理好它们的指向，相当于将它们正确地连接在一起，这样就组成了一条链，这就是简单链表的实现。   </p><p>在实际开发中链表使用得非常多，比如Java中的LinkList就是双向链表。   </p><h3 id="2-6-1-注意点"><a href="#2-6-1-注意点" class="headerlink" title="2.6.1 注意点"></a>2.6.1 注意点</h3><ul><li>在链表中<strong>current = current.next <strong>可以从左往右看，看成是</strong>current –&gt; current.next</strong>，即current指向current的下一个节点。 </li><li>删除节点的原理：只要没有引用指向该对象，无论该对象是否有引用指向其他对象，该对象都会被回收（删除）。</li><li>参数中凡是有position的都要进行越界判断。</li></ul><h3 id="2-6-2-链表的增删改查"><a href="#2-6-2-链表的增删改查" class="headerlink" title="2.6.2 链表的增删改查"></a>2.6.2 链表的增删改查</h3><p> 以双向链表为例：链表的增删改查无非就是获取链表中相应的节点改变其中的prev和next两个变量的指向。  </p><ul><li>情况一：只需要head和tail两个变量就可以获取需要操作的变量（这里指的是能够轻松获取，当然你想通过head.next.next…或tail.prev.prev…来获取想要的节点也可以），在这种情况下链表的长度<strong>length：0 &lt;= length &lt;=2</strong>。   </li><li>情况二：不能靠tail和head来获取到需要操作的变量时，可采用<strong>while循环遍历</strong>的方式，找到需要操作的节点，在这种情况下，如果我们想要在链表的<strong>position = x</strong>的位置插入新节点，那么可以通过<strong>current.next获取position的后一个节点Node(x+1)<strong>，通过</strong>current.prev获取position位置的前一个节点Node(x)<strong>；之后修改</strong>Node(x+1)和Node(x)中的prev和next</strong>两个变量的指向即可在pos=x 的位置插入新节点。</li></ul><h3 id="2-6-3-修改链表引用指向"><a href="#2-6-3-修改链表引用指向" class="headerlink" title="2.6.3 修改链表引用指向"></a>2.6.3 修改链表引用指向</h3><p> 应先修改newNode引用的指向，再修改其他引用</p><ul><li>情况1：通过head和tail引用就能获取需要操作的节点时，最后更改head或tail变量的指向（因为它们分别指向链表的第一个和最后一个节点，获取其他节点时可能需要用到它们）。</li><li>情况2：使用current获取到需要操作的节点时，最后更改<strong>curren.next</strong>或<strong>current.prev</strong>的指向。因为<strong>current.next和current.prev表示的是Node(x+2)和Node(x)这两个节点</strong>，一旦变更它们的指向就无法获取Node(x)或Node(x+2)了，</li></ul><h3 id="2-6-4-遍历链表"><a href="#2-6-4-遍历链表" class="headerlink" title="2.6.4 遍历链表"></a>2.6.4 遍历链表</h3><p>积累两种遍历思路</p><ul><li>获取指定的<strong>position = x 位置的后一个节点和索引值</strong>：循环结束后<strong>index = position = x</strong>，变量current就指向了**Node(x+1)<strong>，变量index的值为</strong>Node(x+1)**的索引值x。</li><li>遍历链表中的所有节点：当<strong>current.next = null时停止循环</strong>，此时current指向链表的最后一个节点。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、什么是数据结构？</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是数据结构？"><a href="#一、什么是数据结构？" class="headerlink" title="一、什么是数据结构？"></a>一、什么是数据结构？</h1><h2 id="1-1-什么是数据结构与算法？"><a href="#1-1-什么是数据结构与算法？" class="headerlink" title="1.1 什么是数据结构与算法？"></a>1.1 什么是数据结构与算法？</h2><p>希望了解编程语言的设计层面</p><h3 id="1-1-1-什么是数据结构？"><a href="#1-1-1-什么是数据结构？" class="headerlink" title="1.1.1 什么是数据结构？"></a>1.1.1 什么是数据结构？</h3><p>数据结构就是在计算机中存储和组织数据的方式<br>解决问题方法的效率，跟数据的组织方式有关</p><h3 id="1-1-2常见的数据结构有哪些？"><a href="#1-1-2常见的数据结构有哪些？" class="headerlink" title="1.1.2常见的数据结构有哪些？"></a>1.1.2常见的数据结构有哪些？</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25602002/1656121983324-f9fc9d6d-8e62-47f0-842f-76846940cac2.jpeg"></p><ul><li>每一种都有对应的应用场景，不同的数据结构的不同操作性能是不同的</li><li>有的查询性能很快，有的插入性能很快，有的是插入头和尾速度很快</li><li>有的做范围查找很快，有的允许元素重复，有的不允许重复等等</li><li>在开发中如何选择，要根据具体的需求来选择<blockquote><p>❗注意：数据结构和语言无关，常见的编程语言都有直接或间接的使用上述常见的的数据结构</p></blockquote></li></ul><h2 id="1-2-什么是算法？"><a href="#1-2-什么是算法？" class="headerlink" title="1.2 什么是算法？"></a>1.2 什么是算法？</h2><h3 id="1-2-1-算法（algorithm）的认识"><a href="#1-2-1-算法（algorithm）的认识" class="headerlink" title="1.2.1 算法（algorithm）的认识"></a>1.2.1 算法（<code>algorithm</code>）的认识</h3><ul><li>算法：<code>Algorithm</code></li><li>不同的算法，执行效率是不一样的</li><li>在解决问题的过程中，不仅仅数据的存储方式会影响效率，算法的优劣也会影响着效率</li></ul><h3 id="1-2-2-算法的定义"><a href="#1-2-2-算法的定义" class="headerlink" title="1.2.2 算法的定义"></a>1.2.2 算法的定义</h3><ul><li>一个有限指令集，每条指令的描述不依赖于语言</li><li>接受一些输入</li><li>产生输出</li><li>一定在有限步骤之后终止</li></ul><h3 id="1-2-3-算法通俗理解"><a href="#1-2-3-算法通俗理解" class="headerlink" title="1.2.3 算法通俗理解"></a>1.2.3 算法通俗理解</h3><p>Algorithm这个单词本意就是解决问题的办法／步骤／逻辑<br>数据结构的实现，离不开算法</p><h2 id="1-3-生活中的数据结构"><a href="#1-3-生活中的数据结构" class="headerlink" title="1.3 生活中的数据结构"></a>1.3 生活中的数据结构</h2><h3 id="1-3-1-图书的摆放"><a href="#1-3-1-图书的摆放" class="headerlink" title="1.3.1 图书的摆放"></a>1.3.1 图书的摆放</h3><p>为了更加方便的插入和搜索书籍，需要合理的组织数据，并且通过更加高效的算法插入和查询数据</p><h3 id="1-3-2-快递员的快递"><a href="#1-3-2-快递员的快递" class="headerlink" title="1.3.2 快递员的快递"></a>1.3.2 快递员的快递</h3><p>将快递的取件码以A－Z的方式排序，或者以xx－xx－xx的方式排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS数据结构？ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Router 6 快速上手</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://ftp.bmp.ovh/imgs/2022/02/f86f98dd6ff7d01b.png#crop=0&crop=0&crop=1&crop=1&id=G1lpD&originHeight=152&originWidth=599&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></h1><h1 id="React-Router-6-快速上手"><a href="#React-Router-6-快速上手" class="headerlink" title="React Router 6 快速上手"></a>React Router 6 快速上手</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ol><li><p> React Router 以三个不同的包发布到 npm 上，它们分别为： </p></li><li><p>react-router: 路由的核心库，提供了很多的：组件、钩子。</p></li><li><p><strong>react-router-dom:</strong> **包含react-router所有内容，并添加一些专门用于 DOM 的组件，例如 **<code>**&lt;BrowserRouter&gt;**</code>**等 **。</p></li><li><p>react-router-native: 包括react-router所有内容，并添加一些专门用于ReactNative的API，例如:<code>&lt;NativeRouter&gt;</code>等。</p></li><li><p> 与React Router 5.x 版本相比，改变了什么？ </p></li><li><p> 内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。 </p></li><li><p> 语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。 </p></li><li><p> 新增多个hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>等。 </p></li><li><p> <strong>官方明确推荐函数式组件了！！！</strong><br>…… </p></li></ol><h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol><li><p> 说明：<code>&lt;BrowserRouter&gt;</code>用于包裹整个应用。 </p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* 整体结构（通常为App组件） */&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,root</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol><li><p>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。</p></li><li><p>备注：6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt;</code> 的用法与 5.x 相同。</p></li></ol><h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes/&gt; 与 &lt;Route/&gt;"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h3><ol><li><p> v6版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。 </p></li><li><p> <code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。 </p></li><li><p> <code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。 </p></li><li><p> <code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。 </p></li><li><p> 当URL发生变化时，<code>&lt;Routes&gt;</code>都会查看其所有子<code>&lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。 </p></li><li><p> <code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。 </p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">    <span class="comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">       /*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test2</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Demo</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure><h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h3><ol><li><p> 作用: 修改URL，且不发送网络请求（路由链接）。 </p></li><li><p> 注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。 </p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/路径&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h3><ol><li><p> 作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意: NavLink默认类名是active，下面是指定自定义的class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义样式</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">    to=<span class="string">&quot;login&quot;</span></span><br><span class="line">    className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;home&#x27;</span>, isActive)</span><br><span class="line">        <span class="keyword">return</span> isActive ? <span class="string">&#x27;base one&#x27;</span> : <span class="string">&#x27;base&#x27;</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;login&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span></span><br><span class="line"><span class="comment">当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">end</span> &gt;</span>home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h3><ol><li><p> 作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。 </p></li><li><p> <code>replace</code>属性用于控制跳转模式（push 或 replace，默认是push）。</p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Navigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> [sum,setSum] = useState(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;/* 根据sum的值决定是否切换视图 */&#125;</span></span><br><span class="line"><span class="xml">&#123;sum === 1 ? <span class="tag">&lt;<span class="name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> : <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;/</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setSum(2)&#125;&gt;点我将sum变为2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h3><ol><li><p> 当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。 </p></li><li><p>示例代码： </p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = useRoutes([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//Home.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;NavLink,Outlet&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol><li> 作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。 </li><li>示例代码： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由表配置：src/routes/index.js</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Navigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;NavLink,useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = useRoutes(routes)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">......</span></span><br><span class="line"><span class="xml">      &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="xml">      &#123;element&#125;</span></span><br><span class="line"><span class="xml">  ......</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol><li> 作用：返回一个函数用来实现编程式导航。 </li><li> 示例代码： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">  <span class="keyword">const</span> handle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一种使用方式：指定具体的路径</span></span><br><span class="line">    navigate(<span class="string">&#x27;/login&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">state</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="comment">//第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法</span></span><br><span class="line">    navigate(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link, Outlet,useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">  <span class="keyword">const</span> [messageList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message001&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message002&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message003&#x27;</span> &#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    navigate(<span class="string">&#x27;detail&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">replace</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:message.id,</span><br><span class="line">        <span class="attr">content</span>:message.content</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        messageList.map((message) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          return (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;detail&#x27;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;</span> <span class="attr">id:</span> <span class="attr">message.id</span>, <span class="attr">content:</span> <span class="attr">message.content</span> &#125;&#125;&gt;</span>&#123;message.content&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; showMsg(message) &#125;&#125;&gt;查看详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          )</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    navigate(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">forward</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    navigate(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;go&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;forward&#125;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol><li> 作用：回当前匹配路由的<code>params</code>参数，类似于5.x中的<code>match.params</code>。 </li><li>示例代码： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, Route, useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./pages/User.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取URL中携带过来的params参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = useParams();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users/:id&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">User</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link, Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [messageList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message001&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message002&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message003&#x27;</span> &#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        messageList.map((message) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          return (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">message.id</span>&#125;/$&#123;<span class="attr">message.content</span>&#125;`&#125;&gt;</span>&#123;message.content&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; id,content &#125; = useParams()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        id:&#123;id&#125;------content:&#123;content&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">        children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;detail/:id/:content&quot;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span>,</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol><li><p> 作用：用于读取和修改当前位置的 URL 中的查询字符串。 </p></li><li><p> 返回一个包含两个值的数组，内容分别为：当前的seaech参数、更新search的函数。 </p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useSearchParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> [search,setSearch] = useSearchParams()</span><br><span class="line"><span class="keyword">const</span> id = search.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> title = search.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> content = search.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setSearch(&#x27;id=008&amp;title=哈哈&amp;content=嘻嘻&#x27;)&#125;&gt;点我更新一下收到的search参数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link, Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [messageList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message001&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message002&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message003&#x27;</span> &#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        messageList.map((message) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          return (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>?<span class="attr">id</span>=<span class="string">$&#123;message.id&#125;&amp;content</span>=<span class="string">$&#123;message.content&#125;</span>`&#125;&gt;</span>&#123;message.content&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [message,setMessage] = useSearchParams()</span><br><span class="line">  <span class="built_in">console</span>.log(message.get(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">  <span class="keyword">let</span> id = message.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> content = message.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeSearch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setMessage(<span class="string">&#x27;id=521521&amp;content=ninomi21ya&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        id:&#123;id&#125;------content:&#123;content&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeSearch&#125;</span>&gt;</span>改变search参数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol><li> 作用：获取当前 location 信息，对标5.x中的路由组件的<code>location</code>属性。 </li><li> 示例代码： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useLocation&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> x = useLocation()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;@&#x27;</span>,x)</span><br><span class="line">  <span class="comment">// x就是location对象: </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">      hash: &quot;&quot;,</span></span><br><span class="line"><span class="comment">      key: &quot;ah9nv6sz&quot;,</span></span><br><span class="line"><span class="comment">      pathname: &quot;/login&quot;,</span></span><br><span class="line"><span class="comment">      search: &quot;?name=zs&amp;age=18&quot;,</span></span><br><span class="line"><span class="comment">      state: &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link, Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [messageList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message001&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message002&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;message003&#x27;</span> &#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        messageList.map((message) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          return (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;detail&#x27;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;id:message.id,content:message.content&#125;&#125;</span>&gt;</span>&#123;message.content&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = useLocation()</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="comment">/* hash: &quot;&quot;</span></span><br><span class="line"><span class="comment">  key: &quot;1ep7gllu&quot;</span></span><br><span class="line"><span class="comment">  pathname: &quot;/home/message/detail&quot;</span></span><br><span class="line"><span class="comment">  search: &quot;&quot;</span></span><br><span class="line"><span class="comment">  state:</span></span><br><span class="line"><span class="comment">  content: &quot;message002&quot;</span></span><br><span class="line"><span class="comment">  id: &quot;002&quot;) */</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id, content &#125; = a.state</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        id:&#123;id&#125;------content:&#123;content&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658577182146-6b8978c2-ec15-4e72-984a-e2a96ae49fed.png#clientId=u35b3ba04-d0bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=235&id=u316179cb&name=image.png&originHeight=294&originWidth=998&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27453&status=done&style=none&taskId=u2e396126-18fd-4136-91cf-ec63bb41a8f&title=&width=798.4" alt="image.png"></p><h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol><li> 作用：返回当前匹配信息，对标5.x中的路由组件的<code>match</code>属性。 </li><li>示例代码： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/login/:page/:pageSize&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/login/1/10&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> match = useMatch(<span class="string">&#x27;/login/:x/:y&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(match) <span class="comment">//输出match对象</span></span><br><span class="line">  <span class="comment">//match对象内容如下：</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      params: &#123;x: &#x27;1&#x27;, y: &#x27;10&#x27;&#125;</span></span><br><span class="line"><span class="comment">      pathname: &quot;/LoGin/1/10&quot;  </span></span><br><span class="line"><span class="comment">      pathnameBase: &quot;/LoGin/1/10&quot;</span></span><br><span class="line"><span class="comment">      pattern: &#123;</span></span><br><span class="line"><span class="comment">      path: &#x27;/login/:x/:y&#x27;, </span></span><br><span class="line"><span class="comment">      caseSensitive: false, </span></span><br><span class="line"><span class="comment">      end: false</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>作用：如果组件在 <code>&lt;Router&gt;</code> ,<code>BrowerRouter</code>,<code>HashRouter</code>的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(useInRouterContext())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658579271611-3bb715ad-f639-4dc8-8c10-a8437b8eac82.png#clientId=u35b3ba04-d0bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=80&id=u70323ba8&name=image.png&originHeight=48&originWidth=147&originalType=binary&ratio=1&rotation=0&showTitle=false&size=696&status=done&style=none&taskId=u3affa9bb-d3ab-4a2c-ae39-39601f1b256&title=&width=243.5999984741211" alt="image.png"></p><h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol><li><p>作用：返回当前的导航类型（用户是如何来到当前页面的）。</p></li><li><p>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</p></li><li><p>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(useNavigationType())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658579400047-27856334-220a-4cd6-ac91-2381b4f6faf3.png#clientId=u35b3ba04-d0bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=665&id=u295fbc53&name=image.png&originHeight=831&originWidth=1665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133389&status=done&style=none&taskId=ua1cd434f-6a69-4687-985b-5bf92c325ba&title=&width=1332" alt="image.png"></p><h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol><li><p> 作用：用来呈现当前组件中渲染的嵌套路由。 </p></li><li><p> 示例代码： </p></li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = useOutlet()</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// 如果嵌套路由没有挂载,则result为null</span></span><br><span class="line"><span class="comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658579538333-ec372f0c-b2c2-4cd4-a1df-03456340dfe4.png#clientId=u35b3ba04-d0bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=463&id=u6717b5b8&name=image.png&originHeight=579&originWidth=1252&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80943&status=done&style=none&taskId=uc42bb0b8-d877-41e9-9467-25430af12eb&title=&width=1001.6" alt="image.png"></p><h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h3><ol><li>作用：给定一个 URL值，解析其中的：path、search、hash值。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(useResolvedPath(<span class="string">&#x27;/user?id=001&amp;name=nino#qwe&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658579687674-6114def6-7041-4707-9818-aac86f254443.png#clientId=u35b3ba04-d0bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=115&id=ua6a1f868&name=image.png&originHeight=144&originWidth=792&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15754&status=done&style=none&taskId=ub3622a4a-4eaf-4187-bdd2-b8e8f248fed&title=&width=633.6" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 8 章 扩展</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h2><h3 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h3><ol><li><p><code>setState(stateChange, [callback])</code>——对象式的setState</p><ol><li><p><code>stateChange</code>为状态改变对象(该对象可以体现出状态的更改)</p></li><li><p><code>callback</code>是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</p></li></ol></li><li><p> <code>setState(updater, [callback])</code>——函数式的setState</p></li><li><p><code>updater</code>为返回stateChange对象的函数。</p></li><li><p><code>updater</code>可以接收到state和props。</p></li><li><p><code>callback</code>是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</p></li></ol><p>总结:</p><ol><li><p>对象式的setState是函数式的setState的简写方式(语法糖)</p></li><li><p>使用原则：</p><ol><li>如果<strong>新状态不依赖于原状态 ===&gt; 使用对象方式</strong></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>: count+value*<span class="number">1</span>&#125;,<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.count) &#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>如果<strong>新状态依赖于原状态 ===&gt; 使用函数方式</strong></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>:state.count + <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>如果需要在<code>setState()</code>执行后<strong>获取最新的状态数据</strong>, 要在<strong>第二个</strong><code>**callback**</code>**函数中读取</li></ol><p>**</p><h2 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h2><h3 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span></span><br><span class="line"><span class="keyword">const</span> Login = lazy(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/pages/Login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line">&lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/xxx&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Xxxx&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&#x27;./Loading&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Home&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> About = lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./About&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h3 id="React-Hook-Hooks是什么"><a href="#React-Hook-Hooks是什么" class="headerlink" title="React Hook/Hooks是什么?"></a>React Hook/Hooks是什么?</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Hook是React 16.8.0版本增加的新特性/新语法</span><br><span class="line"></span><br><span class="line">(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</span><br></pre></td></tr></table></figure><h3 id="三个常用的Hook"><a href="#三个常用的Hook" class="headerlink" title="三个常用的Hook"></a>三个常用的Hook</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook: React.useState()</span><br><span class="line"></span><br><span class="line">(2). Effect Hook: React.useEffect()</span><br><span class="line"></span><br><span class="line">(3). Ref Hook: React.useRef()</span><br></pre></td></tr></table></figure><h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><ul><li>理解</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line"></span><br><span class="line">(2). 语法: const [xxx, setXxx] = React.useState(initValue)  </span><br><span class="line"></span><br><span class="line">(3). useState()说明:</span><br><span class="line"></span><br><span class="line">        参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">        </span><br><span class="line">        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line"></span><br><span class="line">(4). setXxx()2种写法:</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">        </span><br><span class="line">        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&#x27;nino&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// setCount(count+1)</span></span><br><span class="line">    setCount(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setName(<span class="function"><span class="params">name</span> =&gt;</span> <span class="string">&#x27;rxlrxl&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的名字叫：&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;change&#125;</span>&gt;</span>点我改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><ul><li>理解</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line"></span><br><span class="line">(2). React中的副作用操作:</span><br><span class="line">        </span><br><span class="line">   发ajax请求数据获取</span><br><span class="line"></span><br><span class="line">  设置订阅 / 启动定时器</span><br><span class="line"></span><br><span class="line">  手动更改真实DOM</span><br><span class="line"></span><br><span class="line">(3). 语法和说明: </span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123; </span><br><span class="line">    // 在此可以执行任何带副作用操作</span><br><span class="line">    return () =&gt; &#123; // 在组件卸载前执行</span><br><span class="line">    // 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(4). 可以把 useEffect Hook 看做如下三个函数的组合</span><br><span class="line"></span><br><span class="line">      componentDidMount()</span><br><span class="line">      </span><br><span class="line">      componentDidUpdate()</span><br><span class="line">      </span><br><span class="line">    componentWillUnmount()</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&#x27;nino&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count, name])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setCount(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;unmount&#125;</span>&gt;</span>点我卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h3><ul><li>理解：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</span><br><span class="line"></span><br><span class="line">(2). 语法: const refContainer = useRef()</span><br><span class="line"></span><br><span class="line">(3). 作用:保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&#x27;nino&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> myRef = useRef()</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count, name])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setCount(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(myRef.current.value)</span><br><span class="line">    <span class="built_in">console</span>.log(myRef)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;unmount&#125;</span>&gt;</span>点我卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;showMsg&#125;</span>&gt;</span>点我提示数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658417145258-bc0ce179-895a-4aa5-9c3e-e9c968ecd56c.png#clientId=ue5408a90-4293-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=240&id=u6df4a53e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=479&originWidth=1218&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56965&status=done&style=none&taskId=u1e8f0cc7-8aaf-45e3-b3d2-1029af2ec6a&title=&width=609" alt="image.png"></p><h2 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Fragment&gt;&lt;Fragment&gt;</span><br><span class="line">&lt;&gt;&lt;/&gt;</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Fragment</span> <span class="attr">key</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>147258<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>147258<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658417644421-21eef1fe-d406-44c1-8253-0000ad75891d.png#clientId=ue5408a90-4293-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=162&id=u5e961293&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=1174&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38485&status=done&style=none&taskId=u7e583c11-3055-4eef-ba35-cbc44dc9e8b&title=&width=587" alt="image.png"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><h2 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>一种组件间通信方式, 常用于<strong>【祖组件】与【后代组件】</strong>间通信</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 创建Context容器对象：</span><br><span class="line"><span class="keyword">const</span> XxxContext = React.createContext()  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：</span><br><span class="line">&lt;xxxContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">子组件</span><br><span class="line">  &lt;/xxxContext.Provider&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>) 后代组件读取数据：</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种方式:仅适用于类组件 </span></span><br><span class="line">  <span class="keyword">static</span> contextType = xxxContext  <span class="comment">// 声明接收context</span></span><br><span class="line">  <span class="built_in">this</span>.context <span class="comment">// 读取context中的value数据</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//第二种方式: 函数组件与类组件都可以</span></span><br><span class="line">  &lt;xxxContext.Consumer&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function"><span class="params">value</span> =&gt;</span> ( <span class="comment">// value就是context中的value数据</span></span><br><span class="line">        要显示的内容</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyContext = createContext()</span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = MyContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">username</span>: <span class="string">&#x27;nino&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, age &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用户名是&#123;this.state.username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">username</span>, <span class="attr">age</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = MyContext</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.context)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是B组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我从A组件接收到的的用户名是&#123;this.context.username&#125;,年龄是：&#123;this.context.age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* class C extends Component &#123;</span></span><br><span class="line"><span class="comment">  static contextType = MyContext</span></span><br><span class="line"><span class="comment">  render() &#123;</span></span><br><span class="line"><span class="comment">    console.log(this.context)</span></span><br><span class="line"><span class="comment">    return (</span></span><br><span class="line"><span class="comment">      &lt;div className=&#x27;grand&#x27;&gt;</span></span><br><span class="line"><span class="comment">        &lt;h3&gt;我是C组件&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">        &lt;h4&gt;我从A组件接收到的的用户名是&#123;this.context.username&#125;,年龄是：&#123;this.context.age&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">      &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    )</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是C组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我从A组件接收到的的用户名是</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;</span></span><br><span class="line"><span class="xml">            value =&gt; &#123;</span></span><br><span class="line"><span class="xml">              return `$&#123;value.username&#125;,年龄是$&#123;value.age&#125;`</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在应用开发中一般不用context, 一般都用它的封装react插件</span><br></pre></td></tr></table></figure><h2 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h2><h3 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h3><blockquote><ol><li><p> 只要执行setState(),即使不改变状态数据, 组件也会重新render() ==&gt; 效率低 </p></li><li><p> 只当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低 </p></li></ol></blockquote><h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><blockquote><p>只有当组件的state或props数据发生改变时才重新render()</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>Component中的shouldComponentUpdate()总是返回true</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">办法1: </span><br><span class="line"></span><br><span class="line">重写shouldComponentUpdate()方法</span><br><span class="line">  </span><br><span class="line">比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false</span><br><span class="line">  </span><br><span class="line">办法2:  </span><br><span class="line"></span><br><span class="line">使用PureComponent</span><br><span class="line">  </span><br><span class="line">PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true</span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line"></span><br><span class="line">  只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  </span><br><span class="line"></span><br><span class="line">  不要直接修改state数据, 而是要产生新数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">项目中一般使用PureComponent来优化</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&quot;奔驰c36&quot;</span>,<span class="attr">stus</span>:[<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;小李&#x27;</span>,<span class="string">&#x27;小王&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">addStu = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">/* const &#123;stus&#125; = this.state</span></span><br><span class="line"><span class="comment">stus.unshift(&#x27;小刘&#x27;)</span></span><br><span class="line"><span class="comment">this.setState(&#123;stus&#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;stus&#125; = <span class="built_in">this</span>.state</span><br><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">stus</span>:[<span class="string">&#x27;小刘&#x27;</span>,...stus]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeCar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//this.setState(&#123;carName:&#x27;迈巴赫&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">this</span>.state</span><br><span class="line">obj.carName = <span class="string">&#x27;迈巴赫&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === <span class="built_in">this</span>.state);</span><br><span class="line"><span class="built_in">this</span>.setState(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* shouldComponentUpdate(nextProps,nextState)&#123;</span></span><br><span class="line"><span class="comment">// console.log(this.props,this.state); //目前的props和state</span></span><br><span class="line"><span class="comment">// console.log(nextProps,nextState); //接下要变化的目标props，目标state</span></span><br><span class="line"><span class="comment">return !this.state.carName === nextState.carName</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Parent---render&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;this.state.stus&#125;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我的车名字是：&#123;carName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>点我换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addStu&#125;</span>&gt;</span>添加一个小刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">carName</span>=<span class="string">&quot;奥拓&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* shouldComponentUpdate(nextProps,nextState)&#123;</span></span><br><span class="line"><span class="comment">console.log(this.props,this.state); //目前的props和state</span></span><br><span class="line"><span class="comment">console.log(nextProps,nextState); //接下要变化的目标props，目标state</span></span><br><span class="line"><span class="comment">return !this.props.carName === nextProps.carName</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Child---render&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Child组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我接到的车是：&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h2><h3 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue中: </span><br><span class="line"></span><br><span class="line">  使用slot技术, 也就是通过组件标签体传入结构  &lt;A&gt;&lt;B/&gt;&lt;/A&gt;</span><br><span class="line"></span><br><span class="line">React中:</span><br><span class="line"></span><br><span class="line">  使用children props: 通过组件标签体传入结构</span><br><span class="line"></span><br><span class="line">  使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性</span><br></pre></td></tr></table></figure><h3 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;A&gt;</span><br><span class="line">  &lt;B&gt;xxxx&lt;/B&gt;</span><br><span class="line">&lt;/A&gt;</span><br><span class="line">&#123;this.props.children&#125;</span><br><span class="line"></span><br><span class="line">问题: 如果B组件需要A组件内的数据, ==&gt; 做不到</span><br></pre></td></tr></table></figure><h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;A render=&#123;(data) =&gt; &lt;C data=&#123;data&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;</span><br><span class="line"></span><br><span class="line">A组件: &#123;this.props.render(内部state数据)&#125;</span><br><span class="line"></span><br><span class="line">C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">A</span> <span class="attr">render</span>=<span class="string">&#123;(name)</span>=&gt;</span><span class="tag">&lt;<span class="name">B</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;/</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">state = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.props);</span><br><span class="line"><span class="keyword">const</span> &#123;name&#125; = <span class="built_in">this</span>.state</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;this.props.render(name)&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B--render&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是B组件,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h2><h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h3><p><code>错误边界(Error boundary)</code>：用来捕获后代组件错误，渲染出备用页面</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p><code>getDerivedStateFromError配合componentDidCatch</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">// 在render之前触发</span></span><br><span class="line">    <span class="comment">// 返回新的state</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">hasError</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">componentDidCatch</span>(<span class="params">error, info</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">    <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h2><h3 id="组件间的关系："><a href="#组件间的关系：" class="headerlink" title="组件间的关系："></a>组件间的关系：</h3><ul><li><p>父子组件</p></li><li><p>兄弟组件（非嵌套组件）</p></li><li><p>祖孙组件（跨级组件）</p></li></ul><h3 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.props：</span><br><span class="line"></span><br><span class="line">  (1).children props</span><br><span class="line">  </span><br><span class="line">  (2).render props</span><br><span class="line">  </span><br><span class="line">2.消息订阅-发布：</span><br><span class="line"></span><br><span class="line">  pubs-sub、event等等</span><br><span class="line">  </span><br><span class="line">3.集中式管理：</span><br><span class="line"></span><br><span class="line">  redux、dva等等</span><br><span class="line">  </span><br><span class="line">4.conText:</span><br><span class="line"></span><br><span class="line">  生产者-消费者模式</span><br></pre></td></tr></table></figure><h3 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父子组件：props</span><br><span class="line"></span><br><span class="line">兄弟组件：消息订阅-发布、集中式管理</span><br><span class="line"></span><br><span class="line">祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 7 章  redux</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-redux-理解"><a href="#7-1-redux-理解" class="headerlink" title="7.1. redux 理解"></a>7.1. redux 理解</h1><h2 id="7-1-1-学习文档"><a href="#7-1-1-学习文档" class="headerlink" title="7.1.1. 学习文档"></a>7.1.1. 学习文档</h2><ol><li><p>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></p></li><li><p>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></p></li><li><p>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save redux</span><br></pre></td></tr></table></figure><h2 id="7-1-2-redux-是什么"><a href="#7-1-2-redux-是什么" class="headerlink" title="7.1.2. redux 是什么"></a>7.1.2. redux 是什么</h2><ol><li><p>redux 是一个专门用于做状态管理的 JS 库(不是 react 插件库)。</p></li><li><p>它可以用在 react, angular, vue 等项目中, 但基本与 react 配合使用。</p></li><li><p>作用: 集中式管理 react 应用中多个组件共享的状态。</p></li></ol><h2 id="7-1-3-什么情况下需要使用-redux"><a href="#7-1-3-什么情况下需要使用-redux" class="headerlink" title="7.1.3. 什么情况下需要使用 redux"></a>7.1.3. 什么情况下需要使用 redux</h2><ol><li><p>某个组件的状态，需要让其他组件可以随时拿到（共享）。</p></li><li><p>一个组件需要改变另一个组件的状态（通信）。</p></li><li><p>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</p></li></ol><h2 id="7-1-4-redux-工作流程"><a href="#7-1-4-redux-工作流程" class="headerlink" title="7.1.4. redux 工作流程"></a>7.1.4. redux 工作流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658331412578-df1f34e5-63c8-4d2d-a1d6-ded83283a35b.png#clientId=u37db6a28-fe62-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ucb60c960&margin=%5Bobject%20Object%5D&name=redux%E5%8E%9F%E7%90%86%E5%9B%BE.png&originHeight=720&originWidth=1280&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119476&status=done&style=none&taskId=ud6b4c0c3-6f8c-48ed-b490-90a181486e1&title=" alt="redux原理图.png"></p><h1 id="7-2-redux-的三个核心概念"><a href="#7-2-redux-的三个核心概念" class="headerlink" title="7.2. redux 的三个核心概念"></a>7.2. redux 的三个核心概念</h1><h2 id="7-2-1-action"><a href="#7-2-1-action" class="headerlink" title="7.2.1. action"></a>7.2.1. action</h2><ol><li><p>动作的对象</p></li><li><p>包含 2 个属性</p><ol><li><p><strong>type</strong>：<strong>标识属性, 值为字符串</strong>, 唯一, 必要属性，默认为<code>@@init@@</code></p></li><li><p> <strong>data</strong>：<strong>数据属性, 值类型任意</strong>, 可选属性</p></li></ol></li><li><p>例子：<code>&#123; type: &#39;ADD_STUDENT&#39;,data:&#123;name: &#39;tom&#39;,age:18&#125; &#125;</code></p></li></ol><h2 id="7-2-2-reducer"><a href="#7-2-2-reducer" class="headerlink" title="7.2.2 reducer"></a>7.2.2 reducer</h2><ol><li><p>用于<strong>初始化状态、加工状态。</strong></p></li><li><p>加工时，根据<strong>旧的 state 和 action</strong>， <strong>产生新的 state 的纯函数。</strong></p></li></ol><h2 id="7-2-3-store"><a href="#7-2-3-store" class="headerlink" title="7.2.3 store"></a>7.2.3 store</h2><ol><li><p>将** state、action、reducer 联系在一起**的对象</p></li><li><p>如何得到此对象?</p><ol><li><p><code>import &#123;createStore&#125; from &#39;redux&#39;</code></p></li><li><p>`import reducer from ‘./reducers’``</p></li><li><p><code>const store = createStore(reducer)</code></p></li></ol></li></ol><ol start="3"><li><p>此对象的功能?</p><ol><li><p><code>getState()</code>: 得到 state</p></li><li><p><code>dispatch(action)</code>: 分发 action, 触发 reducer 调用, 产生新的 state</p></li><li><p><code>subscribe(listener)</code>: 注册监听, 当产生了新的 state 时, 自动调用</p></li></ol></li></ol><h1 id="7-3-redux-的核心-API"><a href="#7-3-redux-的核心-API" class="headerlink" title="7.3. redux 的核心 API"></a>7.3. redux 的核心 API</h1><h2 id="7-3-1-createstore"><a href="#7-3-1-createstore" class="headerlink" title="7.3.1. createstore()"></a>7.3.1. createstore()</h2><p>作用：创建包含指定 reducer 的 store 对象</p><h2 id="7-3-2-store-对象"><a href="#7-3-2-store-对象" class="headerlink" title="7.3.2. store 对象"></a>7.3.2. store 对象</h2><ol><li><p>作用: redux 库最核心的管理对象</p></li><li><p>它内部维护着:</p><ol><li><p>state</p></li><li><p>reducer</p></li></ol></li><li><p>核心方法:</p><ol><li><p>getState()</p></li><li><p>dispatch(action)</p></li><li><p>subscribe(listener)</p></li></ol></li><li><p>具体编码:</p><ol><li><p>store.getState()</p></li><li><p>store.dispatch({type:’INCREMENT’, number})</p></li><li><p>store.subscribe(render)</p></li></ol></li></ol><h2 id="7-3-3-applyMiddleware"><a href="#7-3-3-applyMiddleware" class="headerlink" title="7.3.3. applyMiddleware()"></a>7.3.3. applyMiddleware()</h2><p>作用：应用上基于 redux 的中间件(插件库) ,action返回一个函数的话</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./count_reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer, applyMiddleware(thunk));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementActionAsync = <span class="function">(<span class="params">time,data</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(createIncrementAction(data))</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-4-求和案例精简版"><a href="#7-4-求和案例精简版" class="headerlink" title="7.4 求和案例精简版"></a>7.4 求和案例精简版</h1><h2 id="7-4-1-求和案例-redux精简版"><a href="#7-4-1-求和案例-redux精简版" class="headerlink" title="7.4.1 求和案例_redux精简版"></a>7.4.1 求和案例_redux精简版</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1).去除Count组件自身的状态</span><br><span class="line"></span><br><span class="line">(2).src下建立:</span><br><span class="line"></span><br><span class="line">-redux</span><br><span class="line">-store.js</span><br><span class="line">-count_reducer.js</span><br><span class="line">            </span><br><span class="line">(3).store.js：</span><br><span class="line"></span><br><span class="line">1).引入redux中的createStore函数，创建一个store</span><br><span class="line">        </span><br><span class="line">2).createStore调用时要传入一个为其服务的reducer</span><br><span class="line">        </span><br><span class="line">3).记得暴露store对象</span><br><span class="line"></span><br><span class="line">(4).count_reducer.js：</span><br><span class="line"></span><br><span class="line">1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态</span><br><span class="line"></span><br><span class="line">    2).reducer有两个作用：初始化状态，加工状态</span><br><span class="line"></span><br><span class="line">    3).reducer被第一次调用时，是store自动触发的，</span><br><span class="line">    </span><br><span class="line">传递的preState是undefined,</span><br><span class="line">          </span><br><span class="line">传递的action是:&#123;type:&#x27;@@REDUX/INIT_a.2.b.4&#125;</span><br><span class="line"></span><br><span class="line">(5).在index.js中监测store中状态的改变，一旦发生改变重新渲染&lt;App/&gt;</span><br><span class="line">  </span><br><span class="line">备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</span><br></pre></td></tr></table></figure><h2 id="7-4-2-index-js代码"><a href="#7-4-2-index-js代码" class="headerlink" title="7.4.2 index.js代码"></a>7.4.2 index.js代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./redux/store&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&quot;#root&quot;</span>));</span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&quot;#root&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7-4-3-store-js代码"><a href="#7-4-3-store-js代码" class="headerlink" title="7.4.3 store.js代码"></a>7.4.3 store.js代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./count_reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer);</span><br></pre></td></tr></table></figure><h2 id="7-4-4-count-reducer-js代码"><a href="#7-4-4-count-reducer-js代码" class="headerlink" title="7.4.4 count_reducer.js代码"></a>7.4.4 count_reducer.js代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(action)</span><br><span class="line">  <span class="keyword">const</span> &#123; type, data &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="comment">// console.log(preState + data)</span></span><br><span class="line">      <span class="keyword">return</span> preState + data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> preState - data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;incrementAsync&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> preState - data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> preState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4-5-count-jsx代码"><a href="#7-4-5-count-jsx代码" class="headerlink" title="7.4.5 count.jsx代码"></a>7.4.5 count.jsx代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;&#125;</span><br><span class="line">  increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>: value * <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;decrement&#x27;</span>, <span class="attr">data</span>: value * <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="keyword">const</span> count = store.getState()</span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">     store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(store)</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;aaaaaaaaaaaaaaaaaaaaaaaa&#x27;, store.getState())</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-5-求和案例-redux完整版"><a href="#7-5-求和案例-redux完整版" class="headerlink" title="7.5 求和案例_redux完整版"></a>7.5 求和案例_redux完整版</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新增文件：</span><br><span class="line"></span><br><span class="line">1.count_action.js 专门用于创建action对象</span><br><span class="line">  </span><br><span class="line">2.constant.js 放置容易写错的type值</span><br></pre></td></tr></table></figure><h2 id="7-5-1-constant-js"><a href="#7-5-1-constant-js" class="headerlink" title="7.5.1 constant.js"></a>7.5.1 constant.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-2-count-action-js"><a href="#7-5-2-count-action-js" class="headerlink" title="7.5.2 count_action.js"></a>7.5.2 count_action.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function">(<span class="params">data</span>)=&gt;</span>(&#123;<span class="attr">type</span>:INCREMENT,data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function">(<span class="params">data</span>)=&gt;</span>(&#123;<span class="attr">type</span>:DECREMENT,data&#125;)</span><br></pre></td></tr></table></figure><h1 id="7-6-求和案例-redux异步action版"><a href="#7-6-求和案例-redux异步action版" class="headerlink" title="7.6 求和案例_redux异步action版"></a>7.6 求和案例_redux异步action版</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1).明确：延迟的动作不想交给组件自身，想交给action</span><br><span class="line">   </span><br><span class="line">(2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。</span><br><span class="line"> </span><br><span class="line">(3).具体编码：</span><br><span class="line"></span><br><span class="line">  1).npm i redux-thunk，并配置在store中</span><br><span class="line"></span><br><span class="line">  2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。</span><br><span class="line"></span><br><span class="line">  3).异步任务有结果后，分发一个同步的action去真正操作数据。</span><br><span class="line"> </span><br><span class="line">(4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</span><br></pre></td></tr></table></figure><h1 id="7-7-redux-异步编程"><a href="#7-7-redux-异步编程" class="headerlink" title="7.7 redux 异步编程"></a>7.7 redux 异步编程</h1><h2 id="7-7-1-理解："><a href="#7-7-1-理解：" class="headerlink" title="7.7.1 理解："></a>7.7.1 理解：</h2><ol><li><p>redux 默认是不能进行异步处理的,</p></li><li><p>某些时候应用中需要在 redux 中执行异步任务(ajax, 定时器)</p></li></ol><h2 id="7-7-2-使用异步中间件"><a href="#7-7-2-使用异步中间件" class="headerlink" title="7.7.2. 使用异步中间件"></a>7.7.2. 使用异步中间件</h2><p><code>npm install --save redux-thunk</code></p><h1 id="7-8-react-redux"><a href="#7-8-react-redux" class="headerlink" title="7.8 react-redux"></a>7.8 react-redux</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658386988959-0b67d614-6e8c-4847-b895-1ec87e586acd.png#clientId=ufe0c64eb-430e-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=310&id=uf95c61a5&margin=%5Bobject%20Object%5D&name=react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png&originHeight=635&originWidth=1131&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45184&status=done&style=none&taskId=u1169113f-9394-4e08-8e0e-89cbec4a1ae&title=&width=552.6000366210938" alt="react-redux模型图.png"></p><h2 id="7-8-1-理解"><a href="#7-8-1-理解" class="headerlink" title="7.8.1. 理解"></a>7.8.1. 理解</h2><ol><li><p> 一个 react 插件库</p></li><li><p>专门用来简化 react 应用中使用 redux </p></li><li><p>安装：<code>npm install react-redux</code></p></li></ol><h2 id="7-8-2-react-Redux-将所有组件分成两大类"><a href="#7-8-2-react-Redux-将所有组件分成两大类" class="headerlink" title="7.8.2. react-Redux 将所有组件分成两大类"></a>7.8.2. react-Redux 将所有组件分成两大类</h2><ol><li><p><strong>UI 组件</strong></p><ol><li><p>只负责 UI 的呈现，不带有任何业务逻辑</p></li><li><p>通过 props 接收数据(一般数据和函数)</p></li><li><p>不使用任何 Redux 的 API</p></li><li><p>一般保存在 components 文件夹下</p></li></ol></li><li><p><strong>容器组件</strong></p><ol><li><p>负责管理数据和业务逻辑，不负责 UI 的呈现</p></li><li><p>使用 Redux 的 API</p></li><li><p>一般保存在 containers 文件夹下</p></li></ol></li></ol><h2 id="7-8-3-相关-API"><a href="#7-8-3-相关-API" class="headerlink" title="7.8.3. 相关 API"></a>7.8.3. 相关 API</h2><ol><li><code>Provider</code>：让所有组件都可以得到 state 数据</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>connect</code>：用于包装 UI 组件生成容器组件</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">connect(</span><br><span class="line">  mapStateToprops,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><ol start="3"><li><code>mapStateToprops</code>：将外部的数据（即 state 对象）转换为 UI 组件的标签属性</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToprops = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>mapDispatchToProps</code>：将分发 action 的函数转换为 UI 组件的标签属性</li></ol><h1 id="7-9-求和案例react-redux版"><a href="#7-9-求和案例react-redux版" class="headerlink" title="7.9 求和案例react-redux版"></a>7.9 求和案例react-redux版</h1><ol><li><p>明确两个概念：</p><ol><li><p><strong>UI组件</strong>:不能使用任何redux的api，只负责页面的呈现、交互等。</p></li><li><p><strong>容器组件</strong>：负责和redux通信，将结果交给UI组件。</p></li></ol></li><li><p>如何创建一个容器组件————靠react-redux 的 connect函数</p><ol><li><p><code>connect(mapStateToProps,mapDispatchToProps)(UI组件)</code></p><ol><li><p>-<code>mapStateToProps</code>:映射<strong>状态</strong>，返回值是一个<strong>对象</strong></p></li><li><p>-<code>mapDispatchToProps</code>:映射<strong>操作状态的方法</strong>，返回值是一个<strong>对象</strong></p></li></ol></li></ol></li><li><p>备注1：<strong>容器组件中的store是靠props传进去的</strong>，而不是在容器组件中直接引入</p></li><li><p>备注2：<code>mapDispatchToProps</code>，也可以是一个对象</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dispatch =&gt; (&#123;</span><br><span class="line">  <span class="attr">increment</span>: <span class="function"><span class="params">data</span> =&gt;</span> dispatch(createIncrementAction(data)),</span><br><span class="line">  <span class="attr">decrement</span>: <span class="function"><span class="params">data</span> =&gt;</span> dispatch(createDecrementAction(data)),</span><br><span class="line">  <span class="attr">incrementAsync</span>: <span class="function">(<span class="params">time, data</span>) =&gt;</span> dispatch(createIncrementActionAsync(time, data)),</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">/////////</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">  <span class="attr">decrement</span>: createDecrementAction,</span><br><span class="line">  <span class="attr">incrementAsync</span>: createIncrementActionAsync,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-1-App-jsx"><a href="#7-9-1-App-jsx" class="headerlink" title="7.9.1 App.jsx"></a>7.9.1 App.jsx</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入容器组件里的Count</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-2-containers-Count-index-jsx"><a href="#7-9-2-containers-Count-index-jsx" class="headerlink" title="7.9.2 containers/Count/index.jsx"></a>7.9.2 containers/Count/index.jsx</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CountUI <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createIncrementAction, createDecrementAction, createIncrementActionAsync &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;容器组件的state&#x27;</span>, state)</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>: state &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;容器组件的dispatch&#x27;</span>, dispatch)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="params">data</span> =&gt;</span> dispatch(createIncrementAction(data)),</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function"><span class="params">data</span> =&gt;</span> dispatch(createDecrementAction(data)),</span><br><span class="line">    <span class="attr">incrementAsync</span>: <span class="function">(<span class="params">time, data</span>) =&gt;</span> dispatch(createIncrementActionAsync(time, data)),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CountUI)</span><br></pre></td></tr></table></figure><h2 id="7-9-3-components-Count-index-jsx"><a href="#7-9-3-components-Count-index-jsx" class="headerlink" title="7.9.3 components/Count/index.jsx"></a>7.9.3 components/Count/index.jsx</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;&#125;</span><br><span class="line">  increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="built_in">this</span>.props.increment(value * <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="built_in">this</span>.props.decrement(value * <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.increment(value * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    <span class="built_in">this</span>.props.incrementAsync(<span class="number">1000</span>, value * <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(store)</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;aaaaaaaaaaaaaaaaaaaaaaaa&#x27;, store.getState())</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;UI组件接受到来自容器组件的props为&#x27;</span>, <span class="built_in">this</span>.props)</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-4-求和案例-react-redux优化"><a href="#7-9-4-求和案例-react-redux优化" class="headerlink" title="7.9.4 求和案例_react-redux优化"></a>7.9.4 求和案例_react-redux优化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1).容器组件和UI组件整合一个文件</span><br><span class="line"></span><br><span class="line">(2).无需自己给容器组件传递store，给&lt;App/&gt;包裹一个&lt;Provider store=&#123;store&#125;&gt;即可。</span><br><span class="line"></span><br><span class="line">(3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。</span><br><span class="line"></span><br><span class="line">(4).mapDispatchToProps也可以简单的写成一个对象</span><br><span class="line"></span><br><span class="line">(5).一个组件要和redux“打交道”要经过哪几步？</span><br><span class="line">  </span><br><span class="line">  (1).定义好UI组件---不暴露</span><br><span class="line">  </span><br><span class="line">  (2).引入connect生成一个容器组件，并暴露，写法如下：</span><br><span class="line">    connect(</span><br><span class="line">      state =&gt; (&#123;key:value&#125;), //映射状态</span><br><span class="line">      &#123;key:xxxxxAction&#125; //映射操作状态的方法</span><br><span class="line">    )(UI组件)</span><br><span class="line"></span><br><span class="line">(4).在UI组件中通过this.props.xxxxxxx读取和操作状态</span><br></pre></td></tr></table></figure><h1 id="7-10-combineReducers"><a href="#7-10-combineReducers" class="headerlink" title="7.10 combineReducers"></a>7.10 combineReducers</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore, applyMiddleware,combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/people&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</span><br><span class="line">  <span class="attr">count</span>:countReducer,</span><br><span class="line">  <span class="attr">persons</span>:personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, applyMiddleware(thunk));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-11-使用上-redux-调试工具"><a href="#7-11-使用上-redux-调试工具" class="headerlink" title="7.11 使用上 redux 调试工具"></a>7.11 使用上 redux 调试工具</h1><h2 id="7-11-1-安装-chrome-浏览器插件"><a href="#7-11-1-安装-chrome-浏览器插件" class="headerlink" title="7.11.1 安装 chrome 浏览器插件"></a>7.11.1 安装 chrome 浏览器插件</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658402230018-458a8165-1c99-4001-8c19-2c850df0388e.png#clientId=ufe0c64eb-430e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=266&id=u21d2a084&margin=%5Bobject%20Object%5D&name=image.png&originHeight=532&originWidth=1536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57568&status=done&style=none&taskId=uce136f7d-fdd5-4ea8-b381-41813bee659&title=&width=768" alt="image.png"></p><h2 id="7-11-2-下载工具依赖包"><a href="#7-11-2-下载工具依赖包" class="headerlink" title="7.11.2 下载工具依赖包"></a>7.11.2 下载工具依赖包</h2><p><code>npm install --save-dev redux-devtools-extension </code></p><h2 id="7-11-3-store中进行配置"><a href="#7-11-3-store中进行配置" class="headerlink" title="7.11.3 store中进行配置"></a>7.11.3 store中进行配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore, applyMiddleware,combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/people&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</span><br><span class="line">  <span class="attr">count</span>:countReducer,</span><br><span class="line">  <span class="attr">persons</span>:personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, composeWithDevTools(applyMiddleware(thunk)));</span><br></pre></td></tr></table></figure><h1 id="7-12-纯函数和高阶函数"><a href="#7-12-纯函数和高阶函数" class="headerlink" title="7.12 纯函数和高阶函数"></a>7.12 纯函数和高阶函数</h1><h2 id="7-12-1-纯函数"><a href="#7-12-1-纯函数" class="headerlink" title="7.12.1 纯函数"></a>7.12.1 纯函数</h2><ol><li><p>一类特别的函数: 只要是同样的输入(实参)，必定得到同样的输出(返回)</p></li><li><p>必须遵守以下一些约束</p><ol><li>不得改写参数数据</li><li>不会产生任何副作用，例如网络请求，输入和输出设备</li><li>不能调用 Date.now()或者 Math.random()等不纯的方法</li></ol></li><li><p>redux 的 reducer 函数必须是一个纯函数</p></li></ol><h2 id="7-12-2-高阶函数"><a href="#7-12-2-高阶函数" class="headerlink" title="7.12.2 高阶函数"></a>7.12.2 高阶函数</h2><ol><li><p>理解: 一类特别的函数</p><ol><li>情况 1: 参数是函数</li><li>情况 2: 返回是函数</li></ol></li><li><p>常见的高阶函数:</p><ol><li><p>定时器设置函数</p></li><li><p>数组的 forEach()/map()/filter()/reduce()/find()/bind()</p></li><li><p>promise</p></li><li><p>react-redux 中的 connect 函数</p></li></ol></li><li><p>作用: 能实现更加动态, 更加可扩展的功能</p></li></ol><h1 id="7-13-serve-插件"><a href="#7-13-serve-插件" class="headerlink" title="7.13 serve 插件"></a>7.13 serve 插件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 6 章  React UI 组件库</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-流行的开源-React-UI-组件库"><a href="#6-1-流行的开源-React-UI-组件库" class="headerlink" title="6.1.流行的开源 React UI 组件库"></a>6.1.流行的开源 React UI 组件库</h1><h2 id="6-1-1-material-ui-国外"><a href="#6-1-1-material-ui-国外" class="headerlink" title="6.1.1. material-ui(国外)"></a>6.1.1. material-ui(国外)</h2><ol><li><p>官网: <a href="http://www.material-ui.com/#/">http://www.material-ui.com/#/</a></p></li><li><p>github: <a href="https://github.com/callemall/material-ui">https://github.com/callemall/material-ui</a></p></li></ol><h2 id="6-1-2-ant-design-国内蚂蚁金服"><a href="#6-1-2-ant-design-国内蚂蚁金服" class="headerlink" title="6.1.2. ant-design(国内蚂蚁金服)"></a>6.1.2. ant-design(国内蚂蚁金服)</h2><ol><li><p>官网: <a href="https://ant.design/index-cn">https://ant.design/index-cn</a></p></li><li><p>Github: <a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></p></li></ol><h2 id="6-1-3-antd的按需引入-自定主题"><a href="#6-1-3-antd的按需引入-自定主题" class="headerlink" title="6.1.3 antd的按需引入+自定主题"></a>6.1.3 antd的按需引入+自定主题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.安装依赖：yarn add react-app-rewired customize-cra babel-plugin-import less less-loader@6</span><br><span class="line"></span><br><span class="line">2.修改package.json</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="line">  &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ....</span><br><span class="line">3.根目录下创建config-overrides.js</span><br><span class="line"></span><br><span class="line">  //配置具体的修改规则</span><br><span class="line">  const &#123; override, fixBabelImports,addLessLoader&#125; = require(&#x27;customize-cra&#x27;);</span><br><span class="line">    module.exports = override(</span><br><span class="line">    fixBabelImports(&#x27;import&#x27;, &#123;</span><br><span class="line">      libraryName: &#x27;antd&#x27;,</span><br><span class="line">      libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">      style: true,</span><br><span class="line">  &#125;),</span><br><span class="line">  addLessLoader(&#123;</span><br><span class="line">    lessOptions:&#123;</span><br><span class="line">      javascriptEnabled: true,</span><br><span class="line">      modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;green&#x27; &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">4.备注：不用在组件里亲自引入样式了，即：import &#x27;antd/dist/antd.css&#x27;应该删掉</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 5 章  React 路由</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="5-1-相关理解"><a href="#5-1-相关理解" class="headerlink" title="5.1. 相关理解"></a>5.1. 相关理解</h1><h2 id="5-1-1-SPA-的理解"><a href="#5-1-1-SPA-的理解" class="headerlink" title="5.1.1. SPA 的理解"></a>5.1.1. SPA 的理解</h2><ol><li><p>单页 <strong>Web 应用（single page web application，SPA）</strong>。</p></li><li><p>整个应用只有<strong>一个完整的页面</strong>。</p></li><li><p>点击页面中的链接<strong>不会刷新页面</strong>，只会做<strong>页面的局部更新</strong>。</p></li><li><p>数据都需要通过 <strong>ajax 请求获取</strong>, 并在<strong>前端异步展现</strong>。</p></li></ol><h2 id="5-1-2-路由的理解"><a href="#5-1-2-路由的理解" class="headerlink" title="5.1.2. 路由的理解"></a>5.1.2. 路由的理解</h2><ol><li><p>什么是路由?</p><ol><li><p>一个<strong>路由</strong>就是一个<strong>映射关系</strong><code>(key:value)</code></p></li><li><p>key 为<strong>路径</strong>, value 可能是 <code>function</code> 或 <code>component</code></p></li></ol></li><li><p>路由分类 </p><ol><li><p><strong>后端路由：</strong></p><ol><li><p>理解： <strong>value <strong>是 <strong>function</strong>, 用来</strong>处理客户端提交的请求。</strong></p></li><li><p>注册路由： <code>router.get(path, function(req, res))</code></p></li><li><p>工作过程：当** node 接收到一个请求<strong>时, 根据请求路径</strong>找到匹配的路由**, 调用路由中的<strong>函数来处理请求</strong>, <strong>返回响应数据</strong></p></li></ol></li><li><p><strong>前端路由：</strong></p><ol><li><p>浏览器端路由，<strong>value <strong>是 <strong>component</strong>，用于</strong>展示页面内容。</strong></p></li><li><p>注册路由: <code>&lt;Route path=&quot;/test&quot; component=&#123;Test&#125;&gt; </code></p></li><li><p>工作过程：<strong>当浏览器的 path 变为</strong><code>**/test **</code><strong>时</strong>, 当前<strong>路由组件就会变为 Test 组件</strong></p></li></ol></li></ol></li></ol><h2 id="5-1-3-react-router-dom-的理解"><a href="#5-1-3-react-router-dom-的理解" class="headerlink" title="5.1.3. react-router-dom 的理解"></a>5.1.3. react-router-dom 的理解</h2><ol><li><p>react 的一个插件库。</p></li><li><p>专门用来实现一个 SPA 应用。</p></li><li><p>基于 react 的项目基本都会用到此库。</p></li></ol><h1 id="5-2-react-router-dom-相关-API"><a href="#5-2-react-router-dom-相关-API" class="headerlink" title="5.2. react-router-dom 相关 API"></a>5.2. react-router-dom 相关 API</h1><p>安装</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom@<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="5-2-1-内置组件"><a href="#5-2-1-内置组件" class="headerlink" title="5.2.1. 内置组件"></a>5.2.1. 内置组件</h2><ol><li><p> <code>&lt;BrowserRouter&gt;</code></p></li><li><p><code>&lt;HashRouter&gt;</code></p></li><li><p><code>&lt;Route&gt;</code></p></li><li><p><code>&lt;Redirect&gt;</code></p></li><li><p> <code>&lt;Link&gt;</code></p></li><li><p><code>&lt;NavLink&gt;</code></p></li><li><p><code>&lt;Switch&gt; </code></p></li></ol><h2 id="5-2-2-其它"><a href="#5-2-2-其它" class="headerlink" title="5.2.2. 其它"></a>5.2.2. 其它</h2><ol><li><p>history 对象</p></li><li><p>match 对象</p></li><li><p>withRouter 函数 </p></li></ol><h1 id="5-3-路由基本使用"><a href="#5-3-路由基本使用" class="headerlink" title="5.3 路由基本使用"></a>5.3 路由基本使用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.明确好界面中的导航区、展示区</span><br><span class="line"></span><br><span class="line">2.导航区的a标签改为Link标签</span><br><span class="line"></span><br><span class="line">&lt;Link to=&quot;/xxxxx&quot;&gt;Demo&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">3.展示区写Route标签进行路径的匹配</span><br><span class="line"></span><br><span class="line">&lt;Route path=&#x27;/xxxx&#x27; component=&#123;Demo&#125;/&gt;</span><br><span class="line"></span><br><span class="line">4.&lt;App&gt;的最外侧包裹了一个&lt;BrowserRouter&gt;或&lt;HashRouter&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3-1-安装react-router-dom插件"><a href="#5-3-1-安装react-router-dom插件" class="headerlink" title="5.3.1 安装react-router-dom插件"></a>5.3.1 安装react-router-dom插件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom@<span class="number">5</span> --save</span><br></pre></td></tr></table></figure><h2 id="5-3-2-代码"><a href="#5-3-2-代码" class="headerlink" title="5.3.2 代码"></a>5.3.2 代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, Route, HashRouter <span class="keyword">as</span> Router &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Link className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/Link&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="5-3-3-注意"><a href="#5-3-3-注意" class="headerlink" title="5.3.3 注意"></a>5.3.3 注意</h2><ul><li>Router标签必须包在整个App的外面</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter <span class="keyword">as</span> Router &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&quot;.root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-4-路由组件与一般组件"><a href="#5-4-路由组件与一般组件" class="headerlink" title="5.4 路由组件与一般组件"></a>5.4 路由组件与一般组件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.写法不同：</span><br><span class="line"></span><br><span class="line">一般组件：&lt;Demo/&gt;</span><br><span class="line">  </span><br><span class="line">路由组件：&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</span><br><span class="line">  </span><br><span class="line">2.存放位置不同：</span><br><span class="line"></span><br><span class="line">一般组件：components</span><br><span class="line">  </span><br><span class="line">路由组件：pages</span><br><span class="line">  </span><br><span class="line">3.接收到的props不同：</span><br><span class="line"></span><br><span class="line">一般组件：写组件标签时传递了什么，就能收到什么</span><br><span class="line">  </span><br><span class="line">路由组件：接收到三个固定的属性</span><br><span class="line">  </span><br><span class="line">history:</span><br><span class="line">    </span><br><span class="line">      go: ƒ go(n)</span><br><span class="line">      </span><br><span class="line">      goBack: ƒ goBack()</span><br><span class="line">      </span><br><span class="line">      goForward: ƒ goForward()</span><br><span class="line">      </span><br><span class="line">      push: ƒ push(path, state)</span><br><span class="line">      </span><br><span class="line">      replace: ƒ replace(path, state)</span><br><span class="line">      </span><br><span class="line">location:</span><br><span class="line">    </span><br><span class="line">      pathname: &quot;/about&quot;</span><br><span class="line">      </span><br><span class="line">      search: &quot;&quot;</span><br><span class="line">      </span><br><span class="line">      state: undefined</span><br><span class="line">      </span><br><span class="line">match:</span><br><span class="line">    </span><br><span class="line">      params: &#123;&#125;</span><br><span class="line">      </span><br><span class="line">      path: &quot;/about&quot;</span><br><span class="line">      </span><br><span class="line">      url: &quot;/about&quot;</span><br></pre></td></tr></table></figure><h1 id="5-5-NavLink使用"><a href="#5-5-NavLink使用" class="headerlink" title="5.5 NavLink使用"></a>5.5 NavLink使用</h1><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;NavLink ac=<span class="string">&quot;true&quot;</span> activeClassName=<span class="string">&#x27;demo&#x27;</span>  className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/NavLink&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">ac</span>=<span class="string">&quot;true&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;demo&#x27;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">  background-color: aqua !important;</span><br><span class="line">  color: blueviolet !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-6-嵌套路由使用"><a href="#5-6-嵌套路由使用" class="headerlink" title="5.6 嵌套路由使用"></a>5.6 嵌套路由使用</h1><ol><li><p>注册子路由时要写上父路由的path值</p></li><li><p>路由的匹配是按照注册路由的顺序进行的</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Link,Route,NavLink&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home-news.html&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/nino/home/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item &quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home-message.html&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item &quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/nino/home/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home/Amessage&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-7-向路由组件传递参数数据"><a href="#5-7-向路由组件传递参数数据" class="headerlink" title="5.7 向路由组件传递参数数据"></a>5.7 向路由组件传递参数数据</h1><h2 id="5-7-1-params参数"><a href="#5-7-1-params参数" class="headerlink" title="5.7.1 params参数"></a>5.7.1 params参数</h2><p>params参数:</p><ol><li><p>路由链接(携带参数)：<code>&lt;Link to=&#39;/demo/test/tom/18&#39;&#125;&gt;详情&lt;/Link&gt;</code></p></li><li><p>注册路由(声明接收)：<code>&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;</code></p></li><li><p>接收参数：<code>this.props.match.params</code></p></li></ol><h2 id="5-7-2-search参数"><a href="#5-7-2-search参数" class="headerlink" title="5.7.2 search参数"></a>5.7.2 search参数</h2><p>search参数：</p><ul><li><p>路由链接(携带参数)：<code>&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;&#125;&gt;详情&lt;/Link&gt;</code></p></li><li><p>注册路由(无需声明，正常注册即可)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></p></li><li><p>接收参数：<code>this.props.location.search</code></p></li><li><p>备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658311026402-43903a1b-b33f-4a6f-870d-7e42687567aa.png#clientId=u556bd06e-58fa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=314&id=u8c1fcba1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=628&originWidth=1449&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119041&status=done&style=none&taskId=ua77fc404-e30d-49c0-856e-504280c8039&title=&width=724.5" alt="image.png"></p><h2 id="5-7-3-state参数"><a href="#5-7-3-state参数" class="headerlink" title="5.7.3 state参数"></a>5.7.3 state参数</h2><p>state参数：</p><ul><li><p>路由链接(携带参数)：<code>&lt;Link to=&#123;&#123;pathname:'/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;</code></p></li><li><p>注册路由(无需声明，正常注册即可)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></p></li><li><p>接收参数：<code>this.props.location.state</code></p></li><li><p>备注：刷新也可以保留住参数</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658310773880-44abcbd4-e5c3-434c-b820-92b216c700cd.png#clientId=u556bd06e-58fa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=345&id=u66153f60&margin=%5Bobject%20Object%5D&name=image.png&originHeight=689&originWidth=1525&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130523&status=done&style=none&taskId=uae452827-fc04-4c63-92d4-9aeed088e4b&title=&width=762.5" alt="image.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h1 id="5-8-编程式路由导航"><a href="#5-8-编程式路由导航" class="headerlink" title="5.8 编程式路由导航"></a>5.8 编程式路由导航</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">借助this.prosp.history对象上的API对操作路由跳转、前进、后退</span><br><span class="line"></span><br><span class="line">  -this.prosp.history.push()</span><br><span class="line"></span><br><span class="line">  -this.prosp.history.replace()</span><br><span class="line"></span><br><span class="line">  -this.prosp.history.goBack()</span><br><span class="line"></span><br><span class="line">  -this.prosp.history.goForward()</span><br><span class="line"></span><br><span class="line">  -this.prosp.history.go()</span><br></pre></td></tr></table></figure><h1 id="5-9-withRouter的使用"><a href="#5-9-withRouter的使用" class="headerlink" title="5.9 withRouter的使用"></a>5.9 withRouter的使用</h1><p>作用：</p><ul><li><p>加工一般组件，使一般组件具备路由组件特有的API</p></li><li><p>withRouter的返回值是一个新组件</p></li></ul><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;header.props&#x27;</span>,<span class="built_in">this</span>.props)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Header)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658320491571-7e53ccce-1755-4467-865c-80417cfbaf69.png#clientId=u556bd06e-58fa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=253&id=ub0326ffd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=505&originWidth=1006&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75277&status=done&style=none&taskId=udc72537d-bcbe-4aa8-9fc7-dff74d30253&title=&width=503" alt="image.png"></p><h1 id="5-10-BrowserRouter与HashRouter的区别"><a href="#5-10-BrowserRouter与HashRouter的区别" class="headerlink" title="5.10 BrowserRouter与HashRouter的区别"></a>5.10 BrowserRouter与HashRouter的区别</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.底层原理不一样：</span><br><span class="line"></span><br><span class="line">  BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。</span><br><span class="line"></span><br><span class="line">  HashRouter使用的是URL的哈希值。</span><br><span class="line"></span><br><span class="line">2.path表现形式不一样</span><br><span class="line"></span><br><span class="line">  BrowserRouter的路径中没有#,例如：localhost:3000/demo/test</span><br><span class="line"></span><br><span class="line">  HashRouter的路径包含#,例如：localhost:3000/#/demo/test</span><br><span class="line"></span><br><span class="line">3.刷新后对路由state参数的影响</span><br><span class="line"></span><br><span class="line">  (1).BrowserRouter没有任何影响，因为state保存在history对象中。</span><br><span class="line"></span><br><span class="line">  (2).HashRouter刷新后会导致路由state参数的丢失！！！</span><br><span class="line"></span><br><span class="line">4.备注：HashRouter可以用于解决一些路径错误相关的问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 4 章  React ajax</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h1><h2 id="4-1-1-前置说明"><a href="#4-1-1-前置说明" class="headerlink" title="4.1.1 前置说明"></a>4.1.1 前置说明</h2><ol><li><p>React 本身只关注于界面, 并不包含发送 ajax 请求的代码</p></li><li><p>前端应用需要通过 ajax 请求与后台进行交互(json 数据)</p></li><li><p>react 应用中需要集成第三方 ajax 库(或自己封装)</p></li></ol><h2 id="4-1-2-常用的-ajax-请求库"><a href="#4-1-2-常用的-ajax-请求库" class="headerlink" title="4.1.2 常用的 ajax 请求库"></a>4.1.2 常用的 ajax 请求库</h2><ol><li><p>jQuery: 比较重, 如果需要另外引入不建议使用</p></li><li><p>axios: 轻量级, 建议使用</p><ol><li><p>封装 XmlHttpRequest 对象的 ajax</p></li><li><p>promise 风格</p></li><li><p>可以用在浏览器端和 node 服务器端</p></li></ol></li></ol><h1 id="4-2-axios"><a href="#4-2-axios" class="headerlink" title="4.2. axios"></a>4.2. axios</h1><h2 id="4-2-1-文档"><a href="#4-2-1-文档" class="headerlink" title="4.2.1. 文档"></a>4.2.1. 文档</h2><p><a href="https://github.com/axios/axios">https://github.com/axios/axios</a> </p><h1 id="4-3-React配置代理"><a href="#4-3-React配置代理" class="headerlink" title="4.3 React配置代理"></a>4.3 React配置代理</h1><h2 id="4-3-1-方法一"><a href="#4-3-1-方法一" class="headerlink" title="4.3.1 方法一"></a>4.3.1 方法一</h2><blockquote><p>在package.json中追加如下配置</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;proxy&quot;</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p>优点：配置简单，前端请求资源时可以不加任何前缀。</p></li><li><p>缺点：不能配置多个代理。</p></li><li><p>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</p></li></ol><h2 id="4-3-2-方法二"><a href="#4-3-2-方法二" class="headerlink" title="4.3.2 方法二"></a>4.3.2 方法二</h2><ol><li> 第一步：创建代理配置文件  </li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在src下创建配置文件：src/setupProxy.js</span><br></pre></td></tr></table></figure><ol start="2"><li> 编写setupProxy.js配置具体代理规则：  </li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    createProxyMiddleware(<span class="string">&#x27;/api1&#x27;</span>, &#123;  <span class="comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">        changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">        changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125; <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    createProxyMiddleware(<span class="string">&#x27;/api2&#x27;</span>, &#123; </span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</p></li><li><p>缺点：配置繁琐，前端请求资源时必须加前缀。</p></li></ol><h2 id="4-3-3-代码"><a href="#4-3-3-代码" class="headerlink" title="4.3.3 代码"></a>4.3.3 代码</h2><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getMsg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// axios.get(&#x27;http://localhost:5000/students&#x27;).then(res=&gt;&#123;console.log(res.data)&#125;,err=&gt;&#123;console.log(err.message)&#125;)</span></span><br><span class="line">  axios(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/api1/students&#x27;</span></span><br><span class="line">  &#125;).then(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(res.data) &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(err.message) &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">getCarMsg = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  axios(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api2/cars&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;).then(</span><br><span class="line">    <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(res.data)&#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(err.message)&#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658210281159-87e14544-a4fc-42fb-b24e-ac6897c1d133.png#clientId=u6898f75a-994e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=431&id=u9a7a5548&margin=%5Bobject%20Object%5D&name=image.png&originHeight=861&originWidth=1621&originalType=binary&ratio=1&rotation=0&showTitle=false&size=129626&status=done&style=none&taskId=uba5dfba7-ab90-4d98-88db-37496ccd090&title=&width=810.5" alt="image.png"></p><h1 id="4-4-案例—github-用户搜索"><a href="#4-4-案例—github-用户搜索" class="headerlink" title="4.4 案例—github 用户搜索"></a>4.4 案例—github 用户搜索</h1><p>请求地址: <a href="https://api.github.com/search/users?q=xxxxxx">https://api.github.com/search/users?q=xxxxxx</a> </p><h1 id="4-5-消息订阅-发布机制"><a href="#4-5-消息订阅-发布机制" class="headerlink" title="4.5 消息订阅-发布机制"></a>4.5 消息订阅-发布机制</h1><ol><li><p>工具库: PubSubJS</p></li><li><p>下载: npm install pubsub-js –save</p></li><li><p>使用:</p><ol><li>import PubSub from ‘pubsub-js’ //引入</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>PubSub.subscribe(‘delete’, function(data){ }); //订阅</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentDidMount =<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;updateState&#x27;</span>,<span class="function">(<span class="params">_,stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;list订阅的消息更新了&#x27;</span>,stateObj)</span><br><span class="line">    <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnmount = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  PubSub.unsubscribe(<span class="built_in">this</span>.token)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>PubSub.publish(‘delete’, data) //发布消息</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">isFirst</span>: <span class="literal">false</span>, <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>代码：</p><p>List代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state=&#123;</span><br><span class="line">    <span class="attr">users</span>:[],</span><br><span class="line">    <span class="attr">isFirst</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">isLoading</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">err</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount =<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;updateState&#x27;</span>,<span class="function">(<span class="params">_,stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;list订阅的消息更新了&#x27;</span>,stateObj)</span><br><span class="line">      <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    PubSub.unsubscribe(<span class="built_in">this</span>.token)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; users ,isFirst,isLoading,err&#125; = <span class="built_in">this</span>.state<span class="comment">//html_url,avatar_url,login</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">          isFirst?<span class="tag">&lt;<span class="name">h2</span>&gt;</span>输入关键词，点击搜索<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:</span></span><br><span class="line"><span class="xml">          isLoading?<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Loading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:</span></span><br><span class="line"><span class="xml">          err?<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:</span></span><br><span class="line"><span class="xml">          users.map((user) =&gt; &#123;</span></span><br><span class="line"><span class="xml">            return (<span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;user.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&#x27;avatar&#x27;</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100px</span>&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;user.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Search代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索github用户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> &#123; this.input = c &#125;&#125; type=&quot;text&quot; placeholder=&quot;输入关键词搜索&quot; /&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; input &#125; = <span class="built_in">this</span></span><br><span class="line">    <span class="built_in">console</span>.log(input.value)</span><br><span class="line">    <span class="comment">// this.props.updateAppState(&#123;isFirst:false,isLoading:true&#125;)</span></span><br><span class="line">    PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">isFirst</span>: <span class="literal">false</span>, <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    axios(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;input.value&#125;</span>`</span></span><br><span class="line">    &#125;).then(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">        <span class="comment">// this.props.updateAppState(&#123;users:res.data.items,isLoading:false,err:&quot;&quot;&#125;)</span></span><br><span class="line">        PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">users</span>: res.data.items, <span class="attr">isLoading</span>: <span class="literal">false</span>, <span class="attr">err</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.message)</span><br><span class="line">        <span class="comment">// this.props.updateAppState(&#123;err:err.message,isLoading:false&#125;)</span></span><br><span class="line">        PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">err</span>: err.message, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    input.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-6-扩展：Fetch"><a href="#4-6-扩展：Fetch" class="headerlink" title="4.6 扩展：Fetch"></a>4.6 扩展：Fetch</h1><h2 id="4-6-1-文档"><a href="#4-6-1-文档" class="headerlink" title="4.6.1. 文档"></a>4.6.1. 文档</h2><ol><li><p><a href="https://github.github.io/fetch/">https://github.github.io/fetch/</a></p></li><li><p><a href="https://segmentfault.com/a/1190000003810652">https://segmentfault.com/a/1190000003810652</a></p></li></ol><h2 id="4-6-2-特点"><a href="#4-6-2-特点" class="headerlink" title="4.6.2. 特点"></a>4.6.2. 特点</h2><ol start="3"><li>fetch: 原生函数，不再使用 XmlHttpRequest 对象提交 ajax 请求</li><li>老版本浏览器可能不支持</li></ol><h2 id="4-6-3-代码"><a href="#4-6-3-代码" class="headerlink" title="4.6.3 代码"></a>4.6.3 代码</h2><p>简单写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fetch的简单写法</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;input.value&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> res.json()</span><br><span class="line">  PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">users</span>: data.items, <span class="attr">isLoading</span>: <span class="literal">false</span>, <span class="attr">err</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">  <span class="comment">//console.log(&#x27;easyeasyeasy&#x27;,data.items)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  PubSub.publish(<span class="string">&#x27;updateState&#x27;</span>, &#123; <span class="attr">err</span>: e.message, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  <span class="comment">//console.log(&#x27;wwwwwwwwwwwwwwwwwwwww&#x27;,e)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">        <span class="comment">//fetch的复杂写法</span></span><br><span class="line">fetch(<span class="string">&#x27;https://api.github.com/search/users?q=nino&#x27;</span>)</span><br><span class="line">  .then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>) ;<span class="keyword">return</span> res.json()&#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>,err);<span class="keyword">return</span> err &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(res.items) &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(err.message) &#125;</span><br><span class="line">) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 3 章  React 应用(基于 React 脚手架)</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-使用-create-react-app-创建-react-应用"><a href="#3-1-使用-create-react-app-创建-react-应用" class="headerlink" title="3.1 使用 create-react-app 创建 react 应用"></a>3.1 使用 create-react-app 创建 react 应用</h1><h2 id="3-1-1-react-脚手架"><a href="#3-1-1-react-脚手架" class="headerlink" title="3.1.1 react 脚手架"></a>3.1.1 react 脚手架</h2><ol><li><p>xxx 脚手架: 用来帮助程序员快速创建一个基于 xxx 库的模板项目</p><ol><li><p>包含了所有需要的配置（语法检查、jsx 编译、devServer…）</p></li><li><p>下载好了所有相关的依赖</p></li><li><p>可以直接运行一个简单效果</p></li></ol></li><li><p>react 提供了一个用于创建 react 项目的脚手架库: create-react-app</p></li><li><p>项目的整体技术架构为: react + webpack + es6 + eslint</p></li><li><p>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p></li></ol><h2 id="3-1-2-创建项目并启动"><a href="#3-1-2-创建项目并启动" class="headerlink" title="3.1.2 创建项目并启动"></a>3.1.2 创建项目并启动</h2><ol><li><p>第一步，全局安装：npm i -g create-react-app</p></li><li><p>第二步，切换到想创建项目的目录，使用命令：create-react-app h</p></li><li><p>第三步，进入项目文件夹：cd hello-react</p></li><li><p>第四步，启动项目：npm start </p></li></ol><h2 id="3-1-3-react-脚手架项目结构"><a href="#3-1-3-react-脚手架项目结构" class="headerlink" title="3.1.3 react 脚手架项目结构"></a>3.1.3 react 脚手架项目结构</h2><ul><li><p>public —- 静态资源文件夹</p></li><li><p>favicon.icon —— 网站页签图标</p></li><li><p>index.html ——– 主页面</p></li><li><p>logo192.png ——- logo 图</p></li><li><p>logo512.png ——- logo 图</p></li><li><p>manifest.json —– 应用加壳的配置文件</p></li><li><p>robots.txt ——– 爬虫协议文件</p></li><li><p>src —- 源码文件夹</p></li><li><p>App.css ——– App 组件的样式</p></li><li><p>App.js ——— App 组件</p></li><li><p>App.test.js —- 用于给 App 做测试</p></li><li><p>index.css —— 样式</p></li><li><p>index.js ——- 入口文件</p></li><li><p>logo.svg ——- logo 图</p></li><li><p>reportWebVitals.js— 页面性能分析文件(需要 web-vitals 库的支持)</p></li><li><p>setupTests.js—- 组件单元测试的文件(需要 jest-dom 库的支持) </p></li></ul><h1 id="3-2-组件的组合使用-TodoList"><a href="#3-2-组件的组合使用-TodoList" class="headerlink" title="3.2 组件的组合使用-TodoList"></a>3.2 组件的组合使用-TodoList</h1><h2 id="3-2-1、todoList案例相关知识点"><a href="#3-2-1、todoList案例相关知识点" class="headerlink" title="3.2.1、todoList案例相关知识点"></a>3.2.1、todoList案例相关知识点</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.拆分组件、实现静态组件，注意：className、style的写法</span><br><span class="line">2.动态初始化列表，如何确定将数据放在哪个组件的state中？</span><br><span class="line">——某个组件使用：放在其自身的state中</span><br><span class="line">——某些组件使用：放在他们共同的父组件state中（官方称此操作为：状态提升）</span><br><span class="line">3.关于父子之间通信：</span><br><span class="line">1.【父组件】给【子组件】传递数据：通过props传递</span><br><span class="line">2.【子组件】给【父组件】传递数据：通过props传递，要求父提前给子传递一个函数</span><br><span class="line">4.注意defaultChecked 和 checked的区别，类似的还有：defaultValue 和 value</span><br><span class="line">5.状态在哪里，操作状态的方法就在哪里</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 2 章  React 面向组件编程</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="2-1-基本理解和使用"><a href="#2-1-基本理解和使用" class="headerlink" title="2.1 基本理解和使用"></a>2.1 基本理解和使用</h1><h2 id="2-1-1-使用React开发者工具调试"><a href="#2-1-1-使用React开发者工具调试" class="headerlink" title="2.1.1 使用React开发者工具调试"></a>2.1.1 使用React开发者工具调试</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657931729403-ac6fb03b-7409-4f05-86fe-12c30d43ff44.png#clientId=uaa93a018-086a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=137&id=ufbfe81ef&margin=%5Bobject%20Object%5D&name=image.png&originHeight=274&originWidth=1168&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37024&status=done&style=none&taskId=u5ac4bd7b-8f55-4662-acab-303ef644488&title=&width=584" alt="image.png"></p><h2 id="2-1-2-效果"><a href="#2-1-2-效果" class="headerlink" title="2.1.2 效果"></a>2.1.2 效果</h2><ul><li>函数式组件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建函数式组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//此处的this为undefined，以为babel编译后开启了严格模式</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件（适用于简单组件的定义）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br></pre></td></tr></table></figure><p>执行了ReactDOM.(….之后，发生了什么)</p><ol><li><p>React解析组件标签，找到了MyComponent组件</p></li><li><p>发现组件是用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657934182772-8013cc66-5716-465a-810b-e11c174f79d1.png#clientId=uaa93a018-086a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=366&id=ua9785460&margin=%5Bobject%20Object%5D&name=image.png&originHeight=731&originWidth=1595&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55566&status=done&style=none&taskId=uaf173775-a10b-4d08-bd28-b4ca4c7df26&title=&width=797.5" alt="image.png"></p><ul><li>类式组件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件（适用于复杂组件的定义）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br></pre></td></tr></table></figure><p>执行了ReactDOM.(….之后，发生了什么)</p><ol><li><p>React解析组件标签，找到了MyComponent组件</p></li><li><p>发现组件是用类定义的，随后new出来该类的实例，并通过该实例调用到原型的render方法</p></li><li><p>将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657940832226-4dd347aa-a8e4-4a11-81f9-880121a00fdb.png#clientId=uaa93a018-086a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=336&id=uf995f461&margin=%5Bobject%20Object%5D&name=image.png&originHeight=671&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=139883&status=done&style=none&taskId=u65e503f2-ff43-4083-be23-a020bb65de6&title=&width=960" alt="image.png"></p><h2 id="2-1-3-注意"><a href="#2-1-3-注意" class="headerlink" title="2.1.3 注意"></a>2.1.3 注意</h2><ul><li><p>组件名必须大写</p></li><li><p>虚拟DOM元素只能有一个根元素</p></li><li><p>虚拟DOM元素必须有结束标签</p></li></ul><h2 id="2-1-4-渲染类组件标签的基本流程"><a href="#2-1-4-渲染类组件标签的基本流程" class="headerlink" title="2.1.4 渲染类组件标签的基本流程"></a>2.1.4 渲染类组件标签的基本流程</h2><ul><li><p>React内部会创建组件实例对象</p></li><li><p>调用render（）得到虚拟DOM，并解析为真实DOM</p></li><li><p>插入到指定的页面元素内部</p></li></ul><h1 id="2-2-组件三大核心属性1：state"><a href="#2-2-组件三大核心属性1：state" class="headerlink" title="2.2 组件三大核心属性1：state"></a>2.2 组件三大核心属性1：state</h1><h2 id="2-2-1-理解"><a href="#2-2-1-理解" class="headerlink" title="2.2.1 理解"></a>2.2.1 理解</h2><ul><li><p>state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</p></li><li><p>组件被称为状态机，通过更新组件的state来更新对应的页面显示（重新渲染组件）</p></li></ul><h2 id="2-2-2-注意"><a href="#2-2-2-注意" class="headerlink" title="2.2.2 注意"></a>2.2.2 注意</h2><ul><li><p>组件中render方法中的this为组件实例对象</p></li><li><p>组件自定义方法中this为undefined，如何解决？</p><ul><li><p>强制绑定this，通过函数对象的bind()</p></li><li><p>箭头函数</p></li></ul></li><li><p>状态数据，不能直接修改或更新。要用this.setState({})</p></li></ul><h2 id="2-2-3-代码"><a href="#2-2-3-代码" class="headerlink" title="2.2.3 代码"></a>2.2.3 代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//初始化状态</span></span><br><span class="line">  state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">//读取状态</span></span><br><span class="line">    <span class="keyword">const</span> &#123; isHot &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自定义方法 ：赋值语句 + 自定义方法</span></span><br><span class="line">  changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">isHot</span>: !isHot &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/25602002/1657963219827-21a00ee2-867e-4df6-b3c7-daf9fce9ceff.gif#clientId=uaa93a018-086a-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ua20fc4cf&margin=%5Bobject%20Object%5D&name=%E5%8A%A8%E7%94%BB.gif&originHeight=230&originWidth=628&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74614&status=done&style=none&taskId=u5b8c23be-ee6a-4148-ba3e-a2c2aa64f4f&title=" alt="动画.gif"></p><h1 id="2-3-组件三大核心属性2：props"><a href="#2-3-组件三大核心属性2：props" class="headerlink" title="2.3 组件三大核心属性2：props"></a>2.3 组件三大核心属性2：props</h1><h2 id="2-3-1-理解"><a href="#2-3-1-理解" class="headerlink" title="2.3.1 理解"></a>2.3.1 理解</h2><ul><li><p>每个组件对象都会有props(properties的简写)属性</p></li><li><p>组件标签的所有属性都保存在props中</p></li></ul><h2 id="2-3-2-作用"><a href="#2-3-2-作用" class="headerlink" title="2.3.2 作用"></a>2.3.2 作用</h2><ul><li><p>通过标签属性从组件外向组件内传递变化的数据</p></li><li><p>注意：组件内部不要修改props数据</p></li></ul><h2 id="2-3-3-代码"><a href="#2-3-3-代码" class="headerlink" title="2.3.3 代码"></a>2.3.3 代码</h2><p>类式组件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//需要this.state,this.props,this.refs的时候才需要构造</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props)</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.props)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对标签属性进行类型，必要性的限制</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,<span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,<span class="comment">//限制sex为字符串</span></span><br><span class="line">    <span class="attr">age</span>: PropTypes.number,<span class="comment">//限制age为数值</span></span><br><span class="line">    <span class="attr">speak</span>: PropTypes.func<span class="comment">//限制speak为函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//指定标签默认属性</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;雌雄莫辨&#x27;</span>,<span class="comment">//sex默认值为&#x27;雌雄莫辨&#x27;</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span><span class="comment">//age默认值为20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;rxl&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;nino&#x27;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test1&#x27;</span>))</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span> <span class="attr">age</span>=<span class="string">&#123;23&#125;</span> <span class="attr">sex</span>=<span class="string">&#x27;male&#x27;</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test2&#x27;</span>))</span><br><span class="line"><span class="comment">// ReactDOM.render(&lt;Person name=&#x27;rxl&#x27; age=&#x27;22&#x27; sex=&#x27;female&#x27;  /&gt;, document.querySelector(&#x27;#test3&#x27;)) </span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>  &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test3&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;speakspeakspeak&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式组件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, sex &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对标签属性进行类型，必要性的限制</span></span><br><span class="line">Person.propTypes = &#123;</span><br><span class="line">  <span class="attr">name</span>: PropTypes.string.isRequired,<span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">  <span class="attr">sex</span>: PropTypes.string,<span class="comment">//限制sex为字符串</span></span><br><span class="line">  <span class="attr">age</span>: PropTypes.number,<span class="comment">//限制age为数值</span></span><br><span class="line">  <span class="attr">speak</span>: PropTypes.func<span class="comment">//限制speak为函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定标签默认属性</span></span><br><span class="line">Person.defaultProps = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;雌雄莫辨&#x27;</span>,<span class="comment">//sex默认值为&#x27;雌雄莫辨&#x27;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span><span class="comment">//age默认值为20</span></span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;nino&#x27;</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="2-3-4-效果"><a href="#2-3-4-效果" class="headerlink" title="2.3.4 效果"></a>2.3.4 效果</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657979030453-5e49713e-a128-4498-acf1-c56d3e4caf00.png#clientId=uaa93a018-086a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=411&id=u74858170&margin=%5Bobject%20Object%5D&name=image.png&originHeight=821&originWidth=1636&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58384&status=done&style=none&taskId=u1612c11a-5865-4d7f-a0ac-7cb40a09f51&title=&width=818" alt="image.png"></p><h1 id="2-4-组件三大核心属性3：refs与事件处理"><a href="#2-4-组件三大核心属性3：refs与事件处理" class="headerlink" title="2.4 组件三大核心属性3：refs与事件处理"></a>2.4 组件三大核心属性3：refs与事件处理</h1><h2 id="2-4-1-理解"><a href="#2-4-1-理解" class="headerlink" title="2.4.1 理解"></a>2.4.1 理解</h2><p>组件内的标签可以定义 ref 属性来标识自己 </p><h2 id="2-4-2-代码"><a href="#2-4-2-代码" class="headerlink" title="2.4.2 代码"></a>2.4.2 代码</h2><ol><li>字符串形式的 ref</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input ref=<span class="string">&quot;input1&quot;</span>/&gt;</span><br><span class="line"><span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span>.refs</span><br><span class="line"><span class="built_in">console</span>.log(input1.value)</span><br><span class="line">alert(input1.value)</span><br></pre></td></tr></table></figure><ol start="2"><li>回调形式的 ref</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;<span class="built_in">this</span>.input1 = c&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line"><span class="built_in">console</span>.log(input1.value)</span><br><span class="line">alert(input1.value)</span><br></pre></td></tr></table></figure><ol start="3"><li>createRef 创建 ref 容器·</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">本身是一个函数，调用后可返回一个容器，该容器可以存储被ref所标识的节点,该容器是‘专人专用’的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">myRef = React.createRef()</span><br><span class="line">&lt;input ref=&#123;<span class="built_in">this</span>.myRef&#125;/&gt;</span><br><span class="line">alert(<span class="built_in">this</span>.myRef.current.value)</span><br></pre></td></tr></table></figure><h2 id="2-4-3-事件处理"><a href="#2-4-3-事件处理" class="headerlink" title="2.4.3 事件处理"></a>2.4.3 事件处理</h2><ol><li><p>通过 onXxx 属性指定事件处理函数(注意大小写)</p><ol><li><p>React 使用的是自定义(合成)事件, 而不是使用的原生 DOM 事件（为了更好的兼容性）</p></li><li><p>React 中的事件是通过事件委托方式处理的(委托给组件最外层的元素)（为了更高效）</p></li></ol></li></ol><ol start="2"><li>通过 event.target 得到发生事件的 DOM 元素对象（不要过度使用）</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">showData = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-5-收集表单数据"><a href="#2-5-收集表单数据" class="headerlink" title="2.5 收集表单数据"></a>2.5 收集表单数据</h1><h2 id="2-5-1-理解"><a href="#2-5-1-理解" class="headerlink" title="2.5.1 理解"></a>2.5.1 理解</h2><p>包含表单的组件分类</p><ul><li><p>受控组件</p><ul><li><p>将数据通过事件处理保存到state中</p></li><li><p>再从state中取出来</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  state=&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.renorchid.xyz&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username=c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password=c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">   &#125;</span><br><span class="line">   handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">     e.preventDefault()</span><br><span class="line">     <span class="keyword">const</span> &#123;username,password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">     alert(<span class="string">`你输入的用户名是<span class="subst">$&#123;username&#125;</span>,密码是<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   saveUsername = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;@&#x27;</span>,e.target.value)</span><br><span class="line">     <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:e.target.value&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   savePassword = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;@&#x27;</span>,e.target.value)</span><br><span class="line">     <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:e.target.value&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>非受控组件</p><ul><li>随用随取</li></ul></li></ul><h1 id="2-6-函数柯里化"><a href="#2-6-函数柯里化" class="headerlink" title="2.6 函数柯里化"></a>2.6 函数柯里化</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.renorchid.xyz&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormdata(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot; /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormdata(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">saveFormdata = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="built_in">this</span>.setState(&#123; [dataType]: e.target.value &#125;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><ul><li><p>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</p></li><li><p>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</p></li><li><p>常见的高阶函数有：**Promise、setTimeout、arr.map()**等等  </p></li></ul></li><li><p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sum(a)&#123;</span><br><span class="line">  return(b)=&gt;&#123;</span><br><span class="line">    return (c)=&gt;&#123;</span><br><span class="line">    return a+b+c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-7-组件的生命周期"><a href="#2-7-组件的生命周期" class="headerlink" title="2.7 组件的生命周期"></a>2.7 组件的生命周期</h1><h2 id="2-7-1-理解"><a href="#2-7-1-理解" class="headerlink" title="2.7.1 理解"></a>2.7.1 理解</h2><ol><li><p>组件从创建到死亡它会经历一些特定的阶段。</p></li><li><p>React 组件中包含一系列钩子函数(生命周期回调函数), 会在特定的时刻</p></li><li><p>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作</p></li></ol><h2 id="2-7-2-生命周期流程图-旧"><a href="#2-7-2-生命周期流程图-旧" class="headerlink" title="2.7.2 生命周期流程图(旧)"></a>2.7.2 生命周期流程图(旧)</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658046214569-e547adb5-0474-4303-9585-a6b3ce09bd60.png#clientId=u610a2c05-b67f-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u4b5f47b2&margin=%5Bobject%20Object%5D&name=2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%28%E6%97%A7%29.png&originHeight=670&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44022&status=done&style=none&taskId=u21debf1c-da18-4906-a169-229afb05dc2&title=" alt="2_react生命周期(旧).png"></p><p>生命周期的三个阶段（旧）</p><ol><li><p>初始化阶段: 由 ReactDOM.render()触发—初次渲染 </p><ol><li><p>constructor()</p></li><li><p>componentWillMount()</p></li><li><p>render()</p></li><li><p>componentDidMount()</p></li></ol></li><li><p>更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发 </p><ol><li><p>shouldComponentUpdate()</p></li><li><p>componentWillUpdate()</p></li><li><p>render()</p></li><li><p>componentDidUpdate()</p></li></ol></li><li><p>卸载组件: 由 ReactDOM.unmountComponentAtNode()触发 </p><ol><li>componentWillUnmount()</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建组件 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;count----constuctor&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;count----render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>点我销毁<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forceupdate&#125;</span>&gt;</span>点我强制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">forceupdate = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.forceUpdate()</span><br><span class="line">&#125;</span><br><span class="line">add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">  <span class="built_in">console</span>.log(count)</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----componentWillMount&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----componentDidMount&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----componentWillUnmount&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----shouldComponentUpdate&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----componentWillUpdate&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;count----componentDidUpdate&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">death</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  state=&#123;<span class="attr">cpName</span>:<span class="string">&#x27;军烨&#x27;</span>&#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我最喜欢的cp是&#123;this.state.cpName&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeName&#125;</span>&gt;</span>点击切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">B</span> <span class="attr">cpName</span>=<span class="string">&#123;this.state.cpName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">changeName = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;cpName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;<span class="attr">cpName</span>:<span class="string">&quot;周侯&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.cpName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;B--componentWillReceiveProps&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;B----shouldComponentUpdate&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;B----componentWillUpdate&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;B----componentDidUpdate&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 渲染虚拟DOM到页面 */</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">A</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="2-7-2-生命周期流程图-新"><a href="#2-7-2-生命周期流程图-新" class="headerlink" title="2.7.2 生命周期流程图(新)"></a>2.7.2 生命周期流程图(新)</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658063461849-5e59a357-0ae0-4845-a82c-dff38f5a9735.png#clientId=u610a2c05-b67f-4&crop=0&crop=0&crop=1&crop=1&from=drop&height=406&id=u6dc056e1&margin=%5Bobject%20Object%5D&name=3_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%28%E6%96%B0%29.png&originHeight=788&originWidth=1133&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66531&status=done&style=none&taskId=ue80f2d64-fc7a-47c4-b065-68d08ecf0f2&title=&width=584.4000244140625" alt="3_react生命周期(新).png"></p><p>生命周期的三个阶段（新）</p><ol><li><p>初始化阶段: 由 ReactDOM.render()触发—初次渲染</p><ol><li><p>constructor()</p></li><li><p>getDerivedStateFromProps</p></li><li><p>render()</p></li><li><p>componentDidMount()</p></li></ol></li><li><p>更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发</p><ol><li><p>getDerivedStateFromProps</p></li><li><p>shouldComponentUpdate()</p></li><li><p>render()</p></li><li><p>getSnapshotBeforeUpdate</p></li><li><p>componentDidUpdate()</p></li></ol></li><li><p>卸载组件: 由 ReactDOM.unmountComponentAtNode()触发</p><ol><li>componentWillUnmount()</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .list &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      background-color: aqua;</span><br><span class="line">      overflow: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .news &#123;</span><br><span class="line">      height: 30px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 容器 --&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  &lt;!-- 引入react-dom，用于支持react操作dom --&gt;</span><br><span class="line">  &lt;script src=&quot;../17.0.1/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;../17.0.1/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入Babel，用于将jsx转为js --&gt;</span><br><span class="line">  &lt;script src=&quot;../17.0.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 一定要写babel --&gt;</span><br><span class="line">  &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    class NewsList extends React.Component &#123;</span><br><span class="line">      state = &#123; newsArr: [] &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;div ref=&#x27;list&#x27; className=&quot;list&quot;&gt;</span><br><span class="line">            &#123;this.state.newsArr.map((n,index)=&gt;&#123;</span><br><span class="line">              return &lt;div className=&#x27;news&#x27; key=&#123;index&#125;&gt;&#123;n&#125;&lt;/div&gt;</span><br><span class="line">            &#125;)&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        setInterval(() =&gt; &#123;</span><br><span class="line">          const &#123; newsArr &#125; = this.state</span><br><span class="line">          const news = &#x27;新闻&#x27; + (newsArr.length + 1)</span><br><span class="line">          this.setState(&#123; newsArr: [news, ...newsArr] &#125;)</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">      getSnapshotBeforeUpdate()&#123;</span><br><span class="line">        /* const list = document.querySelector(&#x27;.list&#x27;)</span><br><span class="line">        return list.scrollHeight */</span><br><span class="line">        return this.refs.list.scrollHeight</span><br><span class="line">      &#125;</span><br><span class="line">      componentDidUpdate(prevProps,prevState,snpaValue)&#123;</span><br><span class="line">        console.log(prevProps,prevState,snpaValue)</span><br><span class="line">        console.log(this.refs.list.scrollHeight)</span><br><span class="line">        this.refs.list.scrollTop += this.refs.list.scrollHeight - snpaValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 渲染虚拟DOM到页面 */</span><br><span class="line">    ReactDOM.render(&lt;NewsList /&gt;, document.querySelector(&#x27;#test&#x27;))</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-7-3-重要的钩子"><a href="#2-7-3-重要的钩子" class="headerlink" title="2.7.3 重要的钩子"></a>2.7.3 重要的钩子</h2><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ol><li><p>render：初始化渲染或更新渲染调用</p></li><li><p>componentDidMount：开启监听, 发送 ajax 请求</p></li><li><p>componentWillUnmount：做一些收尾工作, 如: 清理定时器</p></li></ol><h2 id="2-7-4-即将废弃的勾子"><a href="#2-7-4-即将废弃的勾子" class="headerlink" title="2.7.4 即将废弃的勾子"></a>2.7.4 即将废弃的勾子</h2><ol><li><p>componentWillMount</p></li><li><p>componentWillReceiveProps</p></li><li><p>componentWillUpdate</p></li></ol><p>现在使用会出现警告，下一个大版本需要加上 UNSAFE_前缀才能使用，以后可能会被彻底废弃，不建议使用。</p><h1 id="2-8-虚拟-DOM-与-DOM-Diffing-算法"><a href="#2-8-虚拟-DOM-与-DOM-Diffing-算法" class="headerlink" title="2.8 虚拟 DOM 与 DOM Diffing 算法"></a>2.8 虚拟 DOM 与 DOM Diffing 算法</h1><h2 id="2-8-1-基本原理图"><a href="#2-8-1-基本原理图" class="headerlink" title="2.8.1 基本原理图"></a>2.8.1 基本原理图</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1658119277567-405d5473-3789-4f90-95c0-dc99c0b473e0.png#clientId=ue99b7b7f-841e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=254&id=u5f7888a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=780&originalType=binary&ratio=1&rotation=0&showTitle=false&size=104681&status=done&style=none&taskId=u1facd62d-5dbd-434d-8d6c-ad084461660&title=&width=583" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>key的作用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入react-dom --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入babel --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">/*</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">   经典面试题:</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      1). react/vue中的key有什么作用？（key的内部原理是什么？）</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      2). 为什么遍历列表时，key最好不要用index?</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      </span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">1. 虚拟DOM中key的作用：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, </span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">根据数据创建新的真实DOM，随后渲染到到页面</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">2. 用index作为key可能会引发的问题：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">2. 如果结构中还包含输入类的DOM：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">会产生错误DOM更新 ==&gt; 界面有问题。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">仅用于渲染列表用于展示，使用index作为key是没有问题的。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">3. 开发中如何选择key?:</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">2.如果确定只是简单的展示数据，用index也是可以的。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">   */</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">/* </span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">慢动作回放----使用index索引值作为key</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">初始数据：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">初始的虚拟DOM：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">0</span>&gt;</span>小张---18<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">1</span>&gt;</span>小李---19<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">更新后的数据：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">更新数据后的虚拟DOM：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">0</span>&gt;</span>小王---20<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">1</span>&gt;</span>小张---18<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">2</span>&gt;</span>小李---19<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">-----------------------------------------------------------------</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">慢动作回放----使用id唯一标识作为key</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">初始数据：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">初始的虚拟DOM：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">1</span>&gt;</span>小张---18<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">2</span>&gt;</span>小李---19<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">更新后的数据：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">更新数据后的虚拟DOM：</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">3</span>&gt;</span>小王---20<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">1</span>&gt;</span>小张---18<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">2</span>&gt;</span>小李---19<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"> */</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">class Person extends React.Component&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">state = &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">persons:[</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">]</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">add = ()=&gt;&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const &#123;persons&#125; = this.state</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const p = &#123;id:persons.length+1,name:&#x27;小王&#x27;,age:20&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">this.setState(&#123;persons:[p,...persons]&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">render()&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return (</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用index（索引值）作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">this.state.persons.map((personObj,index)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">this.state.persons.map((personObj)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">Person</span>/&gt;</span>,document.getElementById(&#x27;test&#x27;))</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 1 章  React入门</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1-1-React简介"><a href="#1-1-React简介" class="headerlink" title="1.1 React简介"></a>1.1 React简介</h1><h2 id="1-1-1-是什么？"><a href="#1-1-1-是什么？" class="headerlink" title="1.1.1 是什么？"></a>1.1.1 是什么？</h2><p>用于构建用户界面的JavaScript库</p><p>是一个将<strong>数据</strong>渲染为<strong>HTML视图</strong>的开源JavaScript库</p><h2 id="1-1-2-谁开发的"><a href="#1-1-2-谁开发的" class="headerlink" title="1.1.2 谁开发的?"></a>1.1.2 谁开发的?</h2><h2 id="1-1-3-特点"><a href="#1-1-3-特点" class="headerlink" title="1.1.3 特点"></a>1.1.3 特点</h2><ol><li>原生JavaScript操作DOM繁琐，效率低（DOM-API操作UI）</li></ol><ul><li>document.getElementById(‘app’)</li><li>document.querySelectot(‘#app’)</li><li>document.getElementByTagName(‘span’)</li></ul><ol start="2"><li><p>使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排</p></li><li><p>原生JavaScript没有组件化编码方案，代码复用率低</p></li></ol><h2 id="1-1-4-React的特点"><a href="#1-1-4-React的特点" class="headerlink" title="1.1.4 React的特点"></a>1.1.4 React的特点</h2><ol><li><p>采用组件化模式，声明式编码，提高开发效率及组件复用率</p></li><li><p>在React Native 中可以使用React 语法进行移动端开发</p></li><li><p>使用虚拟DOM + 优秀的Diffing算法，尽量减少与真实的DOM的交互</p></li></ol><h2 id="1-1-5-JS基础"><a href="#1-1-5-JS基础" class="headerlink" title="1.1.5 JS基础"></a>1.1.5 JS基础</h2><ul><li>判断this的指向</li><li>class</li><li>ES6语法规范</li><li>npm包管理器</li><li>原型，原型链</li><li>数组常用方法</li><li>模块化</li></ul><h1 id="1-2-React的基本使用"><a href="#1-2-React的基本使用" class="headerlink" title="1.2 React的基本使用"></a>1.2 React的基本使用</h1><h2 id="1-2-1-效果"><a href="#1-2-1-效果" class="headerlink" title="1.2.1 效果"></a>1.2.1 效果</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657701074883-62c1c8a1-15ed-4d50-88ac-9e8c7d1bca2f.png#clientId=u08d1b802-1197-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=242&id=u9acc55e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=484&originWidth=785&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73548&status=done&style=none&taskId=ud85239ff-1dc8-4d23-832c-a78bc976b16&title=&width=392.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657701088741-812f31a7-467a-4946-9648-53863fdff59e.png#clientId=u08d1b802-1197-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=270&id=u576a6e0f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=1864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123238&status=done&style=none&taskId=uc5948a1b-cfe2-44c7-a83e-9cc0926fdbc&title=&width=932" alt="image.png"></p><h2 id="1-2-2-相关js库"><a href="#1-2-2-相关js库" class="headerlink" title="1.2.2 相关js库"></a>1.2.2 相关js库</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作dom --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 引入Babel，用于将jsx转为js --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="1-2-3-创建虚拟DOM的两种方式"><a href="#1-2-3-创建虚拟DOM的两种方式" class="headerlink" title="1.2.3 创建虚拟DOM的两种方式"></a>1.2.3 创建虚拟DOM的两种方式</h2><ul><li> 使用jsx创建虚拟DOM</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 容器 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 引入react-dom，用于支持react操作dom --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 引入Babel，用于将jsx转为js --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 一定要写babel --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* 创建虚拟DOM */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello , react<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* 渲染虚拟DOM到页面 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ReactDOM.render(VDOM,<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>使用js创建虚拟DOM</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 容器 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 引入react-dom，用于支持react操作dom --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* 创建虚拟DOM */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> VDOM = React.createElement(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;test&#x27;</span>&#125;,React.createElement(<span class="string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="string">&#x27;hello react&#x27;</span>))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* 渲染虚拟DOM到页面 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ReactDOM.render(VDOM,<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-4-虚拟DOM与真实DOM"><a href="#1-2-4-虚拟DOM与真实DOM" class="headerlink" title="1.2.4 虚拟DOM与真实DOM"></a>1.2.4 虚拟DOM与真实DOM</h2><p>虚拟DOM：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657858826423-91ccecd8-0156-406a-8090-6632e7823384.png#clientId=u60c80cd5-9e25-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=274&id=u25bb8e5d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=375&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33294&status=done&style=none&taskId=u18782cd4-68ab-4ef1-ac3c-ff164b70c74&title=&width=411" alt="image.png"></p><p>真实DOM：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657858852973-9bf23778-000b-4076-9df2-3b012abc2442.png#clientId=u60c80cd5-9e25-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=287&id=ub0dc633d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=397&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34862&status=done&style=none&taskId=u1bfe6196-089c-4fd7-aa16-db5f10b405a&title=&width=475" alt="image.png"></p><ul><li><p>虚拟DOM </p><ul><li><p>本质是Object类型的对象</p></li><li><p>虚拟DOM比较轻，真实DOM比较重，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性</p></li><li><p>虚拟DOM最终会被React转化为真实DOM，呈现在页面上</p></li></ul></li></ul><h1 id="1-3-React-JSX"><a href="#1-3-React-JSX" class="headerlink" title="1.3 React JSX"></a>1.3 React JSX</h1><h2 id="1-3-1-JSX"><a href="#1-3-1-JSX" class="headerlink" title="1.3.1 JSX"></a>1.3.1 JSX</h2><ul><li><p>全称：JavaScript XML</p></li><li><p>react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML 本质是<code>React.createElement(component, props, ...children)</code>方法的语法糖 </p></li><li><p>作用: 用来简化创建虚拟 DOM</p><ul><li><p>写法：<code>let ele = &lt;h1&gt;Hello JSX!&lt;/h1</code></p></li><li><p>注意 1：它不是字符串, 也不是 HTML/XML</p></li><li><p> 注意 2：它最终产生的就是一个 JS 对象 </p></li></ul></li><li><p>标签名任意: HTML 标签或其它标签</p></li><li><p>标签属性任意: HTML 标签属性或其它 </p></li><li><p>基本语法规则 </p><ul><li><p>遇到** &lt;开头<strong>的代码, 以</strong>标签的语法**解析: html 同名标签转换为 html 同名元素，其它标签需要特别解析</p></li><li><p>遇到以** { 开头<strong>的代码，以</strong> JS 语法解析**: 标签中的** js 表达式必须用{ }包含 **</p></li><li><p>样式的类名指定：需要使用<code>className</code></p></li><li><p>内联样式：要用<code>style = &#123;&#123;key : value&#125;&#125;</code>的形式去写</p></li><li><p>虚拟DOM只有一个根标签</p></li><li><p>标签必须闭合</p></li><li><p>标签首字母</p><ul><li><p>若小写字母开头，则将改标签转为html中同名元素，若html中无改标签的同名元素，则报错</p></li><li><p>若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错</p></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VDOM = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">50px</span>&#x27; &#125;&#125;&gt;</span>&#123;myData&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;myId.toUpperCase()&#125;</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">50px</span>&#x27; &#125;&#125;&gt;</span>&#123;myData&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">good</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">good</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Good</span>&gt;</span><span class="tag">&lt;/<span class="name">Good</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>babel.js 的作用</p><ul><li><p>浏览器不能直接解析 JSX 代码, 需要** babel 转译为纯 JS 的代码**才能运行</p></li><li><p>只要用了 JSX，都要加上 <code>type=&quot;text/babel&quot;</code>, 声明需要 babel 来处理 </p></li></ul></li></ul><h2 id="1-3-2-JSX效果"><a href="#1-3-2-JSX效果" class="headerlink" title="1.3.2 JSX效果"></a>1.3.2 JSX效果</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> myId = <span class="string">&#x27;niNo&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> myData = <span class="string">&#x27;hello renxiaolan&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> VDOM = (</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;myId&#125;</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;myData&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    )</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//2.渲染虚拟DOM</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ReactDOM.render(VDOM,<span class="built_in">document</span>.querySelector(<span class="string">&#x27;.test&#x27;</span>))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657859791294-ff0f860c-c18a-4ed9-9988-3e4dd139b2f3.png#clientId=u60c80cd5-9e25-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=145&id=ue1826794&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=1242&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40271&status=done&style=none&taskId=u8787ee66-6b45-42b5-869a-b7c16c106ad&title=&width=581" alt="image.png"></p><h2 id="1-3-3-渲染虚拟DOM元素"><a href="#1-3-3-渲染虚拟DOM元素" class="headerlink" title="1.3.3 渲染虚拟DOM元素"></a>1.3.3 渲染虚拟DOM元素</h2><p>语法: <code>ReactDOM.render(virtualDOM, containerDOM)</code></p><p>作用: 将**虚拟 DOM 元素渲染到页面中的真实容器 DOM **中显示</p><p>参数说明</p><ul><li><ol><li>参数一: <strong>纯 js 或 jsx 创建的虚拟 dom 对象</strong></li></ol></li><li><ol start="2"><li>参数二: 用来包<strong>含虚拟 DOM 元素的真实 dom 元素对象</strong>(一般是一个 div) </li></ol></li></ul><h2 id="1-3-4-JSX练习"><a href="#1-3-4-JSX练习" class="headerlink" title="1.3.4 JSX练习"></a>1.3.4 JSX练习</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657868068096-bda7aab8-4301-4341-9b1c-b5d6325ca6e9.png#clientId=u60c80cd5-9e25-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=146&id=ude7d52d2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=454&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13509&status=done&style=none&taskId=uc7890b6d-dce2-4829-a505-30016319c80&title=&width=227" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一些数据</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> VDOM = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;</span></span><br><span class="line"><span class="xml">    data.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">      return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">ReactDOM.render(VDOM, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#test&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="1-4-模块与组件、模块化与组件化的理解"><a href="#1-4-模块与组件、模块化与组件化的理解" class="headerlink" title="1.4 模块与组件、模块化与组件化的理解"></a>1.4 模块与组件、模块化与组件化的理解</h1><h2 id="1-4-1-模块"><a href="#1-4-1-模块" class="headerlink" title="1.4.1 模块"></a>1.4.1 模块</h2><ol><li><p>理解：向外提供特定功能的 js 程序, 一般就是一个 js 文件</p></li><li><p>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p></li><li><p>作用：复用 js, 简化 js 的编写, 提高 js 运行效率</p></li></ol><h2 id="1-4-2-组件"><a href="#1-4-2-组件" class="headerlink" title="1.4.2 组件"></a>1.4.2 组件</h2><ol><li><p>理解：用来实现局部功能效果的代码和资源的集</p></li><li><p>为什么要用组件： 一个界面的功能更复杂</p></li><li><p>作用：复用编码, 简化项目编码, 提高运行效率</p></li></ol><h2 id="1-4-3-模块化"><a href="#1-4-3-模块化" class="headerlink" title="1.4.3 模块化"></a>1.4.3 模块化</h2><p>当应用的 js 都以模块来编写的, 这个应用就是一个模块化的应用 </p><h2 id="1-4-4-组件化"><a href="#1-4-4-组件化" class="headerlink" title="1.4.4 组件化"></a>1.4.4 组件化</h2><p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用 </p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：使用TS实现贪吃蛇</title>
      <link href="/archives/22269933.html"/>
      <url>/archives/22269933.html</url>
      
        <content type="html"><![CDATA[<h1 id="第三章：使用TS实现贪吃蛇"><a href="#第三章：使用TS实现贪吃蛇" class="headerlink" title="第三章：使用TS实现贪吃蛇"></a>第三章：使用TS实现贪吃蛇</h1><h2 id="1-实现效果"><a href="#1-实现效果" class="headerlink" title="1. 实现效果"></a>1. 实现效果</h2><p><img src="https://cdn.jsdelivr.net/gh/arenxiaolanz/picodemo/img/%E8%B4%AA%E5%90%83%E8%9B%87.gif" alt="贪吃蛇"></p><h2 id="2-网页地址"><a href="#2-网页地址" class="headerlink" title="2. 网页地址"></a>2. 网页地址</h2><p><a href="https://arenxiaolanz.github.io/gluttonous_snake_page/">https://arenxiaolanz.github.io/gluttonous_snake_page/</a></p><h2 id="3-源码地址"><a href="#3-源码地址" class="headerlink" title="3. 源码地址"></a>3. 源码地址</h2><p><a href="https://github.com/arenxiaolanz/gluttonous_snake/tree/master/chapter1/part3">https://github.com/arenxiaolanz/gluttonous_snake/tree/master/chapter1/part3</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：TS面向对象</title>
      <link href="/archives/add34d05.html"/>
      <url>/archives/add34d05.html</url>
      
        <content type="html"><![CDATA[<h1 id="第二章：面向对象"><a href="#第二章：面向对象" class="headerlink" title="第二章：面向对象"></a>第二章：面向对象</h1><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li><p>举例来说： </p><ul><li><p>操作浏览器要使用window对象</p></li><li><p>操作网页要使用document对象</p></li><li><p>操作控制台要使用console对象</p></li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><h2 id="定义类："><a href="#定义类：" class="headerlink" title="定义类： "></a>定义类： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">参数: 类型</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="示例："><a href="#示例：" class="headerlink" title="示例： "></a>示例： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="使用类："><a href="#使用类：" class="headerlink" title="使用类： "></a>使用类： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.sayHello();</span><br></pre></td></tr></table></figure></li></ul><h2 id="2、面向对象的特点"><a href="#2、面向对象的特点" class="headerlink" title="2、面向对象的特点"></a>2、面向对象的特点</h2><ul><li><p>封装 </p><ul><li><p> 对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装 </p></li><li><p> 默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置 </p></li><li><p>只读属性（readonly）： </p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符： </p><ul><li><p>public（默认值），可以在类、子类和对象中修改</p></li><li><p>protected ，可以在类、子类中修改</p></li><li><p>private ，可以在类中修改</p></li></ul></li><li><p>示例： </p><ul><li><h2 id="public"><a href="#public" class="headerlink" title="public "></a>public </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>  -  protected      -  </code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><pre><code>  -  private      -  </code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><ul><li><p>属性存取器 </p><ul><li><p> 对于一些不希望被任意修改的属性，可以将其设置为private </p></li><li><p> 直接将其设置为private将导致无法再通过对象修改其中的属性 </p></li><li><p> 我们可以在类中定义一组读取、设置属性的方法，这种对属性读取<br>或设置的属性被称为属性的存取器 </p></li><li><p> 读取属性的方法叫做setter方法，设置属性的方法叫做getter方法 </p></li><li><p>示例： </p><ul><li><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.name); <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">p1.name = <span class="string">&#x27;猪八戒&#x27;</span>; <span class="comment">// 通过setter修改name属性</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>静态属性 </p><ul><li><p> 静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用 </p></li><li><p> 静态属性（方法）使用static开头 </p></li><li><h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例： "></a>示例： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tools.PI);</span><br><span class="line"><span class="built_in">console</span>.log(Tools.sum(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>this </p><ul><li>在类中，使用this表示当前对象</li></ul></li></ul><ul><li><p>继承 </p><ul><li><p> 继承时面向对象中的又一个特性 </p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中 </p><ul><li><h2 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例： "></a>示例： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p> 通过继承可以在不修改类的情况下完成对类的扩展 </p></li><li><p>重写 </p><ul><li><p> 发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写 </p></li><li><p>示例： </p><ul><li><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>     -  在子类中可以使用super来完成对父类的引用 </code></pre><ul><li><p>抽象类（abstract class） </p><ul><li><p> 抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例 </p></li><li><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> run(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>  -  使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现 </code></pre><h2 id="3、接口（Interface）"><a href="#3、接口（Interface）" class="headerlink" title="3、接口（Interface）"></a>3、接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li><h2 id="示例（检查对象类型）："><a href="#示例（检查对象类型）：" class="headerlink" title="示例（检查对象类型）： "></a>示例（检查对象类型）： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;</span><br><span class="line">    per.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="示例（实现）"><a href="#示例（实现）" class="headerlink" title="示例（实现） "></a>示例（实现） </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li></li></ul><h2 id="4、泛型（Generic）"><a href="#4、泛型（Generic）" class="headerlink" title="4、泛型（Generic）"></a>4、泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><ul><li><h2 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子： "></a>举个例子： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li> 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型 </li><li> 使用泛型： </li><li><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li> 这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。 </li><li>那么如何使用上边的函数呢？ <ul><li><h2 id="方式一（直接使用）："><a href="#方式一（直接使用）：" class="headerlink" title="方式一（直接使用）： "></a>方式一（直接使用）： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>     -  使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式   -  方式二（指定类型）：      -  </code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>     -  也可以在函数后手动指定泛型 </code></pre><ul><li><h2 id="可以同时指定多个泛型，泛型间使用逗号隔开："><a href="#可以同时指定多个泛型，泛型间使用逗号隔开：" class="headerlink" title="可以同时指定多个泛型，泛型间使用逗号隔开： "></a>可以同时指定多个泛型，泛型间使用逗号隔开： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">a: T, b: K</span>): <span class="title">K</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><pre><code>  -  使用泛型时，完全可以将泛型当成是一个普通的类去使用 </code></pre><ul><li><h2 id="类中同样可以使用泛型："><a href="#类中同样可以使用泛型：" class="headerlink" title="类中同样可以使用泛型： "></a>类中同样可以使用泛型： </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">prop: T</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="除此之外，也可以对泛型的范围进行约束"><a href="#除此之外，也可以对泛型的范围进行约束" class="headerlink" title="除此之外，也可以对泛型的范围进行约束 "></a>除此之外，也可以对泛型的范围进行约束 </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> MyInter&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">MyInter</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>  -  使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 TS快速入门</title>
      <link href="/archives/ad10b719.html"/>
      <url>/archives/ad10b719.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol><li><p>TypeScript是JavaScript的超集。</p></li><li><p>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</p></li><li><p>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</p></li><li><p>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</p></li><li><p>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</p></li></ol><h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol><li> 下载Node.js </li></ol><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul><ol start="2"><li><p> 安装Node.js </p></li><li><p> 使用npm全局安装typescript </p></li></ol><ul><li><p>进入命令行</p></li><li><p>输入：npm i -g typescript</p></li></ul><ol start="4"><li><p> 创建一个ts文件 </p></li><li><p> 使用tsc对ts文件进行编译 </p></li></ol><ul><li><p> 进入命令行 </p></li><li><p> 进入ts文件所在目录 </p></li><li><p> 执行命令：tsc xxx.ts </p></li></ul><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明 </p><ul><li><p> 类型声明是TS非常重要的一个特点 </p></li><li><p> 通过类型声明可以指定TS中变量（参数、形参）的类型 </p></li><li><p> 指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错 </p></li><li><p> 简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值 </p></li><li><p> 语法： </p></li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自动类型判断 </p><ul><li><p>TS拥有自动的类型判断机制</p></li><li><p>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</p></li><li><p>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</p></li></ul></li><li><p> 类型：  </p><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1, -33, 2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’, “hi”, <code>hi</code></td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值true或false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name:’孙悟空’}</td><td>任意的JS对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意JS数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A, B}</td><td>枚举，TS中新增类型</td></tr></tbody></table></li><li><h2 id="number"><a href="#number" class="headerlink" title="number "></a>number </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean "></a>boolean </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="string"><a href="#string" class="headerlink" title="string "></a>string </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>字面量 <ul><li> 也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围 </li><li><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h2 id="any"><a href="#any" class="headerlink" title="any "></a>any </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown "></a>unknown </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: unknown = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="void"><a href="#void" class="headerlink" title="void "></a>void </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="never"><a href="#never" class="headerlink" title="never "></a>never </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="object（没啥用）"><a href="#object（没啥用）" class="headerlink" title="object（没啥用） "></a>object（没啥用） </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="array"><a href="#array" class="headerlink" title="array "></a>array </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple "></a>tuple </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li><h2 id="enum"><a href="#enum" class="headerlink" title="enum "></a>enum </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li></ul><ul><li>类型断言 <ul><li>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式： <ul><li><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种 "></a>第一种 </h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>  -  第二种      -  </code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure><h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><ul><li><p>自动编译文件 </p><ul><li><p> 编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。 </p></li><li><p> 示例： </p></li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tsc xxx.ts <span class="literal">-w</span></span><br></pre></td></tr></table></figure><ul><li><p>自动编译整个项目 </p><ul><li><p> 如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。 </p></li><li><p> 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json </p></li><li><p> tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译 </p></li><li><p>配置选项： </p><ul><li><p><code>include </code></p><ol><li><p> 定义希望被编译文件所在的目录 </p></li><li><p> 默认值：[“**/*”] </p></li><li><p> 示例：     -  </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>:[<span class="string">&quot;src/**/*&quot;</span>, <span class="string">&quot;tests/**/*&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ** 表示任意目录，* 表示任意文件</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><blockquote><p>上述示例中，所有src目录和tests目录下的文件都会被编译 </p></blockquote><pre><code>  -  `exclude `     1.  定义需要排除在外的目录      1.  默认值：`[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;] `     1.  示例：         -  </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;./src/hello/**/*&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>上述示例中，src下hello目录下的文件都不会被编译 </p></blockquote><pre><code>  -  `extends `     1.  定义被继承的配置文件      1.  示例：         -  </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;extends&quot;</span>: <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息 </p></blockquote><pre><code>  -  `files `     1.  指定被编译文件的列表，只有需要编译的文件少时才会用到      1.  示例：         -  </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><blockquote><p>列表中的文件都会被TS编译器所编译 </p></blockquote><pre><code>     -  `compilerOptions `        -  编译选项是配置文件中非常重要也比较复杂的配置选项         -  在compilerOptions中包含多个子选项，用来完成对编译</code></pre><p>的配置 </p><pre><code>           -  项目选项               -  `target `                 -  设置ts代码编译的目标版本                  -  可选值：                     - `ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext`                 -  示例：                     -  </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码 </p></blockquote><pre><code>           -  `lib `              -  指定代码运行时所包含的库（宿主环境）               -  可选值：                  - `ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......`              -  示例：                     -  </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>              -  `module `                 -  设置编译后代码使用的模块化系统                  -  可选值：                     - `CommonJS、UMD、AMD、System、ES2020、ESNext、None`                 -  示例：                     -  </code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>              -  `outDir `                 -  编译后文件的所在目录                  -  默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置                  -  示例： </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置后编译后的js文件将会生成到dist目录 </p></blockquote><pre><code>              - `outFile `                 -  将所有的文件编译为一个js文件                  -  默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中                  -  示例： </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>              -  `rootDir `                 -  指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录                  -  示例： </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>              -  `allowJs `                 - 是否对js文件编译              -  `checkJs `                 -  是否对js文件进行检查                  -  示例： </code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>              -  `removeComments `                 - 是否删除注释                 - 默认值：false              - ` noEmit `                 - 不对代码进行编译                 - 默认值：false              -  `sourceMap `                 - 是否生成sourceMap                 - 默认值：false           -  严格检查               - `strict `                 - 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查              - `alwaysStrict `                  - 总是以严格模式对代码进行编译              - `noImplicitAny `                 - 禁止隐式的any类型              - `noImplicitThis `                 - 禁止类型不明确的this              - `strictBindCallApply `                 - 严格检查bind、call和apply的参数列表              - `strictFunctionTypes `                 - 严格检查函数的类型              - `strictNullChecks `                 - 严格的空值检查              - `strictPropertyInitialization `                 - 严格检查属性是否初始化           -  额外检查               - `noFallthroughCasesInSwitch `                 - 检查switch语句包含正确的break              - `noImplicitReturns `                 - 检查函数没有隐式的返回值              - `noUnusedLocals `                 - 检查未使用的局部变量              - `noUnusedParameters `                 - 检查未使用的参数           -  高级               - `allowUnreachableCode `                 - 检查不可达代码                 - 可选值：                     - true，忽略不可达代码                    - false，不可达代码将引起错误              - `noEmitOnError `                 - 有错误的情况下不进行编译                 - 默认值：false</code></pre><h2 id="4、webpack"><a href="#4、webpack" class="headerlink" title="4、webpack"></a>4、webpack</h2><ul><li><p> 通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。 </p></li><li><p>步骤： </p><ol><li> 初始化项目 </li></ol><pre><code>- 进入项目根目录，执行命令 `npm init -y`    - 主要作用：创建package.json文件</code></pre><ol start="2"><li> 下载构建工具 </li></ol><pre><code>- `npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin`    - 共安装了7个包       - webpack          - 构建工具webpack      - webpack-cli          - webpack的命令行工具      - webpack-dev-server          - webpack的开发服务器      - typescript          - ts编译器      - ts-loader          - ts加载器，用于在webpack中编译ts文件      - html-webpack-plugin          - webpack中html插件，用来自动创建html文件      - clean-webpack-plugin          - webpack中的清除插件，每次构建都会先清除目录</code></pre><ol start="3"><li> 根目录下创建webpack的配置文件webpack.config.js </li></ol><pre><code>-  </code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;TS测试&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li> 根目录下创建tsconfig.json，配置可以根据自己需要       -  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li> 修改package.json添加如下配置       -  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li> 在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器 </li></ol><h2 id="5、Babel"><a href="#5、Babel" class="headerlink" title="5、Babel"></a>5、Babel</h2><ul><li>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。 <ol><li>安装依赖包：     - <code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code>    - 共安装了4个包，分别是： <ul><li>@babel/core <ul><li>babel的核心工具</li></ul></li><li>@babel/preset-env <ul><li>babel的预定义环境</li></ul></li><li><a href="/babel-loader">@babel-loader </a>  <ul><li>babel在webpack中的加载器</li></ul></li><li>core-js <ul><li>core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li><li> 修改webpack.config.js配置文件     -  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...略...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;targets&quot;</span>:&#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>  -  如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决GitHub报错问题</title>
      <link href="/archives/1c767582.html"/>
      <url>/archives/1c767582.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决GitHub报错"><a href="#解决GitHub报错" class="headerlink" title="解决GitHub报错"></a>解决GitHub报错</h1><h2 id="一、-hint-Updates-were-rejected-because-the-remote-contains-work-that-you-do"><a href="#一、-hint-Updates-were-rejected-because-the-remote-contains-work-that-you-do" class="headerlink" title="一、 hint: Updates were rejected because the remote contains work that you do"></a>一、 <em><strong>hint: Updates were rejected because the remote contains work that you do</strong></em></h2><ol><li><p><em><strong>hint: Updates were rejected because the remote contains work that you do</strong></em> </p><p><img src="/img/1656068267464.png" alt="1656068267464"></p></li><li><p>解决方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.git pull origin master --allow-unrelated-histories</span><br><span class="line">2.git pull origin master</span><br><span class="line">3.git init</span><br><span class="line">4.git remote add origin git@github.com:arenxiaolanz/blog.git</span><br><span class="line">（可忽略）</span><br><span class="line">5.git add .</span><br><span class="line">6.git commit -m &#x27;testst&#x27;</span><br><span class="line">7.git push -u origin master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docsify学习笔记</title>
      <link href="/archives/954a621e.html"/>
      <url>/archives/954a621e.html</url>
      
        <content type="html"><![CDATA[<p>docsify基本使用</p><h1 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h1><h2 id="1-1、全局安装docsify-cli工具"><a href="#1-1、全局安装docsify-cli工具" class="headerlink" title="1.1、全局安装docsify-cli工具"></a>1.1、全局安装<em><strong>docsify-cli</strong></em>工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h2 id="1-2、初始化文档结构"><a href="#1-2、初始化文档结构" class="headerlink" title="1.2、初始化文档结构"></a>1.2、初始化文档结构</h2><p>先创建一个本地文件夹<em><strong>docs</strong></em>，然后执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p>会生成如下目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-| docs</span><br><span class="line"> -| .nojekyll  用于阻止Github Pages 会忽略掉下滑线开头的文件</span><br><span class="line"> -| index.html 入口文件</span><br><span class="line"> -| README.md  作为主页内容渲染</span><br></pre></td></tr></table></figure><h2 id="1-3、本地实时预览"><a href="#1-3、本地实时预览" class="headerlink" title="1.3、本地实时预览"></a>1.3、本地实时预览</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure><p>默认访问 <em><strong><a href="http://localhost:3000/">http://localhost:3000</a></strong></em></p><h3 id="1-README-md文件"><a href="#1-README-md文件" class="headerlink" title="1. README.md文件"></a>1. README.md文件</h3><p>  <img src="/img/1656038453907.png" alt="README.md文件"></p><h3 id="2-预览效果："><a href="#2-预览效果：" class="headerlink" title="2. 预览效果："></a>2. 预览效果：</h3><p>  <img src="/img/1656038483755.png" alt="预览效果"></p><h1 id="二、定制导航栏及侧边栏"><a href="#二、定制导航栏及侧边栏" class="headerlink" title="二、定制导航栏及侧边栏"></a>二、定制导航栏及侧边栏</h1><h2 id="2-1、script配置"><a href="#2-1、script配置" class="headerlink" title="2.1、script配置"></a>2.1、<em><strong>script</strong></em>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  window.$docsify = &#123;</span><br><span class="line">    name: &#x27;&#x27;,</span><br><span class="line">    repo: &#x27;&#x27;,</span><br><span class="line">    loadNavbar: true,</span><br><span class="line">    loadSidebar: true,</span><br><span class="line">    maxLevel: 2,</span><br><span class="line">    subMaxLevel: 4,</span><br><span class="line">    mergeNvabar: true</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-添加-sidebar-md-文件来配置侧边栏"><a href="#1-添加-sidebar-md-文件来配置侧边栏" class="headerlink" title="1. 添加 _sidebar.md 文件来配置侧边栏"></a>1. 添加 <em><strong>_sidebar.md</strong></em> 文件来配置侧边栏</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* DOCSIFY学习笔记</span><br><span class="line">  * [一、初始化项目](docsifyUsage/docsifyUsageChapter1.md)</span><br><span class="line">  * [二、侧边栏配置](docsifyUsage//docsifyUsageChapter2.md)</span><br></pre></td></tr></table></figure><h3 id="2-添加-navbar-md-文件来配置顶部导航栏"><a href="#2-添加-navbar-md-文件来配置顶部导航栏" class="headerlink" title="2. 添加 _navbar.md 文件来配置顶部导航栏"></a>2. 添加 <em><strong>_navbar.md</strong></em> 文件来配置顶部导航栏</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 项目地址</span><br><span class="line">  * [GitHub地址](https://github.com/arenxiaolanz/docsify_study)</span><br><span class="line">  * [Gitee地址](https://gitee.com/ren-nino/docsify_study)</span><br><span class="line">* 更多</span><br><span class="line">  * [博客主页](http://blog.renorchid.xyz/)</span><br></pre></td></tr></table></figure><h3 id="3-查看效果"><a href="#3-查看效果" class="headerlink" title="3. 查看效果"></a>3. 查看效果</h3><p>  <img src="/img/1656041550325.png" alt="侧边栏效果"></p><h1 id="三、定制封面页"><a href="#三、定制封面页" class="headerlink" title="三、定制封面页"></a>三、定制封面页</h1><h3 id="1-在入口文件-index-html-中添加封面页的配置"><a href="#1-在入口文件-index-html-中添加封面页的配置" class="headerlink" title="1. 在入口文件 index.html 中添加封面页的配置"></a>1. 在入口文件 <em><strong>index.html</strong></em> 中添加封面页的配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  window.$docsify = &#123;</span><br><span class="line">    coverpage: true</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-添加-coverpage-md-文件配置封面页"><a href="#2-添加-coverpage-md-文件配置封面页" class="headerlink" title="2. 添加  _coverpage.md 文件配置封面页"></a>2. 添加  <em><strong>_coverpage.md</strong></em> 文件配置封面页</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- _coverpage.md --&gt;</span><br><span class="line"></span><br><span class="line">![logo](/icon.svg)</span><br><span class="line"></span><br><span class="line"># 我的docsify学习笔记 &lt;small&gt;1.0.0&lt;/small&gt;</span><br><span class="line"></span><br><span class="line">&gt; 业精于勤荒于嬉，行成于思毁于随.</span><br><span class="line"></span><br><span class="line">- 简单，轻量级</span><br><span class="line">- 不用构建静态htnl文件</span><br><span class="line">- 多种主题</span><br><span class="line"></span><br><span class="line">[GitHub](https://github.com/docsifyjs/docsify/)</span><br><span class="line">[Get Started](#docsifyUsage/docsifyUsageChapter1)</span><br></pre></td></tr></table></figure><h3 id="3-查看封面效果"><a href="#3-查看封面效果" class="headerlink" title="3. 查看封面效果"></a>3. 查看封面效果</h3><p>  <img src="/img/1656043079068.png" alt="封面效果"></p><h1 id="四、添加全文搜索"><a href="#四、添加全文搜索" class="headerlink" title="四、添加全文搜索"></a>四、添加全文搜索</h1><h2 id="1-在入口文件中添加全文搜索的配置"><a href="#1-在入口文件中添加全文搜索的配置" class="headerlink" title="1. 在入口文件中添加全文搜索的配置"></a>1. 在入口文件中添加全文搜索的配置</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  window.$docsify = &#123;</span><br><span class="line">    search: &#123;</span><br><span class="line">      maxAge: 86400000, // 过期时间，单位毫秒，默认一天</span><br><span class="line">      placeholder: &#x27;Type to search&#x27;,</span><br><span class="line">      noData: &#x27;No Results!&#x27;,</span><br><span class="line">      // 搜索标题的最大层级, 1 - 6</span><br><span class="line">      depth: 4,</span><br><span class="line">      hideOtherSidebarContent: false, // 是否隐藏其他侧边栏内容</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-查看搜索效果"><a href="#2-查看搜索效果" class="headerlink" title="2. 查看搜索效果"></a>2. 查看搜索效果</h2><p>  <img src="/img/1656044719259.png" alt="搜索结果"></p><h1 id="五、添加代码高亮"><a href="#五、添加代码高亮" class="headerlink" title="五、添加代码高亮"></a>五、添加代码高亮</h1><h2 id="1-在入口文件中添加下列代码"><a href="#1-在入口文件中添加下列代码" class="headerlink" title="1. 在入口文件中添加下列代码"></a>1. 在入口文件中添加下列代码</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-php.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="六、添加一键拷贝代码"><a href="#六、添加一键拷贝代码" class="headerlink" title="六、添加一键拷贝代码"></a>六、添加一键拷贝代码</h1><h2 id="1-在入口文件中添加下列代码-1"><a href="#1-在入口文件中添加下列代码-1" class="headerlink" title="1. 在入口文件中添加下列代码"></a>1. 在入口文件中添加下列代码</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify-copy-code/dist/docsify-copy-code.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="七、在GitHub上部署文档"><a href="#七、在GitHub上部署文档" class="headerlink" title="七、在GitHub上部署文档"></a>七、在GitHub上部署文档</h1><h2 id="1-提交代码到GitHub"><a href="#1-提交代码到GitHub" class="headerlink" title="1.提交代码到GitHub"></a>1.提交代码到GitHub</h2><p><img src="/img/1656050504619.png" alt="1656050504619"></p><h2 id="2-GitHub-Pages-部署"><a href="#2-GitHub-Pages-部署" class="headerlink" title="2.GitHub Pages 部署"></a>2.GitHub Pages 部署</h2><p><img src="/img/1656050479434.png" alt="1656050479434"></p><h2 id="3-部署成功·"><a href="#3-部署成功·" class="headerlink" title="3.部署成功·"></a>3.部署成功·</h2><p>访问链接：<a href="https://arenxiaolanz.github.io/docsify_study/">https://arenxiaolanz.github.io/docsify_study/</a></p><h1 id="八、tips，上传更新"><a href="#八、tips，上传更新" class="headerlink" title="八、tips，上传更新"></a>八、tips，上传更新</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote remove origin</span><br><span class="line">git remote add origin git@github.com:arenxiaolanz/docsify_study.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;completed&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docsify </tag>
            
            <tag> github </tag>
            
            <tag> 写文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css的grid布局</title>
      <link href="/archives/94897885.html"/>
      <url>/archives/94897885.html</url>
      
        <content type="html"><![CDATA[<p>传统布局有三种：</p><ul><li>传统布局</li></ul><p>利用<strong>position + display + float</strong>布局，兼容性好，但是效率低</p><ul><li>flex布局</li></ul><p>有自己的一套属性，效率高，学习成本低，兼容性强</p><ul><li>grid布局</li></ul><p>网格布局是最强大的css布局方案，但是知识点多，学习成本相对困难，目前的兼容性不如flex好</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657023325768-e0cbddaa-1493-4531-addd-5b0ed2d21f9d.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=394&id=u437fa75c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=653&originWidth=1093&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86045&status=done&style=none&taskId=u626e380d-9605-409e-ae4e-b2e83fea717&title=&width=659.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657023363597-a17dc98e-de7d-4cfa-b12a-35547aa66a12.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=365&id=u269e74b0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=603&originWidth=892&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97305&status=done&style=none&taskId=u27071689-ad55-4855-9517-d4ef62bf305&title=&width=540" alt="image.png"></p><p>容器—-有容器属性（container）<br>项目—-有项目属性（item）</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>grid-template-columns</li><li>grid-template-rows</li><li>row-gap</li><li>column-gap</li><li>grid-gap</li><li>grid-template-areas</li><li>grid-auto-flow</li><li>justify-items</li><li>align-items</li><li>place-items</li><li>justify-content</li><li>align-content</li><li>place-content</li><li>grid-auto-columns</li><li>grid-auto-rows</li></ul><h4 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template-*"></a>grid-template-*</h4><blockquote><p>grid-template-columns: 250px 200px 180px; 用来设置有几列，且每一列的宽度分别是多少  ，这个设置的就是有3列，即宽度分别为：250px 200px 180px<br>grid-template-rows: 150px 80px 102px 60px; 用来设置有几行，且每一行的宽度分别是多少  ，这个设置的就是有4行，即高度分别为：150px 80px 102px 60px   </p></blockquote><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  color: white;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 25px;</span><br><span class="line">  line-height: 25px;</span><br><span class="line">  width: 1000px;</span><br><span class="line">  height: 800px;</span><br><span class="line">  grid-template-columns: 250px 200px 180px;</span><br><span class="line">  grid-template-rows: 150px 80px 102px 60px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657024953484-a577fe0e-7212-48f8-980d-bcad5f9ca283.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=314&id=ue8ac3a21&margin=%5Bobject%20Object%5D&name=image.png&originHeight=627&originWidth=896&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78434&status=done&style=none&taskId=u5e3518c8-5ddd-444a-b66e-7922b67276e&title=&width=448" alt="image.png"></p><h4 id="与grid-template-相关"><a href="#与grid-template-相关" class="headerlink" title="与grid-template-*相关"></a>与grid-template-*相关</h4><ol><li>repeat()，第一个参数是重复的次数，第二个参数是所要重复的值</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 150px 150px;</span><br><span class="line">//可简写为</span><br><span class="line">//grid-template-columns: repeat(重复次数,其数值大小);</span><br><span class="line">grid-template-columns: repeat(3,150px);</span><br></pre></td></tr></table></figure><ol start="2"><li>auto-fill，有时，单元格的大小是固定的，但是容器的大小不确定，这个属性就会自动填充</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: repeat(auto-fill,150px);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657025678055-3f7c3784-86ae-4a9b-826e-487ced2e1fad.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=285&id=ubdc761e4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=570&originWidth=1256&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94644&status=done&style=none&taskId=u732aa98c-0a2d-473d-a687-bdfe55cba2a&title=&width=628" alt="image.png"></p><ol start="3"><li>fr，为了方便表示比例关系，网格布局提供了fr关键字（fraction的缩写，意为”片段”）</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: repeat(4, 1fr); //宽度平均分成4份</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657025789662-7bc9d8a8-9f50-48f2-b274-81798f703b77.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=ua81893d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1389&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98799&status=done&style=none&taskId=u2354cd16-4b2d-4c31-b170-eed3abbc766&title=&width=694.5" alt="image.png"></p><ol start="4"><li>minmax()，函数产生一个长度范围，表示长度就在这个范围之中，它接受两个参数，分别为最小值和最大值</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 1fr minmax(150px, 1fr) 1fr;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657025915414-7aeb3465-abc5-4220-ba37-599d7599d4e5.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=305&id=u62a4594a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=609&originWidth=1410&originalType=binary&ratio=1&rotation=0&showTitle=false&size=96635&status=done&style=none&taskId=u34bc7248-3ace-437b-99de-389ea18bf6c&title=&width=705" alt="image.png"></p><ol start="5"><li>auto，表示由浏览器自己决定长度</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 100px auto 100px;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657025968021-2470dc77-d052-4cc2-9366-d51684d8a61c.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=304&id=u56f63173&margin=%5Bobject%20Object%5D&name=image.png&originHeight=608&originWidth=1501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85777&status=done&style=none&taskId=u0bbfa230-f68c-4450-8e26-ebebaa1f68a&title=&width=750.5" alt="image.png"></p><ol start="6"><li>网格线，可以用方括号定义网格线名称，方便以后的引用</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: [c1] 100px [c2] 100px [c3] 100px [c4];</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657026253025-84839587-c374-4498-82fa-7fdc9d55f038.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=577&id=u80a5a0ef&margin=%5Bobject%20Object%5D&name=image.png&originHeight=628&originWidth=477&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75231&status=done&style=none&taskId=ua95c9979-2dd1-4cf0-9d2b-db5b1660719&title=&width=438.5" alt="image.png"></p><h4 id="column-gap与row-gap"><a href="#column-gap与row-gap" class="headerlink" title="column-gap与row-gap"></a>column-gap与row-gap</h4><blockquote><p>一句话解释就是，item（项目）相互之间的距离</p></blockquote><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">column-gap: 20px;</span><br><span class="line">row-gap: 15px;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657026518458-b4e7f6fc-5b28-4ed5-8a53-52fc5f8ffc14.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=400&id=uca2a3d38&margin=%5Bobject%20Object%5D&name=image.png&originHeight=680&originWidth=946&originalType=binary&ratio=1&rotation=0&showTitle=false&size=142046&status=done&style=none&taskId=ude2acc2e-223b-475c-9a0d-823e89fe432&title=&width=556" alt="image.png"></p><h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h4><blockquote><p>一个区域由单个或多个单元格组成，由你决定(具体使用，需要在项目属性里面设置)<br>区域不需要利用，则使用”点”（.）表示<br>区域的命名会影响到网格线。每个区域的起始网格线，<br>会自动命名为区域名-start，终止网格线自动命名为区<br>域名-end    </p></blockquote><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-areas: &#x27;a . c&#x27;</span><br><span class="line">&#x27;d . f&#x27;</span><br><span class="line">&#x27;g . i&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657026892323-db306603-24e2-4b3c-8529-24da03662e78.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=404&id=u0df3d423&margin=%5Bobject%20Object%5D&name=image.png&originHeight=692&originWidth=948&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85722&status=done&style=none&taskId=u88f93c85-d799-4244-979c-e8649781dfa&title=&width=553" alt="image.png"></p><h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h4><blockquote><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是“先行后列”，即先填满第一行，再开始放入第二行（就是子元素的排放顺序)</p></blockquote><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//先行后列</span><br><span class="line">grid-auto-flow: row; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657026993387-30955bf3-d128-4dda-b1ea-6b9519b0fade.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=341&id=u265175f2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=682&originWidth=944&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85157&status=done&style=none&taskId=u0d797a38-098b-4174-9df6-8ee65354d94&title=&width=472" alt="image.png"></p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//先列后行</span><br><span class="line">grid-auto-flow: column</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027079105-e58da3ea-cc98-4514-8568-dffd8aee263e.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=338&id=u9b9e44a3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=675&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=108532&status=done&style=none&taskId=u0746f04f-ffc3-4a46-a38b-994797eff49&title=&width=516.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027192352-f9fce3f3-54f8-4352-886e-1ecd8d976b47.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=322&id=u91fea54e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54076&status=done&style=none&taskId=u560feccc-619b-479d-a1ba-ef5cbed7572&title=&width=584.5" alt="image.png"></p><h4 id="justify-items-水平方向-和align-items-垂直方向"><a href="#justify-items-水平方向-和align-items-垂直方向" class="headerlink" title="justify-items(水平方向)和align-items(垂直方向)"></a>justify-items(水平方向)和align-items(垂直方向)</h4><blockquote><p>设置单元格内容的水平和垂直的对齐方式<br>justify-items:start | end | center | stretch<br>align-items:start | end | center | stretch;    </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027478079-16d8b43a-29d8-428d-88e0-c02c97662bfa.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=401&id=uc45c7521&margin=%5Bobject%20Object%5D&name=image.png&originHeight=707&originWidth=1226&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154247&status=done&style=none&taskId=ucab6339a-c2aa-4676-80d6-1dbcdb5b440&title=&width=696" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027510196-735470e2-051f-4650-ac6b-abcfd55afabd.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=440&id=u0116ea7a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=679&originWidth=1068&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145653&status=done&style=none&taskId=ue83c4eb6-5692-47bb-b57d-91b99f73d88&title=&width=692" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027540821-0ccce232-b3a2-412f-8512-51b7b5232ed0.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=481&id=u7bbb2c76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=689&originWidth=992&originalType=binary&ratio=1&rotation=0&showTitle=false&size=141920&status=done&style=none&taskId=u7c6a91be-8e92-4c6d-a408-712462490ad&title=&width=692" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027591090-47f92f3d-dc85-4a1a-9ce6-dbe2dbd7fea2.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=485&id=uf559d3de&margin=%5Bobject%20Object%5D&name=image.png&originHeight=693&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=140412&status=done&style=none&taskId=u0c28f40b-5a8b-421e-a6a1-48d9889e6be&title=&width=695" alt="image.png"><br> <img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027688406-2ee1f78d-04c0-43ec-920b-35fce8f95ee9.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=492&id=u556059c5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=683&originWidth=961&originalType=binary&ratio=1&rotation=0&showTitle=false&size=135492&status=done&style=none&taskId=u36ba93cd-67a5-44be-a48f-a7a5435f044&title=&width=692.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027720167-301ac51f-3b05-4a3b-af1d-843dcf439c77.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=485&id=u0920799a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=680&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134860&status=done&style=none&taskId=ua7892b41-1640-4ef9-988b-1959686fec0&title=&width=696" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027759183-39ed0521-eeb0-4d96-bc1c-177d28770d76.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=499&id=ud110ff28&margin=%5Bobject%20Object%5D&name=image.png&originHeight=674&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134740&status=done&style=none&taskId=u4c21ae5e-e1d7-415f-ba6d-9426b49e435&title=&width=699.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027786268-cff4ddae-d2a6-4cb3-b515-1c7791cacdb0.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=510&id=u651044a4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=690&originWidth=953&originalType=binary&ratio=1&rotation=0&showTitle=false&size=137261&status=done&style=none&taskId=ud7e00237-73ed-4f34-99e7-062fc3fe8a5&title=&width=704.5" alt="image.png"></p><h4 id="justify-content-水平方向-和align-content-垂直方向"><a href="#justify-content-水平方向-和align-content-垂直方向" class="headerlink" title="justify-content(水平方向)和align-content(垂直方向)"></a>justify-content(水平方向)和align-content(垂直方向)</h4><blockquote><p>设置整个内容区域的水平和垂直的对齐方式<br>justify-content:start | end | center | stretch | space-around | space-between | space-evenly;<br>align-content:start | end | center | stretch | space-around | space-between | space-evenly;   </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657027966250-fe675f38-e670-47c0-b7a4-046d2b533023.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=488&id=u5c614c2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=719&originWidth=1015&originalType=binary&ratio=1&rotation=0&showTitle=false&size=141358&status=done&style=none&taskId=u44ce2771-adf2-48b8-b699-92672cda328&title=&width=688.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657028019418-5bc42f3d-8d24-46a4-96b6-ea5327a5e3de.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=354&id=u6fdf862f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=708&originWidth=1402&originalType=binary&ratio=1&rotation=0&showTitle=false&size=116739&status=done&style=none&taskId=u380c3aec-297f-424f-a705-3ebb3335fd8&title=&width=701" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657028086764-4d7f3dc2-3d8f-4241-8c4f-1576b1a21dcd.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=576&id=u235bf437&margin=%5Bobject%20Object%5D&name=image.png&originHeight=771&originWidth=958&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145254&status=done&style=none&taskId=u0e1171b1-ecca-4c70-a799-40c690f6bd0&title=&width=716" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657028135044-c9ff646f-ce72-4f45-ac28-790424bf6cbe.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=585&id=u58561892&margin=%5Bobject%20Object%5D&name=image.png&originHeight=907&originWidth=1095&originalType=binary&ratio=1&rotation=0&showTitle=false&size=237057&status=done&style=none&taskId=u03ccb319-af8c-428b-a5ad-c6f5ba4ce99&title=&width=706.5" alt="image.png"></p><h4 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns/grid-auto-rows"></a>grid-auto-columns/grid-auto-rows</h4><blockquote><p>用来设置多出来的项目宽和高<br>我只设置了3x3个项目，但是实际有10个，整个属性就是用来设置多出来的项目  </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657028452617-62d812f2-3f48-443a-b1ab-353307aaca55.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=460&id=u662ecc97&margin=%5Bobject%20Object%5D&name=image.png&originHeight=629&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&size=104831&status=done&style=none&taskId=ub84a8090-fc9d-417a-bced-f63dcd8aad6&title=&width=726.5" alt="image.png"></p><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ul><li>grid-column-start</li><li>grid-column-end</li><li>grid-row-start</li><li>grid-row-end</li><li>grid-column (1和2的简写形式)</li><li>grid-row (3和4的简写形式)</li><li>grid-area</li><li>justify-self</li><li>align-self</li><li>place-self(8和9的简写形式)</li></ul><h4 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end" class="headerlink" title="grid-column-start/grid-column-end/grid-row-start/grid-row-end"></a>grid-column-start/grid-column-end/grid-row-start/grid-row-end</h4><blockquote><p>一句话解释，用来指定item的具体位置,根据在哪根网格线<br>列方向4根网格线，第一个项目占用了从第一根到第三根   </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657028879109-bf10ff3d-0af5-43bf-b745-a639e9fbab1f.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=406&id=uac4fd28b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=701&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=183500&status=done&style=none&taskId=ue8c565de-e298-446f-adca-38993dfaa4a&title=&width=684" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657029110756-5f6e2504-2b54-4229-92c6-3dea63f1f57b.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=377&id=u52812f85&margin=%5Bobject%20Object%5D&name=image.png&originHeight=711&originWidth=1353&originalType=binary&ratio=1&rotation=0&showTitle=false&size=221692&status=done&style=none&taskId=u6cf68504-a911-49c5-87f8-e2848998a38&title=&width=717.5" alt="image.png"></p><h4 id="grid-column-grid-row"><a href="#grid-column-grid-row" class="headerlink" title="grid-column/grid-row"></a>grid-column/grid-row</h4><blockquote><p>grid-column属性是grid-column-start和grid-column-end的合并简写形式<br>grid-row属性是grid-row-start属性和grid-row-end的合并简写形式   </p></blockquote><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  grid-column-start: 1;</span><br><span class="line">  grid-column-end: 3;</span><br><span class="line">  grid-row-start: 2;</span><br><span class="line">  grid-row-end: 4;</span><br><span class="line">&#125;</span><br><span class="line">//可简写为</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  grid-column: 1 / 3;</span><br><span class="line">  grid-row: 2 / 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657029355483-b3234538-ff9b-4f00-b31e-f14750454a80.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=496&id=ua0c179f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=704&originWidth=984&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133200&status=done&style=none&taskId=ube9bb4e1-a45e-4141-81dc-1421c9e5310&title=&width=693" alt="image.png"></p><h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h4><blockquote><p>指定项目放在哪一个区域<br>grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置<br>grid-area: <row-start> / <column-start> / <row-end> / <column-end>;   </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657029669733-2a43b376-2e35-4ba8-98e4-cd95015e76d1.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=424&id=u451ea6d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=659&originWidth=1199&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162731&status=done&style=none&taskId=uc1cf3efb-12ea-466f-815b-d28e8186224&title=&width=771.5" alt="image.png"></p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将</span><br><span class="line">grid-column-start: 1;</span><br><span class="line">grid-column-end: 3;</span><br><span class="line">grid-row-start: 2;</span><br><span class="line">grid-row-end: 4;</span><br><span class="line">//kejianxiew</span><br><span class="line">grid-area: 1 / 3 / 2 / 4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="justify-self-align-self-place-self"><a href="#justify-self-align-self-place-self" class="headerlink" title="justify-self/align-self/place-self"></a>justify-self/align-self/place-self</h4><blockquote><p>justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目(水平方向)<br>align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目(垂直方向)<br>justify-self:start | end | center | stretch;<br>align-self:start | end | center | stretch;<br>place-self属性是align-self属性和justify-self属性的合并简写形式place-self:centercenter;   </p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657030151397-d2c4cfe5-0289-4f4e-85dd-49ffc273baa0.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=483&id=u6ab8f9fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=700&originWidth=1031&originalType=binary&ratio=1&rotation=0&showTitle=false&size=148328&status=done&style=none&taskId=u66e78c68-ee22-4ac9-9512-e12c4e7503e&title=&width=711.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25602002/1657030209380-76e4fa7c-2ac2-4f43-ac6b-2803421dae3b.png#clientId=u612f459d-1d89-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=500&id=ub145be4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=699&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=141573&status=done&style=none&taskId=u704df25d-e7a0-42f8-9580-bdd6b101d85&title=&width=708" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> css的grid布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github多账户ssh-key配置</title>
      <link href="/archives/4edd51a2.html"/>
      <url>/archives/4edd51a2.html</url>
      
        <content type="html"><![CDATA[<p>假设user1的邮箱为<a href="mailto:&#117;&#115;&#x65;&#x72;&#49;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#117;&#115;&#x65;&#x72;&#49;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>，user2的邮箱为<a href="mailto:&#117;&#115;&#101;&#x72;&#x32;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#117;&#115;&#101;&#x72;&#x32;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p><h2 id="1-首先进入用户主目录下的-ssh文件夹-，把生成的密钥对放在这儿。"><a href="#1-首先进入用户主目录下的-ssh文件夹-，把生成的密钥对放在这儿。" class="headerlink" title="1.首先进入用户主目录下的.ssh文件夹 ，把生成的密钥对放在这儿。"></a>1.首先进入用户主目录下的.ssh文件夹 ，把生成的密钥对放在这儿。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh  </span><br></pre></td></tr></table></figure><h2 id="2-分别为user1和user2生成密钥对："><a href="#2-分别为user1和user2生成密钥对：" class="headerlink" title="2.分别为user1和user2生成密钥对："></a>2.分别为user1和user2生成密钥对：</h2><h3 id="默认三次回车产生的key名字为-id-rsa，在生成第二个密钥时要注意，给其起个别名id-rsa-user2，如下列代码所示。"><a href="#默认三次回车产生的key名字为-id-rsa，在生成第二个密钥时要注意，给其起个别名id-rsa-user2，如下列代码所示。" class="headerlink" title="默认三次回车产生的key名字为 id_rsa，在生成第二个密钥时要注意，给其起个别名id_rsa_user2，如下列代码所示。"></a>默认三次回车产生的key名字为 <em><strong>id_rsa</strong></em>，在生成第二个密钥时要注意，给其起个别名<em><strong>id_rsa_user2</strong></em>，如下列代码所示。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;user1@qq.com&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;user2@qq.com&quot;</span><br><span class="line"># 设置user2的密钥对名字为 id_rsa_user2</span><br><span class="line">Enter file in which to save the key (/c/Users/lenovo/.ssh/id_rsa): c/Users/lenovo/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure><h3 id="此时-ssh文件夹中就存在两个密钥对文件，id-rsa和id-rsa-user2，分别添加其公钥到user1和user2的GitHub账户的SSH-KEYS中。"><a href="#此时-ssh文件夹中就存在两个密钥对文件，id-rsa和id-rsa-user2，分别添加其公钥到user1和user2的GitHub账户的SSH-KEYS中。" class="headerlink" title="此时 .ssh文件夹中就存在两个密钥对文件，id_rsa和id_rsa_user2，分别添加其公钥到user1和user2的GitHub账户的SSH KEYS中。"></a>此时 .ssh文件夹中就存在两个密钥对文件，<em><strong>id_rsa</strong></em>和<em><strong>id_rsa_user2</strong></em>，分别添加其公钥到user1和user2的GitHub账户的SSH KEYS中。</h3><h2 id="3-添加key到ssh-agent中"><a href="#3-添加key到ssh-agent中" class="headerlink" title="3.添加key到ssh agent中"></a>3.添加<em><strong>key</strong></em>到<em><strong>ssh agent</strong></em>中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure><h3 id="成功会显示："><a href="#成功会显示：" class="headerlink" title="成功会显示："></a>成功会显示：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Identity added: /c/Users/Windows用户名/.ssh/key名 (/c/Users/Windows用户名/.ssh/key名)</span><br></pre></td></tr></table></figure><h3 id="注意：ssh-add-这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到-ssh-agent-所管理的一个-session-当中。而-ssh-agent-是一个用于存储私钥的临时性的-session-服务，也就是说当你重启之后，-ssh-agent服务也就重置了。"><a href="#注意：ssh-add-这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到-ssh-agent-所管理的一个-session-当中。而-ssh-agent-是一个用于存储私钥的临时性的-session-服务，也就是说当你重启之后，-ssh-agent服务也就重置了。" class="headerlink" title="注意：ssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个 session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后， ssh-agent服务也就重置了。"></a>注意：<em><strong>ssh-add</strong></em> 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 <em><strong>ssh-agent</strong></em> 所管理的一个 <em><strong>session</strong></em> 当中。而 <em><strong>ssh-agent</strong></em> 是一个用于存储私钥的临时性的 <em><strong>session</strong></em> 服务，也就是说当你重启之后， <em><strong>ssh-agent</strong></em>服务也就重置了。</h3><h2 id="4-创建config文件使配置永久生效："><a href="#4-创建config文件使配置永久生效：" class="headerlink" title="4.创建config文件使配置永久生效："></a>4.创建config文件使配置永久生效：</h2><h3 id="在-ssh-目录下新建-config-文件，无后缀名，在-git-bash-下可直接-touch-config-，编辑如下内容："><a href="#在-ssh-目录下新建-config-文件，无后缀名，在-git-bash-下可直接-touch-config-，编辑如下内容：" class="headerlink" title="在 ./ssh 目录下新建 config 文件，无后缀名，在 git bash 下可直接 touch config ，编辑如下内容："></a>在 <em><strong>./ssh</strong></em> 目录下新建 <em><strong>config</strong></em> 文件，无后缀名，在 <em><strong>git bash</strong></em> 下可直接 <em><strong>touch config</strong></em> ，编辑如下内容：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host user1.com</span><br><span class="line">HostName user1.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host user2.com</span><br><span class="line">HostName user2.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure><h3 id="今后对github的操作就写完"><a href="#今后对github的操作就写完" class="headerlink" title="今后对github的操作就写完"></a>今后对github的操作就写完</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@Host:用户名/仓库名.git</span><br><span class="line">$ #user1的操作</span><br><span class="line">$ git remote add origin git@user1.com: user1/仓库名.git</span><br><span class="line">$ #user2的操作</span><br><span class="line">$ git remote add origin git@user2.com: user2/仓库名.git</span><br></pre></td></tr></table></figure><h2 id="5-设置局部的用户名和邮箱，若之前进行全局设置过的话，要unset一下，并且在add-origin之后再局部的设置用户名和邮箱。"><a href="#5-设置局部的用户名和邮箱，若之前进行全局设置过的话，要unset一下，并且在add-origin之后再局部的设置用户名和邮箱。" class="headerlink" title="5.设置局部的用户名和邮箱，若之前进行全局设置过的话，要unset一下，并且在add origin之后再局部的设置用户名和邮箱。"></a>5.设置局部的用户名和邮箱，若之前进行全局设置过的话，要<em><strong>unset</strong></em>一下，并且在<em><strong>add origin</strong></em>之后再局部的设置用户名和邮箱。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先重置下全局的用户名和邮箱</span><br><span class="line">$ git config --global --unset user.name</span><br><span class="line">$ git config --global --unset user.email</span><br><span class="line"># 1.git remote add origin git@user1.com: user1/仓库名.git之后</span><br><span class="line">$ git config user.name &quot;user1&quot;</span><br><span class="line">$ git confog user.eamil &quot;user1.@qq.com&quot;</span><br><span class="line"># 2.git remote add origin git@user2.com: user2/仓库名.git之后</span><br><span class="line">$ git config user.name &quot;user2&quot;</span><br><span class="line">$ git confog user.eamil &quot;user2.@qq.com&quot;</span><br></pre></td></tr></table></figure><h2 id="6-测试是否成功"><a href="#6-测试是否成功" class="headerlink" title="6.测试是否成功"></a>6.测试是否成功</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ssh -T git@Host(config中设置的Host)</span><br><span class="line">$ ssh -T git$user1.com</span><br><span class="line"># 输出：Hi user1! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">$ ssh -T git$user2.com</span><br><span class="line"># 输出：Hi user2! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/RenNino/picodemo/img/sshconfig.png" alt="测试及config"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> ssh-key </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora基本使用</title>
      <link href="/archives/427664ba.html"/>
      <url>/archives/427664ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo常用指令"><a href="#Hexo常用指令" class="headerlink" title="Hexo常用指令"></a>Hexo常用指令</h1><h2 id="hexo-clean-hexo-generate-hexo-server-hexo-deploy"><a href="#hexo-clean-hexo-generate-hexo-server-hexo-deploy" class="headerlink" title="hexo clean  hexo generate  hexo server hexo deploy"></a>hexo clean  hexo generate  hexo server hexo deploy</h2><h2 id="hexo-c-hexo-g-hexo-s-hexo-d"><a href="#hexo-c-hexo-g-hexo-s-hexo-d" class="headerlink" title="hexo c  hexo g  hexo s hexo d"></a>hexo c  hexo g  hexo s hexo d</h2><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;article title&quot;</span></span><br></pre></td></tr></table></figure><h2 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page pagename</span><br></pre></td></tr></table></figure><h3 id="执行以后，会生成source-pagename-index-md，再添加"><a href="#执行以后，会生成source-pagename-index-md，再添加" class="headerlink" title="执行以后，会生成source/pagename/index.md，再添加"></a>执行以后，会生成source/pagename/index.md，再添加</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">types: &quot;pagename&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一个文章</title>
      <link href="/archives/30422b3f.html"/>
      <url>/archives/30422b3f.html</url>
      
        <content type="html"><![CDATA[<p>这是我的第一个文章这是我的第一个文章这是我的第一个文章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
